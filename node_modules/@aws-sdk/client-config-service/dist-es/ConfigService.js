import { BatchGetAggregateResourceConfigCommand, } from "./commands/BatchGetAggregateResourceConfigCommand";
import { BatchGetResourceConfigCommand, } from "./commands/BatchGetResourceConfigCommand";
import { DeleteAggregationAuthorizationCommand, } from "./commands/DeleteAggregationAuthorizationCommand";
import { DeleteConfigRuleCommand, } from "./commands/DeleteConfigRuleCommand";
import { DeleteConfigurationAggregatorCommand, } from "./commands/DeleteConfigurationAggregatorCommand";
import { DeleteConfigurationRecorderCommand, } from "./commands/DeleteConfigurationRecorderCommand";
import { DeleteConformancePackCommand, } from "./commands/DeleteConformancePackCommand";
import { DeleteDeliveryChannelCommand, } from "./commands/DeleteDeliveryChannelCommand";
import { DeleteEvaluationResultsCommand, } from "./commands/DeleteEvaluationResultsCommand";
import { DeleteOrganizationConfigRuleCommand, } from "./commands/DeleteOrganizationConfigRuleCommand";
import { DeleteOrganizationConformancePackCommand, } from "./commands/DeleteOrganizationConformancePackCommand";
import { DeletePendingAggregationRequestCommand, } from "./commands/DeletePendingAggregationRequestCommand";
import { DeleteRemediationConfigurationCommand, } from "./commands/DeleteRemediationConfigurationCommand";
import { DeleteRemediationExceptionsCommand, } from "./commands/DeleteRemediationExceptionsCommand";
import { DeleteResourceConfigCommand, } from "./commands/DeleteResourceConfigCommand";
import { DeleteRetentionConfigurationCommand, } from "./commands/DeleteRetentionConfigurationCommand";
import { DeleteStoredQueryCommand, } from "./commands/DeleteStoredQueryCommand";
import { DeliverConfigSnapshotCommand, } from "./commands/DeliverConfigSnapshotCommand";
import { DescribeAggregateComplianceByConfigRulesCommand, } from "./commands/DescribeAggregateComplianceByConfigRulesCommand";
import { DescribeAggregateComplianceByConformancePacksCommand, } from "./commands/DescribeAggregateComplianceByConformancePacksCommand";
import { DescribeAggregationAuthorizationsCommand, } from "./commands/DescribeAggregationAuthorizationsCommand";
import { DescribeComplianceByConfigRuleCommand, } from "./commands/DescribeComplianceByConfigRuleCommand";
import { DescribeComplianceByResourceCommand, } from "./commands/DescribeComplianceByResourceCommand";
import { DescribeConfigRuleEvaluationStatusCommand, } from "./commands/DescribeConfigRuleEvaluationStatusCommand";
import { DescribeConfigRulesCommand, } from "./commands/DescribeConfigRulesCommand";
import { DescribeConfigurationAggregatorsCommand, } from "./commands/DescribeConfigurationAggregatorsCommand";
import { DescribeConfigurationAggregatorSourcesStatusCommand, } from "./commands/DescribeConfigurationAggregatorSourcesStatusCommand";
import { DescribeConfigurationRecordersCommand, } from "./commands/DescribeConfigurationRecordersCommand";
import { DescribeConfigurationRecorderStatusCommand, } from "./commands/DescribeConfigurationRecorderStatusCommand";
import { DescribeConformancePackComplianceCommand, } from "./commands/DescribeConformancePackComplianceCommand";
import { DescribeConformancePacksCommand, } from "./commands/DescribeConformancePacksCommand";
import { DescribeConformancePackStatusCommand, } from "./commands/DescribeConformancePackStatusCommand";
import { DescribeDeliveryChannelsCommand, } from "./commands/DescribeDeliveryChannelsCommand";
import { DescribeDeliveryChannelStatusCommand, } from "./commands/DescribeDeliveryChannelStatusCommand";
import { DescribeOrganizationConfigRulesCommand, } from "./commands/DescribeOrganizationConfigRulesCommand";
import { DescribeOrganizationConfigRuleStatusesCommand, } from "./commands/DescribeOrganizationConfigRuleStatusesCommand";
import { DescribeOrganizationConformancePacksCommand, } from "./commands/DescribeOrganizationConformancePacksCommand";
import { DescribeOrganizationConformancePackStatusesCommand, } from "./commands/DescribeOrganizationConformancePackStatusesCommand";
import { DescribePendingAggregationRequestsCommand, } from "./commands/DescribePendingAggregationRequestsCommand";
import { DescribeRemediationConfigurationsCommand, } from "./commands/DescribeRemediationConfigurationsCommand";
import { DescribeRemediationExceptionsCommand, } from "./commands/DescribeRemediationExceptionsCommand";
import { DescribeRemediationExecutionStatusCommand, } from "./commands/DescribeRemediationExecutionStatusCommand";
import { DescribeRetentionConfigurationsCommand, } from "./commands/DescribeRetentionConfigurationsCommand";
import { GetAggregateComplianceDetailsByConfigRuleCommand, } from "./commands/GetAggregateComplianceDetailsByConfigRuleCommand";
import { GetAggregateConfigRuleComplianceSummaryCommand, } from "./commands/GetAggregateConfigRuleComplianceSummaryCommand";
import { GetAggregateConformancePackComplianceSummaryCommand, } from "./commands/GetAggregateConformancePackComplianceSummaryCommand";
import { GetAggregateDiscoveredResourceCountsCommand, } from "./commands/GetAggregateDiscoveredResourceCountsCommand";
import { GetAggregateResourceConfigCommand, } from "./commands/GetAggregateResourceConfigCommand";
import { GetComplianceDetailsByConfigRuleCommand, } from "./commands/GetComplianceDetailsByConfigRuleCommand";
import { GetComplianceDetailsByResourceCommand, } from "./commands/GetComplianceDetailsByResourceCommand";
import { GetComplianceSummaryByConfigRuleCommand, } from "./commands/GetComplianceSummaryByConfigRuleCommand";
import { GetComplianceSummaryByResourceTypeCommand, } from "./commands/GetComplianceSummaryByResourceTypeCommand";
import { GetConformancePackComplianceDetailsCommand, } from "./commands/GetConformancePackComplianceDetailsCommand";
import { GetConformancePackComplianceSummaryCommand, } from "./commands/GetConformancePackComplianceSummaryCommand";
import { GetCustomRulePolicyCommand, } from "./commands/GetCustomRulePolicyCommand";
import { GetDiscoveredResourceCountsCommand, } from "./commands/GetDiscoveredResourceCountsCommand";
import { GetOrganizationConfigRuleDetailedStatusCommand, } from "./commands/GetOrganizationConfigRuleDetailedStatusCommand";
import { GetOrganizationConformancePackDetailedStatusCommand, } from "./commands/GetOrganizationConformancePackDetailedStatusCommand";
import { GetOrganizationCustomRulePolicyCommand, } from "./commands/GetOrganizationCustomRulePolicyCommand";
import { GetResourceConfigHistoryCommand, } from "./commands/GetResourceConfigHistoryCommand";
import { GetResourceEvaluationSummaryCommand, } from "./commands/GetResourceEvaluationSummaryCommand";
import { GetStoredQueryCommand, } from "./commands/GetStoredQueryCommand";
import { ListAggregateDiscoveredResourcesCommand, } from "./commands/ListAggregateDiscoveredResourcesCommand";
import { ListConformancePackComplianceScoresCommand, } from "./commands/ListConformancePackComplianceScoresCommand";
import { ListDiscoveredResourcesCommand, } from "./commands/ListDiscoveredResourcesCommand";
import { ListResourceEvaluationsCommand, } from "./commands/ListResourceEvaluationsCommand";
import { ListStoredQueriesCommand, } from "./commands/ListStoredQueriesCommand";
import { ListTagsForResourceCommand, } from "./commands/ListTagsForResourceCommand";
import { PutAggregationAuthorizationCommand, } from "./commands/PutAggregationAuthorizationCommand";
import { PutConfigRuleCommand, } from "./commands/PutConfigRuleCommand";
import { PutConfigurationAggregatorCommand, } from "./commands/PutConfigurationAggregatorCommand";
import { PutConfigurationRecorderCommand, } from "./commands/PutConfigurationRecorderCommand";
import { PutConformancePackCommand, } from "./commands/PutConformancePackCommand";
import { PutDeliveryChannelCommand, } from "./commands/PutDeliveryChannelCommand";
import { PutEvaluationsCommand, } from "./commands/PutEvaluationsCommand";
import { PutExternalEvaluationCommand, } from "./commands/PutExternalEvaluationCommand";
import { PutOrganizationConfigRuleCommand, } from "./commands/PutOrganizationConfigRuleCommand";
import { PutOrganizationConformancePackCommand, } from "./commands/PutOrganizationConformancePackCommand";
import { PutRemediationConfigurationsCommand, } from "./commands/PutRemediationConfigurationsCommand";
import { PutRemediationExceptionsCommand, } from "./commands/PutRemediationExceptionsCommand";
import { PutResourceConfigCommand, } from "./commands/PutResourceConfigCommand";
import { PutRetentionConfigurationCommand, } from "./commands/PutRetentionConfigurationCommand";
import { PutStoredQueryCommand, } from "./commands/PutStoredQueryCommand";
import { SelectAggregateResourceConfigCommand, } from "./commands/SelectAggregateResourceConfigCommand";
import { SelectResourceConfigCommand, } from "./commands/SelectResourceConfigCommand";
import { StartConfigRulesEvaluationCommand, } from "./commands/StartConfigRulesEvaluationCommand";
import { StartConfigurationRecorderCommand, } from "./commands/StartConfigurationRecorderCommand";
import { StartRemediationExecutionCommand, } from "./commands/StartRemediationExecutionCommand";
import { StartResourceEvaluationCommand, } from "./commands/StartResourceEvaluationCommand";
import { StopConfigurationRecorderCommand, } from "./commands/StopConfigurationRecorderCommand";
import { TagResourceCommand } from "./commands/TagResourceCommand";
import { UntagResourceCommand, } from "./commands/UntagResourceCommand";
import { ConfigServiceClient } from "./ConfigServiceClient";
export class ConfigService extends ConfigServiceClient {
    batchGetAggregateResourceConfig(args, optionsOrCb, cb) {
        const command = new BatchGetAggregateResourceConfigCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    batchGetResourceConfig(args, optionsOrCb, cb) {
        const command = new BatchGetResourceConfigCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteAggregationAuthorization(args, optionsOrCb, cb) {
        const command = new DeleteAggregationAuthorizationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteConfigRule(args, optionsOrCb, cb) {
        const command = new DeleteConfigRuleCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteConfigurationAggregator(args, optionsOrCb, cb) {
        const command = new DeleteConfigurationAggregatorCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteConfigurationRecorder(args, optionsOrCb, cb) {
        const command = new DeleteConfigurationRecorderCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteConformancePack(args, optionsOrCb, cb) {
        const command = new DeleteConformancePackCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteDeliveryChannel(args, optionsOrCb, cb) {
        const command = new DeleteDeliveryChannelCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteEvaluationResults(args, optionsOrCb, cb) {
        const command = new DeleteEvaluationResultsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteOrganizationConfigRule(args, optionsOrCb, cb) {
        const command = new DeleteOrganizationConfigRuleCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteOrganizationConformancePack(args, optionsOrCb, cb) {
        const command = new DeleteOrganizationConformancePackCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deletePendingAggregationRequest(args, optionsOrCb, cb) {
        const command = new DeletePendingAggregationRequestCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteRemediationConfiguration(args, optionsOrCb, cb) {
        const command = new DeleteRemediationConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteRemediationExceptions(args, optionsOrCb, cb) {
        const command = new DeleteRemediationExceptionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteResourceConfig(args, optionsOrCb, cb) {
        const command = new DeleteResourceConfigCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteRetentionConfiguration(args, optionsOrCb, cb) {
        const command = new DeleteRetentionConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteStoredQuery(args, optionsOrCb, cb) {
        const command = new DeleteStoredQueryCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deliverConfigSnapshot(args, optionsOrCb, cb) {
        const command = new DeliverConfigSnapshotCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeAggregateComplianceByConfigRules(args, optionsOrCb, cb) {
        const command = new DescribeAggregateComplianceByConfigRulesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeAggregateComplianceByConformancePacks(args, optionsOrCb, cb) {
        const command = new DescribeAggregateComplianceByConformancePacksCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeAggregationAuthorizations(args, optionsOrCb, cb) {
        const command = new DescribeAggregationAuthorizationsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeComplianceByConfigRule(args, optionsOrCb, cb) {
        const command = new DescribeComplianceByConfigRuleCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeComplianceByResource(args, optionsOrCb, cb) {
        const command = new DescribeComplianceByResourceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeConfigRuleEvaluationStatus(args, optionsOrCb, cb) {
        const command = new DescribeConfigRuleEvaluationStatusCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeConfigRules(args, optionsOrCb, cb) {
        const command = new DescribeConfigRulesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeConfigurationAggregators(args, optionsOrCb, cb) {
        const command = new DescribeConfigurationAggregatorsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeConfigurationAggregatorSourcesStatus(args, optionsOrCb, cb) {
        const command = new DescribeConfigurationAggregatorSourcesStatusCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeConfigurationRecorders(args, optionsOrCb, cb) {
        const command = new DescribeConfigurationRecordersCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeConfigurationRecorderStatus(args, optionsOrCb, cb) {
        const command = new DescribeConfigurationRecorderStatusCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeConformancePackCompliance(args, optionsOrCb, cb) {
        const command = new DescribeConformancePackComplianceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeConformancePacks(args, optionsOrCb, cb) {
        const command = new DescribeConformancePacksCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeConformancePackStatus(args, optionsOrCb, cb) {
        const command = new DescribeConformancePackStatusCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeDeliveryChannels(args, optionsOrCb, cb) {
        const command = new DescribeDeliveryChannelsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeDeliveryChannelStatus(args, optionsOrCb, cb) {
        const command = new DescribeDeliveryChannelStatusCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeOrganizationConfigRules(args, optionsOrCb, cb) {
        const command = new DescribeOrganizationConfigRulesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeOrganizationConfigRuleStatuses(args, optionsOrCb, cb) {
        const command = new DescribeOrganizationConfigRuleStatusesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeOrganizationConformancePacks(args, optionsOrCb, cb) {
        const command = new DescribeOrganizationConformancePacksCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeOrganizationConformancePackStatuses(args, optionsOrCb, cb) {
        const command = new DescribeOrganizationConformancePackStatusesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describePendingAggregationRequests(args, optionsOrCb, cb) {
        const command = new DescribePendingAggregationRequestsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeRemediationConfigurations(args, optionsOrCb, cb) {
        const command = new DescribeRemediationConfigurationsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeRemediationExceptions(args, optionsOrCb, cb) {
        const command = new DescribeRemediationExceptionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeRemediationExecutionStatus(args, optionsOrCb, cb) {
        const command = new DescribeRemediationExecutionStatusCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeRetentionConfigurations(args, optionsOrCb, cb) {
        const command = new DescribeRetentionConfigurationsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getAggregateComplianceDetailsByConfigRule(args, optionsOrCb, cb) {
        const command = new GetAggregateComplianceDetailsByConfigRuleCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getAggregateConfigRuleComplianceSummary(args, optionsOrCb, cb) {
        const command = new GetAggregateConfigRuleComplianceSummaryCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getAggregateConformancePackComplianceSummary(args, optionsOrCb, cb) {
        const command = new GetAggregateConformancePackComplianceSummaryCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getAggregateDiscoveredResourceCounts(args, optionsOrCb, cb) {
        const command = new GetAggregateDiscoveredResourceCountsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getAggregateResourceConfig(args, optionsOrCb, cb) {
        const command = new GetAggregateResourceConfigCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getComplianceDetailsByConfigRule(args, optionsOrCb, cb) {
        const command = new GetComplianceDetailsByConfigRuleCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getComplianceDetailsByResource(args, optionsOrCb, cb) {
        const command = new GetComplianceDetailsByResourceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getComplianceSummaryByConfigRule(args, optionsOrCb, cb) {
        const command = new GetComplianceSummaryByConfigRuleCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getComplianceSummaryByResourceType(args, optionsOrCb, cb) {
        const command = new GetComplianceSummaryByResourceTypeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getConformancePackComplianceDetails(args, optionsOrCb, cb) {
        const command = new GetConformancePackComplianceDetailsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getConformancePackComplianceSummary(args, optionsOrCb, cb) {
        const command = new GetConformancePackComplianceSummaryCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getCustomRulePolicy(args, optionsOrCb, cb) {
        const command = new GetCustomRulePolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getDiscoveredResourceCounts(args, optionsOrCb, cb) {
        const command = new GetDiscoveredResourceCountsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getOrganizationConfigRuleDetailedStatus(args, optionsOrCb, cb) {
        const command = new GetOrganizationConfigRuleDetailedStatusCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getOrganizationConformancePackDetailedStatus(args, optionsOrCb, cb) {
        const command = new GetOrganizationConformancePackDetailedStatusCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getOrganizationCustomRulePolicy(args, optionsOrCb, cb) {
        const command = new GetOrganizationCustomRulePolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getResourceConfigHistory(args, optionsOrCb, cb) {
        const command = new GetResourceConfigHistoryCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getResourceEvaluationSummary(args, optionsOrCb, cb) {
        const command = new GetResourceEvaluationSummaryCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getStoredQuery(args, optionsOrCb, cb) {
        const command = new GetStoredQueryCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listAggregateDiscoveredResources(args, optionsOrCb, cb) {
        const command = new ListAggregateDiscoveredResourcesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listConformancePackComplianceScores(args, optionsOrCb, cb) {
        const command = new ListConformancePackComplianceScoresCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listDiscoveredResources(args, optionsOrCb, cb) {
        const command = new ListDiscoveredResourcesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listResourceEvaluations(args, optionsOrCb, cb) {
        const command = new ListResourceEvaluationsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listStoredQueries(args, optionsOrCb, cb) {
        const command = new ListStoredQueriesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listTagsForResource(args, optionsOrCb, cb) {
        const command = new ListTagsForResourceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putAggregationAuthorization(args, optionsOrCb, cb) {
        const command = new PutAggregationAuthorizationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putConfigRule(args, optionsOrCb, cb) {
        const command = new PutConfigRuleCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putConfigurationAggregator(args, optionsOrCb, cb) {
        const command = new PutConfigurationAggregatorCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putConfigurationRecorder(args, optionsOrCb, cb) {
        const command = new PutConfigurationRecorderCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putConformancePack(args, optionsOrCb, cb) {
        const command = new PutConformancePackCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putDeliveryChannel(args, optionsOrCb, cb) {
        const command = new PutDeliveryChannelCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putEvaluations(args, optionsOrCb, cb) {
        const command = new PutEvaluationsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putExternalEvaluation(args, optionsOrCb, cb) {
        const command = new PutExternalEvaluationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putOrganizationConfigRule(args, optionsOrCb, cb) {
        const command = new PutOrganizationConfigRuleCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putOrganizationConformancePack(args, optionsOrCb, cb) {
        const command = new PutOrganizationConformancePackCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putRemediationConfigurations(args, optionsOrCb, cb) {
        const command = new PutRemediationConfigurationsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putRemediationExceptions(args, optionsOrCb, cb) {
        const command = new PutRemediationExceptionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putResourceConfig(args, optionsOrCb, cb) {
        const command = new PutResourceConfigCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putRetentionConfiguration(args, optionsOrCb, cb) {
        const command = new PutRetentionConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putStoredQuery(args, optionsOrCb, cb) {
        const command = new PutStoredQueryCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    selectAggregateResourceConfig(args, optionsOrCb, cb) {
        const command = new SelectAggregateResourceConfigCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    selectResourceConfig(args, optionsOrCb, cb) {
        const command = new SelectResourceConfigCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    startConfigRulesEvaluation(args, optionsOrCb, cb) {
        const command = new StartConfigRulesEvaluationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    startConfigurationRecorder(args, optionsOrCb, cb) {
        const command = new StartConfigurationRecorderCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    startRemediationExecution(args, optionsOrCb, cb) {
        const command = new StartRemediationExecutionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    startResourceEvaluation(args, optionsOrCb, cb) {
        const command = new StartResourceEvaluationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    stopConfigurationRecorder(args, optionsOrCb, cb) {
        const command = new StopConfigurationRecorderCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    tagResource(args, optionsOrCb, cb) {
        const command = new TagResourceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    untagResource(args, optionsOrCb, cb) {
        const command = new UntagResourceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
}
