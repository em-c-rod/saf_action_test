import { HttpRequest as __HttpRequest } from "@aws-sdk/protocol-http";
import { decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, parseEpochTimestamp as __parseEpochTimestamp, throwDefaultError, } from "@aws-sdk/smithy-client";
import { ConfigServiceServiceException as __BaseException } from "../models/ConfigServiceServiceException";
import { ConformancePackTemplateValidationException, IdempotentParameterMismatch, InsufficientDeliveryPolicyException, InsufficientPermissionsException, InvalidConfigurationRecorderNameException, InvalidDeliveryChannelNameException, InvalidExpressionException, InvalidLimitException, InvalidNextTokenException, InvalidParameterValueException, InvalidRecordingGroupException, InvalidResultTokenException, InvalidRoleException, InvalidS3KeyPrefixException, InvalidS3KmsKeyArnException, InvalidSNSTopicARNException, InvalidTimeRangeException, LastDeliveryChannelDeleteFailedException, LimitExceededException, MaxActiveResourcesExceededException, MaxNumberOfConfigRulesExceededException, MaxNumberOfConfigurationRecordersExceededException, MaxNumberOfConformancePacksExceededException, NoAvailableConfigurationRecorderException, NoRunningConfigurationRecorderException, NoSuchConfigRuleException, NoSuchConfigRuleInConformancePackException, NoSuchConfigurationAggregatorException, NoSuchConfigurationRecorderException, NoSuchConformancePackException, NoSuchDeliveryChannelException, NoSuchOrganizationConfigRuleException, NoSuchOrganizationConformancePackException, NoSuchRemediationConfigurationException, NoSuchRemediationExceptionException, NoSuchRetentionConfigurationException, OrganizationAccessDeniedException, OversizedConfigurationItemException, RemediationInProgressException, ResourceInUseException, ResourceNotDiscoveredException, ResourceNotFoundException, ValidationException, } from "../models/models_0";
import { MaxNumberOfDeliveryChannelsExceededException, MaxNumberOfOrganizationConfigRulesExceededException, MaxNumberOfOrganizationConformancePacksExceededException, MaxNumberOfRetentionConfigurationsExceededException, NoAvailableDeliveryChannelException, NoAvailableOrganizationException, NoSuchBucketException, OrganizationAllFeaturesNotEnabledException, OrganizationConformancePackTemplateValidationException, ResourceConcurrentModificationException, TooManyTagsException, } from "../models/models_1";
export const serializeAws_json1_1BatchGetAggregateResourceConfigCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.BatchGetAggregateResourceConfig",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1BatchGetAggregateResourceConfigRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1BatchGetResourceConfigCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.BatchGetResourceConfig",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1BatchGetResourceConfigRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeleteAggregationAuthorizationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.DeleteAggregationAuthorization",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteAggregationAuthorizationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeleteConfigRuleCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.DeleteConfigRule",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteConfigRuleRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeleteConfigurationAggregatorCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.DeleteConfigurationAggregator",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteConfigurationAggregatorRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeleteConfigurationRecorderCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.DeleteConfigurationRecorder",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteConfigurationRecorderRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeleteConformancePackCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.DeleteConformancePack",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteConformancePackRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeleteDeliveryChannelCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.DeleteDeliveryChannel",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteDeliveryChannelRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeleteEvaluationResultsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.DeleteEvaluationResults",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteEvaluationResultsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeleteOrganizationConfigRuleCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.DeleteOrganizationConfigRule",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteOrganizationConfigRuleRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeleteOrganizationConformancePackCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.DeleteOrganizationConformancePack",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteOrganizationConformancePackRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeletePendingAggregationRequestCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.DeletePendingAggregationRequest",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeletePendingAggregationRequestRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeleteRemediationConfigurationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.DeleteRemediationConfiguration",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteRemediationConfigurationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeleteRemediationExceptionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.DeleteRemediationExceptions",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteRemediationExceptionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeleteResourceConfigCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.DeleteResourceConfig",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteResourceConfigRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeleteRetentionConfigurationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.DeleteRetentionConfiguration",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteRetentionConfigurationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeleteStoredQueryCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.DeleteStoredQuery",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteStoredQueryRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeliverConfigSnapshotCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.DeliverConfigSnapshot",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeliverConfigSnapshotRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DescribeAggregateComplianceByConfigRulesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.DescribeAggregateComplianceByConfigRules",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeAggregateComplianceByConfigRulesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DescribeAggregateComplianceByConformancePacksCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.DescribeAggregateComplianceByConformancePacks",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeAggregateComplianceByConformancePacksRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DescribeAggregationAuthorizationsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.DescribeAggregationAuthorizations",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeAggregationAuthorizationsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DescribeComplianceByConfigRuleCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.DescribeComplianceByConfigRule",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeComplianceByConfigRuleRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DescribeComplianceByResourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.DescribeComplianceByResource",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeComplianceByResourceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DescribeConfigRuleEvaluationStatusCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.DescribeConfigRuleEvaluationStatus",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeConfigRuleEvaluationStatusRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DescribeConfigRulesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.DescribeConfigRules",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeConfigRulesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DescribeConfigurationAggregatorsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.DescribeConfigurationAggregators",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeConfigurationAggregatorsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DescribeConfigurationAggregatorSourcesStatusCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.DescribeConfigurationAggregatorSourcesStatus",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeConfigurationAggregatorSourcesStatusRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DescribeConfigurationRecordersCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.DescribeConfigurationRecorders",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeConfigurationRecordersRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DescribeConfigurationRecorderStatusCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.DescribeConfigurationRecorderStatus",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeConfigurationRecorderStatusRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DescribeConformancePackComplianceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.DescribeConformancePackCompliance",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeConformancePackComplianceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DescribeConformancePacksCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.DescribeConformancePacks",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeConformancePacksRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DescribeConformancePackStatusCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.DescribeConformancePackStatus",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeConformancePackStatusRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DescribeDeliveryChannelsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.DescribeDeliveryChannels",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeDeliveryChannelsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DescribeDeliveryChannelStatusCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.DescribeDeliveryChannelStatus",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeDeliveryChannelStatusRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DescribeOrganizationConfigRulesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.DescribeOrganizationConfigRules",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeOrganizationConfigRulesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DescribeOrganizationConfigRuleStatusesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.DescribeOrganizationConfigRuleStatuses",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeOrganizationConfigRuleStatusesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DescribeOrganizationConformancePacksCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.DescribeOrganizationConformancePacks",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeOrganizationConformancePacksRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DescribeOrganizationConformancePackStatusesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.DescribeOrganizationConformancePackStatuses",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeOrganizationConformancePackStatusesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DescribePendingAggregationRequestsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.DescribePendingAggregationRequests",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribePendingAggregationRequestsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DescribeRemediationConfigurationsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.DescribeRemediationConfigurations",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeRemediationConfigurationsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DescribeRemediationExceptionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.DescribeRemediationExceptions",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeRemediationExceptionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DescribeRemediationExecutionStatusCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.DescribeRemediationExecutionStatus",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeRemediationExecutionStatusRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DescribeRetentionConfigurationsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.DescribeRetentionConfigurations",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeRetentionConfigurationsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetAggregateComplianceDetailsByConfigRuleCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.GetAggregateComplianceDetailsByConfigRule",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetAggregateComplianceDetailsByConfigRuleRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetAggregateConfigRuleComplianceSummaryCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.GetAggregateConfigRuleComplianceSummary",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetAggregateConfigRuleComplianceSummaryRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetAggregateConformancePackComplianceSummaryCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.GetAggregateConformancePackComplianceSummary",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetAggregateConformancePackComplianceSummaryRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetAggregateDiscoveredResourceCountsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.GetAggregateDiscoveredResourceCounts",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetAggregateDiscoveredResourceCountsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetAggregateResourceConfigCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.GetAggregateResourceConfig",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetAggregateResourceConfigRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetComplianceDetailsByConfigRuleCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.GetComplianceDetailsByConfigRule",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetComplianceDetailsByConfigRuleRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetComplianceDetailsByResourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.GetComplianceDetailsByResource",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetComplianceDetailsByResourceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetComplianceSummaryByConfigRuleCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.GetComplianceSummaryByConfigRule",
    };
    const body = "{}";
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetComplianceSummaryByResourceTypeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.GetComplianceSummaryByResourceType",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetComplianceSummaryByResourceTypeRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetConformancePackComplianceDetailsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.GetConformancePackComplianceDetails",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetConformancePackComplianceDetailsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetConformancePackComplianceSummaryCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.GetConformancePackComplianceSummary",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetConformancePackComplianceSummaryRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetCustomRulePolicyCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.GetCustomRulePolicy",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetCustomRulePolicyRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetDiscoveredResourceCountsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.GetDiscoveredResourceCounts",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetDiscoveredResourceCountsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetOrganizationConfigRuleDetailedStatusCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.GetOrganizationConfigRuleDetailedStatus",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetOrganizationConfigRuleDetailedStatusRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetOrganizationConformancePackDetailedStatusCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.GetOrganizationConformancePackDetailedStatus",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetOrganizationConformancePackDetailedStatusRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetOrganizationCustomRulePolicyCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.GetOrganizationCustomRulePolicy",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetOrganizationCustomRulePolicyRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetResourceConfigHistoryCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.GetResourceConfigHistory",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetResourceConfigHistoryRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetResourceEvaluationSummaryCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.GetResourceEvaluationSummary",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetResourceEvaluationSummaryRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetStoredQueryCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.GetStoredQuery",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetStoredQueryRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListAggregateDiscoveredResourcesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.ListAggregateDiscoveredResources",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListAggregateDiscoveredResourcesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListConformancePackComplianceScoresCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.ListConformancePackComplianceScores",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListConformancePackComplianceScoresRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListDiscoveredResourcesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.ListDiscoveredResources",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListDiscoveredResourcesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListResourceEvaluationsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.ListResourceEvaluations",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListResourceEvaluationsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListStoredQueriesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.ListStoredQueries",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListStoredQueriesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListTagsForResourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.ListTagsForResource",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListTagsForResourceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1PutAggregationAuthorizationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.PutAggregationAuthorization",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1PutAggregationAuthorizationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1PutConfigRuleCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.PutConfigRule",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1PutConfigRuleRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1PutConfigurationAggregatorCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.PutConfigurationAggregator",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1PutConfigurationAggregatorRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1PutConfigurationRecorderCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.PutConfigurationRecorder",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1PutConfigurationRecorderRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1PutConformancePackCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.PutConformancePack",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1PutConformancePackRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1PutDeliveryChannelCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.PutDeliveryChannel",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1PutDeliveryChannelRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1PutEvaluationsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.PutEvaluations",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1PutEvaluationsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1PutExternalEvaluationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.PutExternalEvaluation",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1PutExternalEvaluationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1PutOrganizationConfigRuleCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.PutOrganizationConfigRule",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1PutOrganizationConfigRuleRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1PutOrganizationConformancePackCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.PutOrganizationConformancePack",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1PutOrganizationConformancePackRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1PutRemediationConfigurationsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.PutRemediationConfigurations",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1PutRemediationConfigurationsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1PutRemediationExceptionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.PutRemediationExceptions",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1PutRemediationExceptionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1PutResourceConfigCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.PutResourceConfig",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1PutResourceConfigRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1PutRetentionConfigurationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.PutRetentionConfiguration",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1PutRetentionConfigurationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1PutStoredQueryCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.PutStoredQuery",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1PutStoredQueryRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1SelectAggregateResourceConfigCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.SelectAggregateResourceConfig",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1SelectAggregateResourceConfigRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1SelectResourceConfigCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.SelectResourceConfig",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1SelectResourceConfigRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1StartConfigRulesEvaluationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.StartConfigRulesEvaluation",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StartConfigRulesEvaluationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1StartConfigurationRecorderCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.StartConfigurationRecorder",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StartConfigurationRecorderRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1StartRemediationExecutionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.StartRemediationExecution",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StartRemediationExecutionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1StartResourceEvaluationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.StartResourceEvaluation",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StartResourceEvaluationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1StopConfigurationRecorderCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.StopConfigurationRecorder",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StopConfigurationRecorderRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1TagResourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.TagResource",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1TagResourceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1UntagResourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "StarlingDoveService.UntagResource",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UntagResourceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const deserializeAws_json1_1BatchGetAggregateResourceConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1BatchGetAggregateResourceConfigCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1BatchGetAggregateResourceConfigResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1BatchGetAggregateResourceConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchConfigurationAggregatorException":
        case "com.amazonaws.configservice#NoSuchConfigurationAggregatorException":
            throw await deserializeAws_json1_1NoSuchConfigurationAggregatorExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1BatchGetResourceConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1BatchGetResourceConfigCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1BatchGetResourceConfigResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1BatchGetResourceConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoAvailableConfigurationRecorderException":
        case "com.amazonaws.configservice#NoAvailableConfigurationRecorderException":
            throw await deserializeAws_json1_1NoAvailableConfigurationRecorderExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeleteAggregationAuthorizationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteAggregationAuthorizationCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteAggregationAuthorizationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await deserializeAws_json1_1InvalidParameterValueExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeleteConfigRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteConfigRuleCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteConfigRuleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchConfigRuleException":
        case "com.amazonaws.configservice#NoSuchConfigRuleException":
            throw await deserializeAws_json1_1NoSuchConfigRuleExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.configservice#ResourceInUseException":
            throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeleteConfigurationAggregatorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteConfigurationAggregatorCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteConfigurationAggregatorCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchConfigurationAggregatorException":
        case "com.amazonaws.configservice#NoSuchConfigurationAggregatorException":
            throw await deserializeAws_json1_1NoSuchConfigurationAggregatorExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeleteConfigurationRecorderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteConfigurationRecorderCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteConfigurationRecorderCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchConfigurationRecorderException":
        case "com.amazonaws.configservice#NoSuchConfigurationRecorderException":
            throw await deserializeAws_json1_1NoSuchConfigurationRecorderExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeleteConformancePackCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteConformancePackCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteConformancePackCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchConformancePackException":
        case "com.amazonaws.configservice#NoSuchConformancePackException":
            throw await deserializeAws_json1_1NoSuchConformancePackExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.configservice#ResourceInUseException":
            throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeleteDeliveryChannelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteDeliveryChannelCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteDeliveryChannelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "LastDeliveryChannelDeleteFailedException":
        case "com.amazonaws.configservice#LastDeliveryChannelDeleteFailedException":
            throw await deserializeAws_json1_1LastDeliveryChannelDeleteFailedExceptionResponse(parsedOutput, context);
        case "NoSuchDeliveryChannelException":
        case "com.amazonaws.configservice#NoSuchDeliveryChannelException":
            throw await deserializeAws_json1_1NoSuchDeliveryChannelExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeleteEvaluationResultsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteEvaluationResultsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteEvaluationResultsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteEvaluationResultsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchConfigRuleException":
        case "com.amazonaws.configservice#NoSuchConfigRuleException":
            throw await deserializeAws_json1_1NoSuchConfigRuleExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.configservice#ResourceInUseException":
            throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeleteOrganizationConfigRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteOrganizationConfigRuleCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteOrganizationConfigRuleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchOrganizationConfigRuleException":
        case "com.amazonaws.configservice#NoSuchOrganizationConfigRuleException":
            throw await deserializeAws_json1_1NoSuchOrganizationConfigRuleExceptionResponse(parsedOutput, context);
        case "OrganizationAccessDeniedException":
        case "com.amazonaws.configservice#OrganizationAccessDeniedException":
            throw await deserializeAws_json1_1OrganizationAccessDeniedExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.configservice#ResourceInUseException":
            throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeleteOrganizationConformancePackCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteOrganizationConformancePackCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteOrganizationConformancePackCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchOrganizationConformancePackException":
        case "com.amazonaws.configservice#NoSuchOrganizationConformancePackException":
            throw await deserializeAws_json1_1NoSuchOrganizationConformancePackExceptionResponse(parsedOutput, context);
        case "OrganizationAccessDeniedException":
        case "com.amazonaws.configservice#OrganizationAccessDeniedException":
            throw await deserializeAws_json1_1OrganizationAccessDeniedExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.configservice#ResourceInUseException":
            throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeletePendingAggregationRequestCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeletePendingAggregationRequestCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeletePendingAggregationRequestCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await deserializeAws_json1_1InvalidParameterValueExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeleteRemediationConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteRemediationConfigurationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteRemediationConfigurationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteRemediationConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPermissionsException":
        case "com.amazonaws.configservice#InsufficientPermissionsException":
            throw await deserializeAws_json1_1InsufficientPermissionsExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await deserializeAws_json1_1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "NoSuchRemediationConfigurationException":
        case "com.amazonaws.configservice#NoSuchRemediationConfigurationException":
            throw await deserializeAws_json1_1NoSuchRemediationConfigurationExceptionResponse(parsedOutput, context);
        case "RemediationInProgressException":
        case "com.amazonaws.configservice#RemediationInProgressException":
            throw await deserializeAws_json1_1RemediationInProgressExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeleteRemediationExceptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteRemediationExceptionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteRemediationExceptionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteRemediationExceptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchRemediationExceptionException":
        case "com.amazonaws.configservice#NoSuchRemediationExceptionException":
            throw await deserializeAws_json1_1NoSuchRemediationExceptionExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeleteResourceConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteResourceConfigCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteResourceConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoRunningConfigurationRecorderException":
        case "com.amazonaws.configservice#NoRunningConfigurationRecorderException":
            throw await deserializeAws_json1_1NoRunningConfigurationRecorderExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeleteRetentionConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteRetentionConfigurationCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteRetentionConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await deserializeAws_json1_1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "NoSuchRetentionConfigurationException":
        case "com.amazonaws.configservice#NoSuchRetentionConfigurationException":
            throw await deserializeAws_json1_1NoSuchRetentionConfigurationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeleteStoredQueryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteStoredQueryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteStoredQueryResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteStoredQueryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFoundException":
        case "com.amazonaws.configservice#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeliverConfigSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeliverConfigSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeliverConfigSnapshotResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeliverConfigSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoAvailableConfigurationRecorderException":
        case "com.amazonaws.configservice#NoAvailableConfigurationRecorderException":
            throw await deserializeAws_json1_1NoAvailableConfigurationRecorderExceptionResponse(parsedOutput, context);
        case "NoRunningConfigurationRecorderException":
        case "com.amazonaws.configservice#NoRunningConfigurationRecorderException":
            throw await deserializeAws_json1_1NoRunningConfigurationRecorderExceptionResponse(parsedOutput, context);
        case "NoSuchDeliveryChannelException":
        case "com.amazonaws.configservice#NoSuchDeliveryChannelException":
            throw await deserializeAws_json1_1NoSuchDeliveryChannelExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DescribeAggregateComplianceByConfigRulesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeAggregateComplianceByConfigRulesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeAggregateComplianceByConfigRulesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeAggregateComplianceByConfigRulesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await deserializeAws_json1_1InvalidLimitExceptionResponse(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "NoSuchConfigurationAggregatorException":
        case "com.amazonaws.configservice#NoSuchConfigurationAggregatorException":
            throw await deserializeAws_json1_1NoSuchConfigurationAggregatorExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DescribeAggregateComplianceByConformancePacksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeAggregateComplianceByConformancePacksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeAggregateComplianceByConformancePacksResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeAggregateComplianceByConformancePacksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await deserializeAws_json1_1InvalidLimitExceptionResponse(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "NoSuchConfigurationAggregatorException":
        case "com.amazonaws.configservice#NoSuchConfigurationAggregatorException":
            throw await deserializeAws_json1_1NoSuchConfigurationAggregatorExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DescribeAggregationAuthorizationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeAggregationAuthorizationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeAggregationAuthorizationsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeAggregationAuthorizationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await deserializeAws_json1_1InvalidLimitExceptionResponse(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await deserializeAws_json1_1InvalidParameterValueExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DescribeComplianceByConfigRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeComplianceByConfigRuleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeComplianceByConfigRuleResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeComplianceByConfigRuleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await deserializeAws_json1_1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "NoSuchConfigRuleException":
        case "com.amazonaws.configservice#NoSuchConfigRuleException":
            throw await deserializeAws_json1_1NoSuchConfigRuleExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DescribeComplianceByResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeComplianceByResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeComplianceByResourceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeComplianceByResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await deserializeAws_json1_1InvalidParameterValueExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DescribeConfigRuleEvaluationStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeConfigRuleEvaluationStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeConfigRuleEvaluationStatusResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeConfigRuleEvaluationStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await deserializeAws_json1_1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "NoSuchConfigRuleException":
        case "com.amazonaws.configservice#NoSuchConfigRuleException":
            throw await deserializeAws_json1_1NoSuchConfigRuleExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DescribeConfigRulesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeConfigRulesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeConfigRulesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeConfigRulesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await deserializeAws_json1_1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "NoSuchConfigRuleException":
        case "com.amazonaws.configservice#NoSuchConfigRuleException":
            throw await deserializeAws_json1_1NoSuchConfigRuleExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DescribeConfigurationAggregatorsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeConfigurationAggregatorsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeConfigurationAggregatorsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeConfigurationAggregatorsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await deserializeAws_json1_1InvalidLimitExceptionResponse(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await deserializeAws_json1_1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "NoSuchConfigurationAggregatorException":
        case "com.amazonaws.configservice#NoSuchConfigurationAggregatorException":
            throw await deserializeAws_json1_1NoSuchConfigurationAggregatorExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DescribeConfigurationAggregatorSourcesStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeConfigurationAggregatorSourcesStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeConfigurationAggregatorSourcesStatusResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeConfigurationAggregatorSourcesStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await deserializeAws_json1_1InvalidLimitExceptionResponse(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await deserializeAws_json1_1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "NoSuchConfigurationAggregatorException":
        case "com.amazonaws.configservice#NoSuchConfigurationAggregatorException":
            throw await deserializeAws_json1_1NoSuchConfigurationAggregatorExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DescribeConfigurationRecordersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeConfigurationRecordersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeConfigurationRecordersResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeConfigurationRecordersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchConfigurationRecorderException":
        case "com.amazonaws.configservice#NoSuchConfigurationRecorderException":
            throw await deserializeAws_json1_1NoSuchConfigurationRecorderExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DescribeConfigurationRecorderStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeConfigurationRecorderStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeConfigurationRecorderStatusResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeConfigurationRecorderStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchConfigurationRecorderException":
        case "com.amazonaws.configservice#NoSuchConfigurationRecorderException":
            throw await deserializeAws_json1_1NoSuchConfigurationRecorderExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DescribeConformancePackComplianceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeConformancePackComplianceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeConformancePackComplianceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeConformancePackComplianceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await deserializeAws_json1_1InvalidLimitExceptionResponse(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await deserializeAws_json1_1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "NoSuchConfigRuleInConformancePackException":
        case "com.amazonaws.configservice#NoSuchConfigRuleInConformancePackException":
            throw await deserializeAws_json1_1NoSuchConfigRuleInConformancePackExceptionResponse(parsedOutput, context);
        case "NoSuchConformancePackException":
        case "com.amazonaws.configservice#NoSuchConformancePackException":
            throw await deserializeAws_json1_1NoSuchConformancePackExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DescribeConformancePacksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeConformancePacksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeConformancePacksResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeConformancePacksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await deserializeAws_json1_1InvalidLimitExceptionResponse(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await deserializeAws_json1_1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "NoSuchConformancePackException":
        case "com.amazonaws.configservice#NoSuchConformancePackException":
            throw await deserializeAws_json1_1NoSuchConformancePackExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DescribeConformancePackStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeConformancePackStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeConformancePackStatusResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeConformancePackStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await deserializeAws_json1_1InvalidLimitExceptionResponse(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await deserializeAws_json1_1InvalidParameterValueExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DescribeDeliveryChannelsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeDeliveryChannelsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeDeliveryChannelsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeDeliveryChannelsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchDeliveryChannelException":
        case "com.amazonaws.configservice#NoSuchDeliveryChannelException":
            throw await deserializeAws_json1_1NoSuchDeliveryChannelExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DescribeDeliveryChannelStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeDeliveryChannelStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeDeliveryChannelStatusResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeDeliveryChannelStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchDeliveryChannelException":
        case "com.amazonaws.configservice#NoSuchDeliveryChannelException":
            throw await deserializeAws_json1_1NoSuchDeliveryChannelExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DescribeOrganizationConfigRulesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeOrganizationConfigRulesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeOrganizationConfigRulesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeOrganizationConfigRulesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await deserializeAws_json1_1InvalidLimitExceptionResponse(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "NoSuchOrganizationConfigRuleException":
        case "com.amazonaws.configservice#NoSuchOrganizationConfigRuleException":
            throw await deserializeAws_json1_1NoSuchOrganizationConfigRuleExceptionResponse(parsedOutput, context);
        case "OrganizationAccessDeniedException":
        case "com.amazonaws.configservice#OrganizationAccessDeniedException":
            throw await deserializeAws_json1_1OrganizationAccessDeniedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DescribeOrganizationConfigRuleStatusesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeOrganizationConfigRuleStatusesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeOrganizationConfigRuleStatusesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeOrganizationConfigRuleStatusesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await deserializeAws_json1_1InvalidLimitExceptionResponse(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "NoSuchOrganizationConfigRuleException":
        case "com.amazonaws.configservice#NoSuchOrganizationConfigRuleException":
            throw await deserializeAws_json1_1NoSuchOrganizationConfigRuleExceptionResponse(parsedOutput, context);
        case "OrganizationAccessDeniedException":
        case "com.amazonaws.configservice#OrganizationAccessDeniedException":
            throw await deserializeAws_json1_1OrganizationAccessDeniedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DescribeOrganizationConformancePacksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeOrganizationConformancePacksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeOrganizationConformancePacksResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeOrganizationConformancePacksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await deserializeAws_json1_1InvalidLimitExceptionResponse(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "NoSuchOrganizationConformancePackException":
        case "com.amazonaws.configservice#NoSuchOrganizationConformancePackException":
            throw await deserializeAws_json1_1NoSuchOrganizationConformancePackExceptionResponse(parsedOutput, context);
        case "OrganizationAccessDeniedException":
        case "com.amazonaws.configservice#OrganizationAccessDeniedException":
            throw await deserializeAws_json1_1OrganizationAccessDeniedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DescribeOrganizationConformancePackStatusesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeOrganizationConformancePackStatusesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeOrganizationConformancePackStatusesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeOrganizationConformancePackStatusesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await deserializeAws_json1_1InvalidLimitExceptionResponse(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "NoSuchOrganizationConformancePackException":
        case "com.amazonaws.configservice#NoSuchOrganizationConformancePackException":
            throw await deserializeAws_json1_1NoSuchOrganizationConformancePackExceptionResponse(parsedOutput, context);
        case "OrganizationAccessDeniedException":
        case "com.amazonaws.configservice#OrganizationAccessDeniedException":
            throw await deserializeAws_json1_1OrganizationAccessDeniedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DescribePendingAggregationRequestsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribePendingAggregationRequestsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribePendingAggregationRequestsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribePendingAggregationRequestsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await deserializeAws_json1_1InvalidLimitExceptionResponse(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await deserializeAws_json1_1InvalidParameterValueExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DescribeRemediationConfigurationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeRemediationConfigurationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeRemediationConfigurationsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeRemediationConfigurationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_json1_1DescribeRemediationExceptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeRemediationExceptionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeRemediationExceptionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeRemediationExceptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await deserializeAws_json1_1InvalidParameterValueExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DescribeRemediationExecutionStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeRemediationExecutionStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeRemediationExecutionStatusResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeRemediationExecutionStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await deserializeAws_json1_1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "NoSuchRemediationConfigurationException":
        case "com.amazonaws.configservice#NoSuchRemediationConfigurationException":
            throw await deserializeAws_json1_1NoSuchRemediationConfigurationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DescribeRetentionConfigurationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeRetentionConfigurationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeRetentionConfigurationsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeRetentionConfigurationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await deserializeAws_json1_1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "NoSuchRetentionConfigurationException":
        case "com.amazonaws.configservice#NoSuchRetentionConfigurationException":
            throw await deserializeAws_json1_1NoSuchRetentionConfigurationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetAggregateComplianceDetailsByConfigRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetAggregateComplianceDetailsByConfigRuleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetAggregateComplianceDetailsByConfigRuleResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetAggregateComplianceDetailsByConfigRuleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await deserializeAws_json1_1InvalidLimitExceptionResponse(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "NoSuchConfigurationAggregatorException":
        case "com.amazonaws.configservice#NoSuchConfigurationAggregatorException":
            throw await deserializeAws_json1_1NoSuchConfigurationAggregatorExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetAggregateConfigRuleComplianceSummaryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetAggregateConfigRuleComplianceSummaryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetAggregateConfigRuleComplianceSummaryResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetAggregateConfigRuleComplianceSummaryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await deserializeAws_json1_1InvalidLimitExceptionResponse(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "NoSuchConfigurationAggregatorException":
        case "com.amazonaws.configservice#NoSuchConfigurationAggregatorException":
            throw await deserializeAws_json1_1NoSuchConfigurationAggregatorExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetAggregateConformancePackComplianceSummaryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetAggregateConformancePackComplianceSummaryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetAggregateConformancePackComplianceSummaryResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetAggregateConformancePackComplianceSummaryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await deserializeAws_json1_1InvalidLimitExceptionResponse(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "NoSuchConfigurationAggregatorException":
        case "com.amazonaws.configservice#NoSuchConfigurationAggregatorException":
            throw await deserializeAws_json1_1NoSuchConfigurationAggregatorExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetAggregateDiscoveredResourceCountsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetAggregateDiscoveredResourceCountsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetAggregateDiscoveredResourceCountsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetAggregateDiscoveredResourceCountsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await deserializeAws_json1_1InvalidLimitExceptionResponse(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "NoSuchConfigurationAggregatorException":
        case "com.amazonaws.configservice#NoSuchConfigurationAggregatorException":
            throw await deserializeAws_json1_1NoSuchConfigurationAggregatorExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetAggregateResourceConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetAggregateResourceConfigCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetAggregateResourceConfigResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetAggregateResourceConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchConfigurationAggregatorException":
        case "com.amazonaws.configservice#NoSuchConfigurationAggregatorException":
            throw await deserializeAws_json1_1NoSuchConfigurationAggregatorExceptionResponse(parsedOutput, context);
        case "OversizedConfigurationItemException":
        case "com.amazonaws.configservice#OversizedConfigurationItemException":
            throw await deserializeAws_json1_1OversizedConfigurationItemExceptionResponse(parsedOutput, context);
        case "ResourceNotDiscoveredException":
        case "com.amazonaws.configservice#ResourceNotDiscoveredException":
            throw await deserializeAws_json1_1ResourceNotDiscoveredExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetComplianceDetailsByConfigRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetComplianceDetailsByConfigRuleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetComplianceDetailsByConfigRuleResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetComplianceDetailsByConfigRuleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await deserializeAws_json1_1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "NoSuchConfigRuleException":
        case "com.amazonaws.configservice#NoSuchConfigRuleException":
            throw await deserializeAws_json1_1NoSuchConfigRuleExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetComplianceDetailsByResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetComplianceDetailsByResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetComplianceDetailsByResourceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetComplianceDetailsByResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await deserializeAws_json1_1InvalidParameterValueExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetComplianceSummaryByConfigRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetComplianceSummaryByConfigRuleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetComplianceSummaryByConfigRuleResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetComplianceSummaryByConfigRuleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_json1_1GetComplianceSummaryByResourceTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetComplianceSummaryByResourceTypeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetComplianceSummaryByResourceTypeResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetComplianceSummaryByResourceTypeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await deserializeAws_json1_1InvalidParameterValueExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetConformancePackComplianceDetailsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetConformancePackComplianceDetailsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetConformancePackComplianceDetailsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetConformancePackComplianceDetailsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await deserializeAws_json1_1InvalidLimitExceptionResponse(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await deserializeAws_json1_1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "NoSuchConfigRuleInConformancePackException":
        case "com.amazonaws.configservice#NoSuchConfigRuleInConformancePackException":
            throw await deserializeAws_json1_1NoSuchConfigRuleInConformancePackExceptionResponse(parsedOutput, context);
        case "NoSuchConformancePackException":
        case "com.amazonaws.configservice#NoSuchConformancePackException":
            throw await deserializeAws_json1_1NoSuchConformancePackExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetConformancePackComplianceSummaryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetConformancePackComplianceSummaryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetConformancePackComplianceSummaryResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetConformancePackComplianceSummaryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await deserializeAws_json1_1InvalidLimitExceptionResponse(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "NoSuchConformancePackException":
        case "com.amazonaws.configservice#NoSuchConformancePackException":
            throw await deserializeAws_json1_1NoSuchConformancePackExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetCustomRulePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetCustomRulePolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetCustomRulePolicyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetCustomRulePolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchConfigRuleException":
        case "com.amazonaws.configservice#NoSuchConfigRuleException":
            throw await deserializeAws_json1_1NoSuchConfigRuleExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetDiscoveredResourceCountsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetDiscoveredResourceCountsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetDiscoveredResourceCountsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetDiscoveredResourceCountsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await deserializeAws_json1_1InvalidLimitExceptionResponse(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetOrganizationConfigRuleDetailedStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetOrganizationConfigRuleDetailedStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetOrganizationConfigRuleDetailedStatusResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetOrganizationConfigRuleDetailedStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await deserializeAws_json1_1InvalidLimitExceptionResponse(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "NoSuchOrganizationConfigRuleException":
        case "com.amazonaws.configservice#NoSuchOrganizationConfigRuleException":
            throw await deserializeAws_json1_1NoSuchOrganizationConfigRuleExceptionResponse(parsedOutput, context);
        case "OrganizationAccessDeniedException":
        case "com.amazonaws.configservice#OrganizationAccessDeniedException":
            throw await deserializeAws_json1_1OrganizationAccessDeniedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetOrganizationConformancePackDetailedStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetOrganizationConformancePackDetailedStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetOrganizationConformancePackDetailedStatusResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetOrganizationConformancePackDetailedStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await deserializeAws_json1_1InvalidLimitExceptionResponse(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "NoSuchOrganizationConformancePackException":
        case "com.amazonaws.configservice#NoSuchOrganizationConformancePackException":
            throw await deserializeAws_json1_1NoSuchOrganizationConformancePackExceptionResponse(parsedOutput, context);
        case "OrganizationAccessDeniedException":
        case "com.amazonaws.configservice#OrganizationAccessDeniedException":
            throw await deserializeAws_json1_1OrganizationAccessDeniedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetOrganizationCustomRulePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetOrganizationCustomRulePolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetOrganizationCustomRulePolicyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetOrganizationCustomRulePolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchOrganizationConfigRuleException":
        case "com.amazonaws.configservice#NoSuchOrganizationConfigRuleException":
            throw await deserializeAws_json1_1NoSuchOrganizationConfigRuleExceptionResponse(parsedOutput, context);
        case "OrganizationAccessDeniedException":
        case "com.amazonaws.configservice#OrganizationAccessDeniedException":
            throw await deserializeAws_json1_1OrganizationAccessDeniedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetResourceConfigHistoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetResourceConfigHistoryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetResourceConfigHistoryResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetResourceConfigHistoryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await deserializeAws_json1_1InvalidLimitExceptionResponse(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "InvalidTimeRangeException":
        case "com.amazonaws.configservice#InvalidTimeRangeException":
            throw await deserializeAws_json1_1InvalidTimeRangeExceptionResponse(parsedOutput, context);
        case "NoAvailableConfigurationRecorderException":
        case "com.amazonaws.configservice#NoAvailableConfigurationRecorderException":
            throw await deserializeAws_json1_1NoAvailableConfigurationRecorderExceptionResponse(parsedOutput, context);
        case "ResourceNotDiscoveredException":
        case "com.amazonaws.configservice#ResourceNotDiscoveredException":
            throw await deserializeAws_json1_1ResourceNotDiscoveredExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetResourceEvaluationSummaryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetResourceEvaluationSummaryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetResourceEvaluationSummaryResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetResourceEvaluationSummaryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFoundException":
        case "com.amazonaws.configservice#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetStoredQueryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetStoredQueryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetStoredQueryResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetStoredQueryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFoundException":
        case "com.amazonaws.configservice#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListAggregateDiscoveredResourcesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListAggregateDiscoveredResourcesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListAggregateDiscoveredResourcesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListAggregateDiscoveredResourcesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await deserializeAws_json1_1InvalidLimitExceptionResponse(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "NoSuchConfigurationAggregatorException":
        case "com.amazonaws.configservice#NoSuchConfigurationAggregatorException":
            throw await deserializeAws_json1_1NoSuchConfigurationAggregatorExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListConformancePackComplianceScoresCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListConformancePackComplianceScoresCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListConformancePackComplianceScoresResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListConformancePackComplianceScoresCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await deserializeAws_json1_1InvalidLimitExceptionResponse(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await deserializeAws_json1_1InvalidParameterValueExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListDiscoveredResourcesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListDiscoveredResourcesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListDiscoveredResourcesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListDiscoveredResourcesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await deserializeAws_json1_1InvalidLimitExceptionResponse(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "NoAvailableConfigurationRecorderException":
        case "com.amazonaws.configservice#NoAvailableConfigurationRecorderException":
            throw await deserializeAws_json1_1NoAvailableConfigurationRecorderExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListResourceEvaluationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListResourceEvaluationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListResourceEvaluationsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListResourceEvaluationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await deserializeAws_json1_1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "InvalidTimeRangeException":
        case "com.amazonaws.configservice#InvalidTimeRangeException":
            throw await deserializeAws_json1_1InvalidTimeRangeExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListStoredQueriesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListStoredQueriesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListStoredQueriesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListStoredQueriesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListTagsForResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListTagsForResourceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListTagsForResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await deserializeAws_json1_1InvalidLimitExceptionResponse(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.configservice#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1PutAggregationAuthorizationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1PutAggregationAuthorizationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1PutAggregationAuthorizationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1PutAggregationAuthorizationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await deserializeAws_json1_1InvalidParameterValueExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1PutConfigRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1PutConfigRuleCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1PutConfigRuleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPermissionsException":
        case "com.amazonaws.configservice#InsufficientPermissionsException":
            throw await deserializeAws_json1_1InsufficientPermissionsExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await deserializeAws_json1_1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "MaxNumberOfConfigRulesExceededException":
        case "com.amazonaws.configservice#MaxNumberOfConfigRulesExceededException":
            throw await deserializeAws_json1_1MaxNumberOfConfigRulesExceededExceptionResponse(parsedOutput, context);
        case "NoAvailableConfigurationRecorderException":
        case "com.amazonaws.configservice#NoAvailableConfigurationRecorderException":
            throw await deserializeAws_json1_1NoAvailableConfigurationRecorderExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.configservice#ResourceInUseException":
            throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1PutConfigurationAggregatorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1PutConfigurationAggregatorCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1PutConfigurationAggregatorResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1PutConfigurationAggregatorCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await deserializeAws_json1_1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "InvalidRoleException":
        case "com.amazonaws.configservice#InvalidRoleException":
            throw await deserializeAws_json1_1InvalidRoleExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.configservice#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NoAvailableOrganizationException":
        case "com.amazonaws.configservice#NoAvailableOrganizationException":
            throw await deserializeAws_json1_1NoAvailableOrganizationExceptionResponse(parsedOutput, context);
        case "OrganizationAccessDeniedException":
        case "com.amazonaws.configservice#OrganizationAccessDeniedException":
            throw await deserializeAws_json1_1OrganizationAccessDeniedExceptionResponse(parsedOutput, context);
        case "OrganizationAllFeaturesNotEnabledException":
        case "com.amazonaws.configservice#OrganizationAllFeaturesNotEnabledException":
            throw await deserializeAws_json1_1OrganizationAllFeaturesNotEnabledExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1PutConfigurationRecorderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1PutConfigurationRecorderCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1PutConfigurationRecorderCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidConfigurationRecorderNameException":
        case "com.amazonaws.configservice#InvalidConfigurationRecorderNameException":
            throw await deserializeAws_json1_1InvalidConfigurationRecorderNameExceptionResponse(parsedOutput, context);
        case "InvalidRecordingGroupException":
        case "com.amazonaws.configservice#InvalidRecordingGroupException":
            throw await deserializeAws_json1_1InvalidRecordingGroupExceptionResponse(parsedOutput, context);
        case "InvalidRoleException":
        case "com.amazonaws.configservice#InvalidRoleException":
            throw await deserializeAws_json1_1InvalidRoleExceptionResponse(parsedOutput, context);
        case "MaxNumberOfConfigurationRecordersExceededException":
        case "com.amazonaws.configservice#MaxNumberOfConfigurationRecordersExceededException":
            throw await deserializeAws_json1_1MaxNumberOfConfigurationRecordersExceededExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1PutConformancePackCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1PutConformancePackCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1PutConformancePackResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1PutConformancePackCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConformancePackTemplateValidationException":
        case "com.amazonaws.configservice#ConformancePackTemplateValidationException":
            throw await deserializeAws_json1_1ConformancePackTemplateValidationExceptionResponse(parsedOutput, context);
        case "InsufficientPermissionsException":
        case "com.amazonaws.configservice#InsufficientPermissionsException":
            throw await deserializeAws_json1_1InsufficientPermissionsExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await deserializeAws_json1_1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "MaxNumberOfConformancePacksExceededException":
        case "com.amazonaws.configservice#MaxNumberOfConformancePacksExceededException":
            throw await deserializeAws_json1_1MaxNumberOfConformancePacksExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.configservice#ResourceInUseException":
            throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1PutDeliveryChannelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1PutDeliveryChannelCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1PutDeliveryChannelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientDeliveryPolicyException":
        case "com.amazonaws.configservice#InsufficientDeliveryPolicyException":
            throw await deserializeAws_json1_1InsufficientDeliveryPolicyExceptionResponse(parsedOutput, context);
        case "InvalidDeliveryChannelNameException":
        case "com.amazonaws.configservice#InvalidDeliveryChannelNameException":
            throw await deserializeAws_json1_1InvalidDeliveryChannelNameExceptionResponse(parsedOutput, context);
        case "InvalidS3KeyPrefixException":
        case "com.amazonaws.configservice#InvalidS3KeyPrefixException":
            throw await deserializeAws_json1_1InvalidS3KeyPrefixExceptionResponse(parsedOutput, context);
        case "InvalidS3KmsKeyArnException":
        case "com.amazonaws.configservice#InvalidS3KmsKeyArnException":
            throw await deserializeAws_json1_1InvalidS3KmsKeyArnExceptionResponse(parsedOutput, context);
        case "InvalidSNSTopicARNException":
        case "com.amazonaws.configservice#InvalidSNSTopicARNException":
            throw await deserializeAws_json1_1InvalidSNSTopicARNExceptionResponse(parsedOutput, context);
        case "MaxNumberOfDeliveryChannelsExceededException":
        case "com.amazonaws.configservice#MaxNumberOfDeliveryChannelsExceededException":
            throw await deserializeAws_json1_1MaxNumberOfDeliveryChannelsExceededExceptionResponse(parsedOutput, context);
        case "NoAvailableConfigurationRecorderException":
        case "com.amazonaws.configservice#NoAvailableConfigurationRecorderException":
            throw await deserializeAws_json1_1NoAvailableConfigurationRecorderExceptionResponse(parsedOutput, context);
        case "NoSuchBucketException":
        case "com.amazonaws.configservice#NoSuchBucketException":
            throw await deserializeAws_json1_1NoSuchBucketExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1PutEvaluationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1PutEvaluationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1PutEvaluationsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1PutEvaluationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await deserializeAws_json1_1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "InvalidResultTokenException":
        case "com.amazonaws.configservice#InvalidResultTokenException":
            throw await deserializeAws_json1_1InvalidResultTokenExceptionResponse(parsedOutput, context);
        case "NoSuchConfigRuleException":
        case "com.amazonaws.configservice#NoSuchConfigRuleException":
            throw await deserializeAws_json1_1NoSuchConfigRuleExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1PutExternalEvaluationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1PutExternalEvaluationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1PutExternalEvaluationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1PutExternalEvaluationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await deserializeAws_json1_1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "NoSuchConfigRuleException":
        case "com.amazonaws.configservice#NoSuchConfigRuleException":
            throw await deserializeAws_json1_1NoSuchConfigRuleExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1PutOrganizationConfigRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1PutOrganizationConfigRuleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1PutOrganizationConfigRuleResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1PutOrganizationConfigRuleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPermissionsException":
        case "com.amazonaws.configservice#InsufficientPermissionsException":
            throw await deserializeAws_json1_1InsufficientPermissionsExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await deserializeAws_json1_1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "MaxNumberOfOrganizationConfigRulesExceededException":
        case "com.amazonaws.configservice#MaxNumberOfOrganizationConfigRulesExceededException":
            throw await deserializeAws_json1_1MaxNumberOfOrganizationConfigRulesExceededExceptionResponse(parsedOutput, context);
        case "NoAvailableOrganizationException":
        case "com.amazonaws.configservice#NoAvailableOrganizationException":
            throw await deserializeAws_json1_1NoAvailableOrganizationExceptionResponse(parsedOutput, context);
        case "OrganizationAccessDeniedException":
        case "com.amazonaws.configservice#OrganizationAccessDeniedException":
            throw await deserializeAws_json1_1OrganizationAccessDeniedExceptionResponse(parsedOutput, context);
        case "OrganizationAllFeaturesNotEnabledException":
        case "com.amazonaws.configservice#OrganizationAllFeaturesNotEnabledException":
            throw await deserializeAws_json1_1OrganizationAllFeaturesNotEnabledExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.configservice#ResourceInUseException":
            throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1PutOrganizationConformancePackCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1PutOrganizationConformancePackCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1PutOrganizationConformancePackResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1PutOrganizationConformancePackCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPermissionsException":
        case "com.amazonaws.configservice#InsufficientPermissionsException":
            throw await deserializeAws_json1_1InsufficientPermissionsExceptionResponse(parsedOutput, context);
        case "MaxNumberOfOrganizationConformancePacksExceededException":
        case "com.amazonaws.configservice#MaxNumberOfOrganizationConformancePacksExceededException":
            throw await deserializeAws_json1_1MaxNumberOfOrganizationConformancePacksExceededExceptionResponse(parsedOutput, context);
        case "NoAvailableOrganizationException":
        case "com.amazonaws.configservice#NoAvailableOrganizationException":
            throw await deserializeAws_json1_1NoAvailableOrganizationExceptionResponse(parsedOutput, context);
        case "OrganizationAccessDeniedException":
        case "com.amazonaws.configservice#OrganizationAccessDeniedException":
            throw await deserializeAws_json1_1OrganizationAccessDeniedExceptionResponse(parsedOutput, context);
        case "OrganizationAllFeaturesNotEnabledException":
        case "com.amazonaws.configservice#OrganizationAllFeaturesNotEnabledException":
            throw await deserializeAws_json1_1OrganizationAllFeaturesNotEnabledExceptionResponse(parsedOutput, context);
        case "OrganizationConformancePackTemplateValidationException":
        case "com.amazonaws.configservice#OrganizationConformancePackTemplateValidationException":
            throw await deserializeAws_json1_1OrganizationConformancePackTemplateValidationExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.configservice#ResourceInUseException":
            throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1PutRemediationConfigurationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1PutRemediationConfigurationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1PutRemediationConfigurationsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1PutRemediationConfigurationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPermissionsException":
        case "com.amazonaws.configservice#InsufficientPermissionsException":
            throw await deserializeAws_json1_1InsufficientPermissionsExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await deserializeAws_json1_1InvalidParameterValueExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1PutRemediationExceptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1PutRemediationExceptionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1PutRemediationExceptionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1PutRemediationExceptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPermissionsException":
        case "com.amazonaws.configservice#InsufficientPermissionsException":
            throw await deserializeAws_json1_1InsufficientPermissionsExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await deserializeAws_json1_1InvalidParameterValueExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1PutResourceConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1PutResourceConfigCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1PutResourceConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPermissionsException":
        case "com.amazonaws.configservice#InsufficientPermissionsException":
            throw await deserializeAws_json1_1InsufficientPermissionsExceptionResponse(parsedOutput, context);
        case "MaxActiveResourcesExceededException":
        case "com.amazonaws.configservice#MaxActiveResourcesExceededException":
            throw await deserializeAws_json1_1MaxActiveResourcesExceededExceptionResponse(parsedOutput, context);
        case "NoRunningConfigurationRecorderException":
        case "com.amazonaws.configservice#NoRunningConfigurationRecorderException":
            throw await deserializeAws_json1_1NoRunningConfigurationRecorderExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1PutRetentionConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1PutRetentionConfigurationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1PutRetentionConfigurationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1PutRetentionConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await deserializeAws_json1_1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "MaxNumberOfRetentionConfigurationsExceededException":
        case "com.amazonaws.configservice#MaxNumberOfRetentionConfigurationsExceededException":
            throw await deserializeAws_json1_1MaxNumberOfRetentionConfigurationsExceededExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1PutStoredQueryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1PutStoredQueryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1PutStoredQueryResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1PutStoredQueryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceConcurrentModificationException":
        case "com.amazonaws.configservice#ResourceConcurrentModificationException":
            throw await deserializeAws_json1_1ResourceConcurrentModificationExceptionResponse(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.configservice#TooManyTagsException":
            throw await deserializeAws_json1_1TooManyTagsExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1SelectAggregateResourceConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1SelectAggregateResourceConfigCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1SelectAggregateResourceConfigResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1SelectAggregateResourceConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidExpressionException":
        case "com.amazonaws.configservice#InvalidExpressionException":
            throw await deserializeAws_json1_1InvalidExpressionExceptionResponse(parsedOutput, context);
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await deserializeAws_json1_1InvalidLimitExceptionResponse(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "NoSuchConfigurationAggregatorException":
        case "com.amazonaws.configservice#NoSuchConfigurationAggregatorException":
            throw await deserializeAws_json1_1NoSuchConfigurationAggregatorExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1SelectResourceConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1SelectResourceConfigCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1SelectResourceConfigResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1SelectResourceConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidExpressionException":
        case "com.amazonaws.configservice#InvalidExpressionException":
            throw await deserializeAws_json1_1InvalidExpressionExceptionResponse(parsedOutput, context);
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await deserializeAws_json1_1InvalidLimitExceptionResponse(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1StartConfigRulesEvaluationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StartConfigRulesEvaluationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1StartConfigRulesEvaluationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1StartConfigRulesEvaluationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await deserializeAws_json1_1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.configservice#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchConfigRuleException":
        case "com.amazonaws.configservice#NoSuchConfigRuleException":
            throw await deserializeAws_json1_1NoSuchConfigRuleExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.configservice#ResourceInUseException":
            throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1StartConfigurationRecorderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StartConfigurationRecorderCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1StartConfigurationRecorderCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoAvailableDeliveryChannelException":
        case "com.amazonaws.configservice#NoAvailableDeliveryChannelException":
            throw await deserializeAws_json1_1NoAvailableDeliveryChannelExceptionResponse(parsedOutput, context);
        case "NoSuchConfigurationRecorderException":
        case "com.amazonaws.configservice#NoSuchConfigurationRecorderException":
            throw await deserializeAws_json1_1NoSuchConfigurationRecorderExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1StartRemediationExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StartRemediationExecutionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1StartRemediationExecutionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1StartRemediationExecutionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPermissionsException":
        case "com.amazonaws.configservice#InsufficientPermissionsException":
            throw await deserializeAws_json1_1InsufficientPermissionsExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await deserializeAws_json1_1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "NoSuchRemediationConfigurationException":
        case "com.amazonaws.configservice#NoSuchRemediationConfigurationException":
            throw await deserializeAws_json1_1NoSuchRemediationConfigurationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1StartResourceEvaluationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StartResourceEvaluationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1StartResourceEvaluationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1StartResourceEvaluationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "IdempotentParameterMismatch":
        case "com.amazonaws.configservice#IdempotentParameterMismatch":
            throw await deserializeAws_json1_1IdempotentParameterMismatchResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await deserializeAws_json1_1InvalidParameterValueExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1StopConfigurationRecorderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StopConfigurationRecorderCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1StopConfigurationRecorderCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchConfigurationRecorderException":
        case "com.amazonaws.configservice#NoSuchConfigurationRecorderException":
            throw await deserializeAws_json1_1NoSuchConfigurationRecorderExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1TagResourceCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1TagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFoundException":
        case "com.amazonaws.configservice#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.configservice#TooManyTagsException":
            throw await deserializeAws_json1_1TooManyTagsExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UntagResourceCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1UntagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFoundException":
        case "com.amazonaws.configservice#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1ConformancePackTemplateValidationExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ConformancePackTemplateValidationException(body, context);
    const exception = new ConformancePackTemplateValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1IdempotentParameterMismatchResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1IdempotentParameterMismatch(body, context);
    const exception = new IdempotentParameterMismatch({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1InsufficientDeliveryPolicyExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InsufficientDeliveryPolicyException(body, context);
    const exception = new InsufficientDeliveryPolicyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1InsufficientPermissionsExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InsufficientPermissionsException(body, context);
    const exception = new InsufficientPermissionsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1InvalidConfigurationRecorderNameExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InvalidConfigurationRecorderNameException(body, context);
    const exception = new InvalidConfigurationRecorderNameException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1InvalidDeliveryChannelNameExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InvalidDeliveryChannelNameException(body, context);
    const exception = new InvalidDeliveryChannelNameException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1InvalidExpressionExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InvalidExpressionException(body, context);
    const exception = new InvalidExpressionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1InvalidLimitExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InvalidLimitException(body, context);
    const exception = new InvalidLimitException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1InvalidNextTokenExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InvalidNextTokenException(body, context);
    const exception = new InvalidNextTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1InvalidParameterValueExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InvalidParameterValueException(body, context);
    const exception = new InvalidParameterValueException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1InvalidRecordingGroupExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InvalidRecordingGroupException(body, context);
    const exception = new InvalidRecordingGroupException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1InvalidResultTokenExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InvalidResultTokenException(body, context);
    const exception = new InvalidResultTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1InvalidRoleExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InvalidRoleException(body, context);
    const exception = new InvalidRoleException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1InvalidS3KeyPrefixExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InvalidS3KeyPrefixException(body, context);
    const exception = new InvalidS3KeyPrefixException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1InvalidS3KmsKeyArnExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InvalidS3KmsKeyArnException(body, context);
    const exception = new InvalidS3KmsKeyArnException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1InvalidSNSTopicARNExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InvalidSNSTopicARNException(body, context);
    const exception = new InvalidSNSTopicARNException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1InvalidTimeRangeExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InvalidTimeRangeException(body, context);
    const exception = new InvalidTimeRangeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1LastDeliveryChannelDeleteFailedExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1LastDeliveryChannelDeleteFailedException(body, context);
    const exception = new LastDeliveryChannelDeleteFailedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1LimitExceededExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1LimitExceededException(body, context);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1MaxActiveResourcesExceededExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1MaxActiveResourcesExceededException(body, context);
    const exception = new MaxActiveResourcesExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1MaxNumberOfConfigRulesExceededExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1MaxNumberOfConfigRulesExceededException(body, context);
    const exception = new MaxNumberOfConfigRulesExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1MaxNumberOfConfigurationRecordersExceededExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1MaxNumberOfConfigurationRecordersExceededException(body, context);
    const exception = new MaxNumberOfConfigurationRecordersExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1MaxNumberOfConformancePacksExceededExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1MaxNumberOfConformancePacksExceededException(body, context);
    const exception = new MaxNumberOfConformancePacksExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1MaxNumberOfDeliveryChannelsExceededExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1MaxNumberOfDeliveryChannelsExceededException(body, context);
    const exception = new MaxNumberOfDeliveryChannelsExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1MaxNumberOfOrganizationConfigRulesExceededExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1MaxNumberOfOrganizationConfigRulesExceededException(body, context);
    const exception = new MaxNumberOfOrganizationConfigRulesExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1MaxNumberOfOrganizationConformancePacksExceededExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1MaxNumberOfOrganizationConformancePacksExceededException(body, context);
    const exception = new MaxNumberOfOrganizationConformancePacksExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1MaxNumberOfRetentionConfigurationsExceededExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1MaxNumberOfRetentionConfigurationsExceededException(body, context);
    const exception = new MaxNumberOfRetentionConfigurationsExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1NoAvailableConfigurationRecorderExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1NoAvailableConfigurationRecorderException(body, context);
    const exception = new NoAvailableConfigurationRecorderException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1NoAvailableDeliveryChannelExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1NoAvailableDeliveryChannelException(body, context);
    const exception = new NoAvailableDeliveryChannelException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1NoAvailableOrganizationExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1NoAvailableOrganizationException(body, context);
    const exception = new NoAvailableOrganizationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1NoRunningConfigurationRecorderExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1NoRunningConfigurationRecorderException(body, context);
    const exception = new NoRunningConfigurationRecorderException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1NoSuchBucketExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1NoSuchBucketException(body, context);
    const exception = new NoSuchBucketException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1NoSuchConfigRuleExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1NoSuchConfigRuleException(body, context);
    const exception = new NoSuchConfigRuleException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1NoSuchConfigRuleInConformancePackExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1NoSuchConfigRuleInConformancePackException(body, context);
    const exception = new NoSuchConfigRuleInConformancePackException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1NoSuchConfigurationAggregatorExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1NoSuchConfigurationAggregatorException(body, context);
    const exception = new NoSuchConfigurationAggregatorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1NoSuchConfigurationRecorderExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1NoSuchConfigurationRecorderException(body, context);
    const exception = new NoSuchConfigurationRecorderException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1NoSuchConformancePackExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1NoSuchConformancePackException(body, context);
    const exception = new NoSuchConformancePackException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1NoSuchDeliveryChannelExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1NoSuchDeliveryChannelException(body, context);
    const exception = new NoSuchDeliveryChannelException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1NoSuchOrganizationConfigRuleExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1NoSuchOrganizationConfigRuleException(body, context);
    const exception = new NoSuchOrganizationConfigRuleException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1NoSuchOrganizationConformancePackExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1NoSuchOrganizationConformancePackException(body, context);
    const exception = new NoSuchOrganizationConformancePackException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1NoSuchRemediationConfigurationExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1NoSuchRemediationConfigurationException(body, context);
    const exception = new NoSuchRemediationConfigurationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1NoSuchRemediationExceptionExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1NoSuchRemediationExceptionException(body, context);
    const exception = new NoSuchRemediationExceptionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1NoSuchRetentionConfigurationExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1NoSuchRetentionConfigurationException(body, context);
    const exception = new NoSuchRetentionConfigurationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1OrganizationAccessDeniedExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1OrganizationAccessDeniedException(body, context);
    const exception = new OrganizationAccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1OrganizationAllFeaturesNotEnabledExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1OrganizationAllFeaturesNotEnabledException(body, context);
    const exception = new OrganizationAllFeaturesNotEnabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1OrganizationConformancePackTemplateValidationExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1OrganizationConformancePackTemplateValidationException(body, context);
    const exception = new OrganizationConformancePackTemplateValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1OversizedConfigurationItemExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1OversizedConfigurationItemException(body, context);
    const exception = new OversizedConfigurationItemException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1RemediationInProgressExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1RemediationInProgressException(body, context);
    const exception = new RemediationInProgressException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1ResourceConcurrentModificationExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ResourceConcurrentModificationException(body, context);
    const exception = new ResourceConcurrentModificationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1ResourceInUseExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ResourceInUseException(body, context);
    const exception = new ResourceInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1ResourceNotDiscoveredExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ResourceNotDiscoveredException(body, context);
    const exception = new ResourceNotDiscoveredException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1ResourceNotFoundExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ResourceNotFoundException(body, context);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1TooManyTagsExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1TooManyTagsException(body, context);
    const exception = new TooManyTagsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1ValidationExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ValidationException(body, context);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const serializeAws_json1_1AccountAggregationSource = (input, context) => {
    return {
        ...(input.AccountIds != null && {
            AccountIds: serializeAws_json1_1AccountAggregationSourceAccountList(input.AccountIds, context),
        }),
        ...(input.AllAwsRegions != null && { AllAwsRegions: input.AllAwsRegions }),
        ...(input.AwsRegions != null && {
            AwsRegions: serializeAws_json1_1AggregatorRegionList(input.AwsRegions, context),
        }),
    };
};
const serializeAws_json1_1AccountAggregationSourceAccountList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1AccountAggregationSourceList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1AccountAggregationSource(entry, context);
    });
};
const serializeAws_json1_1AggregateConformancePackComplianceFilters = (input, context) => {
    return {
        ...(input.AccountId != null && { AccountId: input.AccountId }),
        ...(input.AwsRegion != null && { AwsRegion: input.AwsRegion }),
        ...(input.ComplianceType != null && { ComplianceType: input.ComplianceType }),
        ...(input.ConformancePackName != null && { ConformancePackName: input.ConformancePackName }),
    };
};
const serializeAws_json1_1AggregateConformancePackComplianceSummaryFilters = (input, context) => {
    return {
        ...(input.AccountId != null && { AccountId: input.AccountId }),
        ...(input.AwsRegion != null && { AwsRegion: input.AwsRegion }),
    };
};
const serializeAws_json1_1AggregatedSourceStatusTypeList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1AggregateResourceIdentifier = (input, context) => {
    return {
        ...(input.ResourceId != null && { ResourceId: input.ResourceId }),
        ...(input.ResourceName != null && { ResourceName: input.ResourceName }),
        ...(input.ResourceType != null && { ResourceType: input.ResourceType }),
        ...(input.SourceAccountId != null && { SourceAccountId: input.SourceAccountId }),
        ...(input.SourceRegion != null && { SourceRegion: input.SourceRegion }),
    };
};
const serializeAws_json1_1AggregatorRegionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1BatchGetAggregateResourceConfigRequest = (input, context) => {
    return {
        ...(input.ConfigurationAggregatorName != null && {
            ConfigurationAggregatorName: input.ConfigurationAggregatorName,
        }),
        ...(input.ResourceIdentifiers != null && {
            ResourceIdentifiers: serializeAws_json1_1ResourceIdentifiersList(input.ResourceIdentifiers, context),
        }),
    };
};
const serializeAws_json1_1BatchGetResourceConfigRequest = (input, context) => {
    return {
        ...(input.resourceKeys != null && { resourceKeys: serializeAws_json1_1ResourceKeys(input.resourceKeys, context) }),
    };
};
const serializeAws_json1_1ComplianceResourceTypes = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1ComplianceTypes = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1ConfigRule = (input, context) => {
    return {
        ...(input.ConfigRuleArn != null && { ConfigRuleArn: input.ConfigRuleArn }),
        ...(input.ConfigRuleId != null && { ConfigRuleId: input.ConfigRuleId }),
        ...(input.ConfigRuleName != null && { ConfigRuleName: input.ConfigRuleName }),
        ...(input.ConfigRuleState != null && { ConfigRuleState: input.ConfigRuleState }),
        ...(input.CreatedBy != null && { CreatedBy: input.CreatedBy }),
        ...(input.Description != null && { Description: input.Description }),
        ...(input.EvaluationModes != null && {
            EvaluationModes: serializeAws_json1_1EvaluationModes(input.EvaluationModes, context),
        }),
        ...(input.InputParameters != null && { InputParameters: input.InputParameters }),
        ...(input.MaximumExecutionFrequency != null && { MaximumExecutionFrequency: input.MaximumExecutionFrequency }),
        ...(input.Scope != null && { Scope: serializeAws_json1_1Scope(input.Scope, context) }),
        ...(input.Source != null && { Source: serializeAws_json1_1Source(input.Source, context) }),
    };
};
const serializeAws_json1_1ConfigRuleComplianceFilters = (input, context) => {
    return {
        ...(input.AccountId != null && { AccountId: input.AccountId }),
        ...(input.AwsRegion != null && { AwsRegion: input.AwsRegion }),
        ...(input.ComplianceType != null && { ComplianceType: input.ComplianceType }),
        ...(input.ConfigRuleName != null && { ConfigRuleName: input.ConfigRuleName }),
    };
};
const serializeAws_json1_1ConfigRuleComplianceSummaryFilters = (input, context) => {
    return {
        ...(input.AccountId != null && { AccountId: input.AccountId }),
        ...(input.AwsRegion != null && { AwsRegion: input.AwsRegion }),
    };
};
const serializeAws_json1_1ConfigRuleNames = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1ConfigSnapshotDeliveryProperties = (input, context) => {
    return {
        ...(input.deliveryFrequency != null && { deliveryFrequency: input.deliveryFrequency }),
    };
};
const serializeAws_json1_1ConfigurationAggregatorNameList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1ConfigurationRecorder = (input, context) => {
    return {
        ...(input.name != null && { name: input.name }),
        ...(input.recordingGroup != null && {
            recordingGroup: serializeAws_json1_1RecordingGroup(input.recordingGroup, context),
        }),
        ...(input.roleARN != null && { roleARN: input.roleARN }),
    };
};
const serializeAws_json1_1ConfigurationRecorderNameList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1ConformancePackComplianceFilters = (input, context) => {
    return {
        ...(input.ComplianceType != null && { ComplianceType: input.ComplianceType }),
        ...(input.ConfigRuleNames != null && {
            ConfigRuleNames: serializeAws_json1_1ConformancePackConfigRuleNames(input.ConfigRuleNames, context),
        }),
    };
};
const serializeAws_json1_1ConformancePackComplianceResourceIds = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1ConformancePackComplianceScoresFilters = (input, context) => {
    return {
        ...(input.ConformancePackNames != null && {
            ConformancePackNames: serializeAws_json1_1ConformancePackNameFilter(input.ConformancePackNames, context),
        }),
    };
};
const serializeAws_json1_1ConformancePackConfigRuleNames = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1ConformancePackEvaluationFilters = (input, context) => {
    return {
        ...(input.ComplianceType != null && { ComplianceType: input.ComplianceType }),
        ...(input.ConfigRuleNames != null && {
            ConfigRuleNames: serializeAws_json1_1ConformancePackConfigRuleNames(input.ConfigRuleNames, context),
        }),
        ...(input.ResourceIds != null && {
            ResourceIds: serializeAws_json1_1ConformancePackComplianceResourceIds(input.ResourceIds, context),
        }),
        ...(input.ResourceType != null && { ResourceType: input.ResourceType }),
    };
};
const serializeAws_json1_1ConformancePackInputParameter = (input, context) => {
    return {
        ...(input.ParameterName != null && { ParameterName: input.ParameterName }),
        ...(input.ParameterValue != null && { ParameterValue: input.ParameterValue }),
    };
};
const serializeAws_json1_1ConformancePackInputParameters = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1ConformancePackInputParameter(entry, context);
    });
};
const serializeAws_json1_1ConformancePackNameFilter = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1ConformancePackNamesList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1ConformancePackNamesToSummarizeList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1CustomPolicyDetails = (input, context) => {
    return {
        ...(input.EnableDebugLogDelivery != null && { EnableDebugLogDelivery: input.EnableDebugLogDelivery }),
        ...(input.PolicyRuntime != null && { PolicyRuntime: input.PolicyRuntime }),
        ...(input.PolicyText != null && { PolicyText: input.PolicyText }),
    };
};
const serializeAws_json1_1DebugLogDeliveryAccounts = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1DeleteAggregationAuthorizationRequest = (input, context) => {
    return {
        ...(input.AuthorizedAccountId != null && { AuthorizedAccountId: input.AuthorizedAccountId }),
        ...(input.AuthorizedAwsRegion != null && { AuthorizedAwsRegion: input.AuthorizedAwsRegion }),
    };
};
const serializeAws_json1_1DeleteConfigRuleRequest = (input, context) => {
    return {
        ...(input.ConfigRuleName != null && { ConfigRuleName: input.ConfigRuleName }),
    };
};
const serializeAws_json1_1DeleteConfigurationAggregatorRequest = (input, context) => {
    return {
        ...(input.ConfigurationAggregatorName != null && {
            ConfigurationAggregatorName: input.ConfigurationAggregatorName,
        }),
    };
};
const serializeAws_json1_1DeleteConfigurationRecorderRequest = (input, context) => {
    return {
        ...(input.ConfigurationRecorderName != null && { ConfigurationRecorderName: input.ConfigurationRecorderName }),
    };
};
const serializeAws_json1_1DeleteConformancePackRequest = (input, context) => {
    return {
        ...(input.ConformancePackName != null && { ConformancePackName: input.ConformancePackName }),
    };
};
const serializeAws_json1_1DeleteDeliveryChannelRequest = (input, context) => {
    return {
        ...(input.DeliveryChannelName != null && { DeliveryChannelName: input.DeliveryChannelName }),
    };
};
const serializeAws_json1_1DeleteEvaluationResultsRequest = (input, context) => {
    return {
        ...(input.ConfigRuleName != null && { ConfigRuleName: input.ConfigRuleName }),
    };
};
const serializeAws_json1_1DeleteOrganizationConfigRuleRequest = (input, context) => {
    return {
        ...(input.OrganizationConfigRuleName != null && { OrganizationConfigRuleName: input.OrganizationConfigRuleName }),
    };
};
const serializeAws_json1_1DeleteOrganizationConformancePackRequest = (input, context) => {
    return {
        ...(input.OrganizationConformancePackName != null && {
            OrganizationConformancePackName: input.OrganizationConformancePackName,
        }),
    };
};
const serializeAws_json1_1DeletePendingAggregationRequestRequest = (input, context) => {
    return {
        ...(input.RequesterAccountId != null && { RequesterAccountId: input.RequesterAccountId }),
        ...(input.RequesterAwsRegion != null && { RequesterAwsRegion: input.RequesterAwsRegion }),
    };
};
const serializeAws_json1_1DeleteRemediationConfigurationRequest = (input, context) => {
    return {
        ...(input.ConfigRuleName != null && { ConfigRuleName: input.ConfigRuleName }),
        ...(input.ResourceType != null && { ResourceType: input.ResourceType }),
    };
};
const serializeAws_json1_1DeleteRemediationExceptionsRequest = (input, context) => {
    return {
        ...(input.ConfigRuleName != null && { ConfigRuleName: input.ConfigRuleName }),
        ...(input.ResourceKeys != null && {
            ResourceKeys: serializeAws_json1_1RemediationExceptionResourceKeys(input.ResourceKeys, context),
        }),
    };
};
const serializeAws_json1_1DeleteResourceConfigRequest = (input, context) => {
    return {
        ...(input.ResourceId != null && { ResourceId: input.ResourceId }),
        ...(input.ResourceType != null && { ResourceType: input.ResourceType }),
    };
};
const serializeAws_json1_1DeleteRetentionConfigurationRequest = (input, context) => {
    return {
        ...(input.RetentionConfigurationName != null && { RetentionConfigurationName: input.RetentionConfigurationName }),
    };
};
const serializeAws_json1_1DeleteStoredQueryRequest = (input, context) => {
    return {
        ...(input.QueryName != null && { QueryName: input.QueryName }),
    };
};
const serializeAws_json1_1DeliverConfigSnapshotRequest = (input, context) => {
    return {
        ...(input.deliveryChannelName != null && { deliveryChannelName: input.deliveryChannelName }),
    };
};
const serializeAws_json1_1DeliveryChannel = (input, context) => {
    return {
        ...(input.configSnapshotDeliveryProperties != null && {
            configSnapshotDeliveryProperties: serializeAws_json1_1ConfigSnapshotDeliveryProperties(input.configSnapshotDeliveryProperties, context),
        }),
        ...(input.name != null && { name: input.name }),
        ...(input.s3BucketName != null && { s3BucketName: input.s3BucketName }),
        ...(input.s3KeyPrefix != null && { s3KeyPrefix: input.s3KeyPrefix }),
        ...(input.s3KmsKeyArn != null && { s3KmsKeyArn: input.s3KmsKeyArn }),
        ...(input.snsTopicARN != null && { snsTopicARN: input.snsTopicARN }),
    };
};
const serializeAws_json1_1DeliveryChannelNameList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1DescribeAggregateComplianceByConfigRulesRequest = (input, context) => {
    return {
        ...(input.ConfigurationAggregatorName != null && {
            ConfigurationAggregatorName: input.ConfigurationAggregatorName,
        }),
        ...(input.Filters != null && { Filters: serializeAws_json1_1ConfigRuleComplianceFilters(input.Filters, context) }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1DescribeAggregateComplianceByConformancePacksRequest = (input, context) => {
    return {
        ...(input.ConfigurationAggregatorName != null && {
            ConfigurationAggregatorName: input.ConfigurationAggregatorName,
        }),
        ...(input.Filters != null && {
            Filters: serializeAws_json1_1AggregateConformancePackComplianceFilters(input.Filters, context),
        }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1DescribeAggregationAuthorizationsRequest = (input, context) => {
    return {
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1DescribeComplianceByConfigRuleRequest = (input, context) => {
    return {
        ...(input.ComplianceTypes != null && {
            ComplianceTypes: serializeAws_json1_1ComplianceTypes(input.ComplianceTypes, context),
        }),
        ...(input.ConfigRuleNames != null && {
            ConfigRuleNames: serializeAws_json1_1ConfigRuleNames(input.ConfigRuleNames, context),
        }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1DescribeComplianceByResourceRequest = (input, context) => {
    return {
        ...(input.ComplianceTypes != null && {
            ComplianceTypes: serializeAws_json1_1ComplianceTypes(input.ComplianceTypes, context),
        }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.ResourceId != null && { ResourceId: input.ResourceId }),
        ...(input.ResourceType != null && { ResourceType: input.ResourceType }),
    };
};
const serializeAws_json1_1DescribeConfigRuleEvaluationStatusRequest = (input, context) => {
    return {
        ...(input.ConfigRuleNames != null && {
            ConfigRuleNames: serializeAws_json1_1ConfigRuleNames(input.ConfigRuleNames, context),
        }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1DescribeConfigRulesFilters = (input, context) => {
    return {
        ...(input.EvaluationMode != null && { EvaluationMode: input.EvaluationMode }),
    };
};
const serializeAws_json1_1DescribeConfigRulesRequest = (input, context) => {
    return {
        ...(input.ConfigRuleNames != null && {
            ConfigRuleNames: serializeAws_json1_1ConfigRuleNames(input.ConfigRuleNames, context),
        }),
        ...(input.Filters != null && { Filters: serializeAws_json1_1DescribeConfigRulesFilters(input.Filters, context) }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1DescribeConfigurationAggregatorSourcesStatusRequest = (input, context) => {
    return {
        ...(input.ConfigurationAggregatorName != null && {
            ConfigurationAggregatorName: input.ConfigurationAggregatorName,
        }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.UpdateStatus != null && {
            UpdateStatus: serializeAws_json1_1AggregatedSourceStatusTypeList(input.UpdateStatus, context),
        }),
    };
};
const serializeAws_json1_1DescribeConfigurationAggregatorsRequest = (input, context) => {
    return {
        ...(input.ConfigurationAggregatorNames != null && {
            ConfigurationAggregatorNames: serializeAws_json1_1ConfigurationAggregatorNameList(input.ConfigurationAggregatorNames, context),
        }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1DescribeConfigurationRecordersRequest = (input, context) => {
    return {
        ...(input.ConfigurationRecorderNames != null && {
            ConfigurationRecorderNames: serializeAws_json1_1ConfigurationRecorderNameList(input.ConfigurationRecorderNames, context),
        }),
    };
};
const serializeAws_json1_1DescribeConfigurationRecorderStatusRequest = (input, context) => {
    return {
        ...(input.ConfigurationRecorderNames != null && {
            ConfigurationRecorderNames: serializeAws_json1_1ConfigurationRecorderNameList(input.ConfigurationRecorderNames, context),
        }),
    };
};
const serializeAws_json1_1DescribeConformancePackComplianceRequest = (input, context) => {
    return {
        ...(input.ConformancePackName != null && { ConformancePackName: input.ConformancePackName }),
        ...(input.Filters != null && {
            Filters: serializeAws_json1_1ConformancePackComplianceFilters(input.Filters, context),
        }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1DescribeConformancePacksRequest = (input, context) => {
    return {
        ...(input.ConformancePackNames != null && {
            ConformancePackNames: serializeAws_json1_1ConformancePackNamesList(input.ConformancePackNames, context),
        }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1DescribeConformancePackStatusRequest = (input, context) => {
    return {
        ...(input.ConformancePackNames != null && {
            ConformancePackNames: serializeAws_json1_1ConformancePackNamesList(input.ConformancePackNames, context),
        }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1DescribeDeliveryChannelsRequest = (input, context) => {
    return {
        ...(input.DeliveryChannelNames != null && {
            DeliveryChannelNames: serializeAws_json1_1DeliveryChannelNameList(input.DeliveryChannelNames, context),
        }),
    };
};
const serializeAws_json1_1DescribeDeliveryChannelStatusRequest = (input, context) => {
    return {
        ...(input.DeliveryChannelNames != null && {
            DeliveryChannelNames: serializeAws_json1_1DeliveryChannelNameList(input.DeliveryChannelNames, context),
        }),
    };
};
const serializeAws_json1_1DescribeOrganizationConfigRulesRequest = (input, context) => {
    return {
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.OrganizationConfigRuleNames != null && {
            OrganizationConfigRuleNames: serializeAws_json1_1OrganizationConfigRuleNames(input.OrganizationConfigRuleNames, context),
        }),
    };
};
const serializeAws_json1_1DescribeOrganizationConfigRuleStatusesRequest = (input, context) => {
    return {
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.OrganizationConfigRuleNames != null && {
            OrganizationConfigRuleNames: serializeAws_json1_1OrganizationConfigRuleNames(input.OrganizationConfigRuleNames, context),
        }),
    };
};
const serializeAws_json1_1DescribeOrganizationConformancePacksRequest = (input, context) => {
    return {
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.OrganizationConformancePackNames != null && {
            OrganizationConformancePackNames: serializeAws_json1_1OrganizationConformancePackNames(input.OrganizationConformancePackNames, context),
        }),
    };
};
const serializeAws_json1_1DescribeOrganizationConformancePackStatusesRequest = (input, context) => {
    return {
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.OrganizationConformancePackNames != null && {
            OrganizationConformancePackNames: serializeAws_json1_1OrganizationConformancePackNames(input.OrganizationConformancePackNames, context),
        }),
    };
};
const serializeAws_json1_1DescribePendingAggregationRequestsRequest = (input, context) => {
    return {
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1DescribeRemediationConfigurationsRequest = (input, context) => {
    return {
        ...(input.ConfigRuleNames != null && {
            ConfigRuleNames: serializeAws_json1_1ConfigRuleNames(input.ConfigRuleNames, context),
        }),
    };
};
const serializeAws_json1_1DescribeRemediationExceptionsRequest = (input, context) => {
    return {
        ...(input.ConfigRuleName != null && { ConfigRuleName: input.ConfigRuleName }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.ResourceKeys != null && {
            ResourceKeys: serializeAws_json1_1RemediationExceptionResourceKeys(input.ResourceKeys, context),
        }),
    };
};
const serializeAws_json1_1DescribeRemediationExecutionStatusRequest = (input, context) => {
    return {
        ...(input.ConfigRuleName != null && { ConfigRuleName: input.ConfigRuleName }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.ResourceKeys != null && { ResourceKeys: serializeAws_json1_1ResourceKeys(input.ResourceKeys, context) }),
    };
};
const serializeAws_json1_1DescribeRetentionConfigurationsRequest = (input, context) => {
    return {
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.RetentionConfigurationNames != null && {
            RetentionConfigurationNames: serializeAws_json1_1RetentionConfigurationNameList(input.RetentionConfigurationNames, context),
        }),
    };
};
const serializeAws_json1_1Evaluation = (input, context) => {
    return {
        ...(input.Annotation != null && { Annotation: input.Annotation }),
        ...(input.ComplianceResourceId != null && { ComplianceResourceId: input.ComplianceResourceId }),
        ...(input.ComplianceResourceType != null && { ComplianceResourceType: input.ComplianceResourceType }),
        ...(input.ComplianceType != null && { ComplianceType: input.ComplianceType }),
        ...(input.OrderingTimestamp != null && { OrderingTimestamp: Math.round(input.OrderingTimestamp.getTime() / 1000) }),
    };
};
const serializeAws_json1_1EvaluationContext = (input, context) => {
    return {
        ...(input.EvaluationContextIdentifier != null && {
            EvaluationContextIdentifier: input.EvaluationContextIdentifier,
        }),
    };
};
const serializeAws_json1_1EvaluationModeConfiguration = (input, context) => {
    return {
        ...(input.Mode != null && { Mode: input.Mode }),
    };
};
const serializeAws_json1_1EvaluationModes = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1EvaluationModeConfiguration(entry, context);
    });
};
const serializeAws_json1_1Evaluations = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1Evaluation(entry, context);
    });
};
const serializeAws_json1_1ExcludedAccounts = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1ExecutionControls = (input, context) => {
    return {
        ...(input.SsmControls != null && { SsmControls: serializeAws_json1_1SsmControls(input.SsmControls, context) }),
    };
};
const serializeAws_json1_1ExternalEvaluation = (input, context) => {
    return {
        ...(input.Annotation != null && { Annotation: input.Annotation }),
        ...(input.ComplianceResourceId != null && { ComplianceResourceId: input.ComplianceResourceId }),
        ...(input.ComplianceResourceType != null && { ComplianceResourceType: input.ComplianceResourceType }),
        ...(input.ComplianceType != null && { ComplianceType: input.ComplianceType }),
        ...(input.OrderingTimestamp != null && { OrderingTimestamp: Math.round(input.OrderingTimestamp.getTime() / 1000) }),
    };
};
const serializeAws_json1_1GetAggregateComplianceDetailsByConfigRuleRequest = (input, context) => {
    return {
        ...(input.AccountId != null && { AccountId: input.AccountId }),
        ...(input.AwsRegion != null && { AwsRegion: input.AwsRegion }),
        ...(input.ComplianceType != null && { ComplianceType: input.ComplianceType }),
        ...(input.ConfigRuleName != null && { ConfigRuleName: input.ConfigRuleName }),
        ...(input.ConfigurationAggregatorName != null && {
            ConfigurationAggregatorName: input.ConfigurationAggregatorName,
        }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1GetAggregateConfigRuleComplianceSummaryRequest = (input, context) => {
    return {
        ...(input.ConfigurationAggregatorName != null && {
            ConfigurationAggregatorName: input.ConfigurationAggregatorName,
        }),
        ...(input.Filters != null && {
            Filters: serializeAws_json1_1ConfigRuleComplianceSummaryFilters(input.Filters, context),
        }),
        ...(input.GroupByKey != null && { GroupByKey: input.GroupByKey }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1GetAggregateConformancePackComplianceSummaryRequest = (input, context) => {
    return {
        ...(input.ConfigurationAggregatorName != null && {
            ConfigurationAggregatorName: input.ConfigurationAggregatorName,
        }),
        ...(input.Filters != null && {
            Filters: serializeAws_json1_1AggregateConformancePackComplianceSummaryFilters(input.Filters, context),
        }),
        ...(input.GroupByKey != null && { GroupByKey: input.GroupByKey }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1GetAggregateDiscoveredResourceCountsRequest = (input, context) => {
    return {
        ...(input.ConfigurationAggregatorName != null && {
            ConfigurationAggregatorName: input.ConfigurationAggregatorName,
        }),
        ...(input.Filters != null && { Filters: serializeAws_json1_1ResourceCountFilters(input.Filters, context) }),
        ...(input.GroupByKey != null && { GroupByKey: input.GroupByKey }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1GetAggregateResourceConfigRequest = (input, context) => {
    return {
        ...(input.ConfigurationAggregatorName != null && {
            ConfigurationAggregatorName: input.ConfigurationAggregatorName,
        }),
        ...(input.ResourceIdentifier != null && {
            ResourceIdentifier: serializeAws_json1_1AggregateResourceIdentifier(input.ResourceIdentifier, context),
        }),
    };
};
const serializeAws_json1_1GetComplianceDetailsByConfigRuleRequest = (input, context) => {
    return {
        ...(input.ComplianceTypes != null && {
            ComplianceTypes: serializeAws_json1_1ComplianceTypes(input.ComplianceTypes, context),
        }),
        ...(input.ConfigRuleName != null && { ConfigRuleName: input.ConfigRuleName }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1GetComplianceDetailsByResourceRequest = (input, context) => {
    return {
        ...(input.ComplianceTypes != null && {
            ComplianceTypes: serializeAws_json1_1ComplianceTypes(input.ComplianceTypes, context),
        }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.ResourceEvaluationId != null && { ResourceEvaluationId: input.ResourceEvaluationId }),
        ...(input.ResourceId != null && { ResourceId: input.ResourceId }),
        ...(input.ResourceType != null && { ResourceType: input.ResourceType }),
    };
};
const serializeAws_json1_1GetComplianceSummaryByResourceTypeRequest = (input, context) => {
    return {
        ...(input.ResourceTypes != null && {
            ResourceTypes: serializeAws_json1_1ResourceTypes(input.ResourceTypes, context),
        }),
    };
};
const serializeAws_json1_1GetConformancePackComplianceDetailsRequest = (input, context) => {
    return {
        ...(input.ConformancePackName != null && { ConformancePackName: input.ConformancePackName }),
        ...(input.Filters != null && {
            Filters: serializeAws_json1_1ConformancePackEvaluationFilters(input.Filters, context),
        }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1GetConformancePackComplianceSummaryRequest = (input, context) => {
    return {
        ...(input.ConformancePackNames != null && {
            ConformancePackNames: serializeAws_json1_1ConformancePackNamesToSummarizeList(input.ConformancePackNames, context),
        }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1GetCustomRulePolicyRequest = (input, context) => {
    return {
        ...(input.ConfigRuleName != null && { ConfigRuleName: input.ConfigRuleName }),
    };
};
const serializeAws_json1_1GetDiscoveredResourceCountsRequest = (input, context) => {
    return {
        ...(input.limit != null && { limit: input.limit }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
        ...(input.resourceTypes != null && {
            resourceTypes: serializeAws_json1_1ResourceTypes(input.resourceTypes, context),
        }),
    };
};
const serializeAws_json1_1GetOrganizationConfigRuleDetailedStatusRequest = (input, context) => {
    return {
        ...(input.Filters != null && { Filters: serializeAws_json1_1StatusDetailFilters(input.Filters, context) }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.OrganizationConfigRuleName != null && { OrganizationConfigRuleName: input.OrganizationConfigRuleName }),
    };
};
const serializeAws_json1_1GetOrganizationConformancePackDetailedStatusRequest = (input, context) => {
    return {
        ...(input.Filters != null && {
            Filters: serializeAws_json1_1OrganizationResourceDetailedStatusFilters(input.Filters, context),
        }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.OrganizationConformancePackName != null && {
            OrganizationConformancePackName: input.OrganizationConformancePackName,
        }),
    };
};
const serializeAws_json1_1GetOrganizationCustomRulePolicyRequest = (input, context) => {
    return {
        ...(input.OrganizationConfigRuleName != null && { OrganizationConfigRuleName: input.OrganizationConfigRuleName }),
    };
};
const serializeAws_json1_1GetResourceConfigHistoryRequest = (input, context) => {
    return {
        ...(input.chronologicalOrder != null && { chronologicalOrder: input.chronologicalOrder }),
        ...(input.earlierTime != null && { earlierTime: Math.round(input.earlierTime.getTime() / 1000) }),
        ...(input.laterTime != null && { laterTime: Math.round(input.laterTime.getTime() / 1000) }),
        ...(input.limit != null && { limit: input.limit }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
        ...(input.resourceId != null && { resourceId: input.resourceId }),
        ...(input.resourceType != null && { resourceType: input.resourceType }),
    };
};
const serializeAws_json1_1GetResourceEvaluationSummaryRequest = (input, context) => {
    return {
        ...(input.ResourceEvaluationId != null && { ResourceEvaluationId: input.ResourceEvaluationId }),
    };
};
const serializeAws_json1_1GetStoredQueryRequest = (input, context) => {
    return {
        ...(input.QueryName != null && { QueryName: input.QueryName }),
    };
};
const serializeAws_json1_1ListAggregateDiscoveredResourcesRequest = (input, context) => {
    return {
        ...(input.ConfigurationAggregatorName != null && {
            ConfigurationAggregatorName: input.ConfigurationAggregatorName,
        }),
        ...(input.Filters != null && { Filters: serializeAws_json1_1ResourceFilters(input.Filters, context) }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.ResourceType != null && { ResourceType: input.ResourceType }),
    };
};
const serializeAws_json1_1ListConformancePackComplianceScoresRequest = (input, context) => {
    return {
        ...(input.Filters != null && {
            Filters: serializeAws_json1_1ConformancePackComplianceScoresFilters(input.Filters, context),
        }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.SortBy != null && { SortBy: input.SortBy }),
        ...(input.SortOrder != null && { SortOrder: input.SortOrder }),
    };
};
const serializeAws_json1_1ListDiscoveredResourcesRequest = (input, context) => {
    return {
        ...(input.includeDeletedResources != null && { includeDeletedResources: input.includeDeletedResources }),
        ...(input.limit != null && { limit: input.limit }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
        ...(input.resourceIds != null && { resourceIds: serializeAws_json1_1ResourceIdList(input.resourceIds, context) }),
        ...(input.resourceName != null && { resourceName: input.resourceName }),
        ...(input.resourceType != null && { resourceType: input.resourceType }),
    };
};
const serializeAws_json1_1ListResourceEvaluationsRequest = (input, context) => {
    return {
        ...(input.Filters != null && { Filters: serializeAws_json1_1ResourceEvaluationFilters(input.Filters, context) }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1ListStoredQueriesRequest = (input, context) => {
    return {
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1ListTagsForResourceRequest = (input, context) => {
    return {
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.ResourceArn != null && { ResourceArn: input.ResourceArn }),
    };
};
const serializeAws_json1_1OrganizationAggregationSource = (input, context) => {
    return {
        ...(input.AllAwsRegions != null && { AllAwsRegions: input.AllAwsRegions }),
        ...(input.AwsRegions != null && {
            AwsRegions: serializeAws_json1_1AggregatorRegionList(input.AwsRegions, context),
        }),
        ...(input.RoleArn != null && { RoleArn: input.RoleArn }),
    };
};
const serializeAws_json1_1OrganizationConfigRuleNames = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1OrganizationConfigRuleTriggerTypeNoSNs = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1OrganizationConfigRuleTriggerTypes = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1OrganizationConformancePackNames = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1OrganizationCustomPolicyRuleMetadata = (input, context) => {
    return {
        ...(input.DebugLogDeliveryAccounts != null && {
            DebugLogDeliveryAccounts: serializeAws_json1_1DebugLogDeliveryAccounts(input.DebugLogDeliveryAccounts, context),
        }),
        ...(input.Description != null && { Description: input.Description }),
        ...(input.InputParameters != null && { InputParameters: input.InputParameters }),
        ...(input.MaximumExecutionFrequency != null && { MaximumExecutionFrequency: input.MaximumExecutionFrequency }),
        ...(input.OrganizationConfigRuleTriggerTypes != null && {
            OrganizationConfigRuleTriggerTypes: serializeAws_json1_1OrganizationConfigRuleTriggerTypeNoSNs(input.OrganizationConfigRuleTriggerTypes, context),
        }),
        ...(input.PolicyRuntime != null && { PolicyRuntime: input.PolicyRuntime }),
        ...(input.PolicyText != null && { PolicyText: input.PolicyText }),
        ...(input.ResourceIdScope != null && { ResourceIdScope: input.ResourceIdScope }),
        ...(input.ResourceTypesScope != null && {
            ResourceTypesScope: serializeAws_json1_1ResourceTypesScope(input.ResourceTypesScope, context),
        }),
        ...(input.TagKeyScope != null && { TagKeyScope: input.TagKeyScope }),
        ...(input.TagValueScope != null && { TagValueScope: input.TagValueScope }),
    };
};
const serializeAws_json1_1OrganizationCustomRuleMetadata = (input, context) => {
    return {
        ...(input.Description != null && { Description: input.Description }),
        ...(input.InputParameters != null && { InputParameters: input.InputParameters }),
        ...(input.LambdaFunctionArn != null && { LambdaFunctionArn: input.LambdaFunctionArn }),
        ...(input.MaximumExecutionFrequency != null && { MaximumExecutionFrequency: input.MaximumExecutionFrequency }),
        ...(input.OrganizationConfigRuleTriggerTypes != null && {
            OrganizationConfigRuleTriggerTypes: serializeAws_json1_1OrganizationConfigRuleTriggerTypes(input.OrganizationConfigRuleTriggerTypes, context),
        }),
        ...(input.ResourceIdScope != null && { ResourceIdScope: input.ResourceIdScope }),
        ...(input.ResourceTypesScope != null && {
            ResourceTypesScope: serializeAws_json1_1ResourceTypesScope(input.ResourceTypesScope, context),
        }),
        ...(input.TagKeyScope != null && { TagKeyScope: input.TagKeyScope }),
        ...(input.TagValueScope != null && { TagValueScope: input.TagValueScope }),
    };
};
const serializeAws_json1_1OrganizationManagedRuleMetadata = (input, context) => {
    return {
        ...(input.Description != null && { Description: input.Description }),
        ...(input.InputParameters != null && { InputParameters: input.InputParameters }),
        ...(input.MaximumExecutionFrequency != null && { MaximumExecutionFrequency: input.MaximumExecutionFrequency }),
        ...(input.ResourceIdScope != null && { ResourceIdScope: input.ResourceIdScope }),
        ...(input.ResourceTypesScope != null && {
            ResourceTypesScope: serializeAws_json1_1ResourceTypesScope(input.ResourceTypesScope, context),
        }),
        ...(input.RuleIdentifier != null && { RuleIdentifier: input.RuleIdentifier }),
        ...(input.TagKeyScope != null && { TagKeyScope: input.TagKeyScope }),
        ...(input.TagValueScope != null && { TagValueScope: input.TagValueScope }),
    };
};
const serializeAws_json1_1OrganizationResourceDetailedStatusFilters = (input, context) => {
    return {
        ...(input.AccountId != null && { AccountId: input.AccountId }),
        ...(input.Status != null && { Status: input.Status }),
    };
};
const serializeAws_json1_1PutAggregationAuthorizationRequest = (input, context) => {
    return {
        ...(input.AuthorizedAccountId != null && { AuthorizedAccountId: input.AuthorizedAccountId }),
        ...(input.AuthorizedAwsRegion != null && { AuthorizedAwsRegion: input.AuthorizedAwsRegion }),
        ...(input.Tags != null && { Tags: serializeAws_json1_1TagsList(input.Tags, context) }),
    };
};
const serializeAws_json1_1PutConfigRuleRequest = (input, context) => {
    return {
        ...(input.ConfigRule != null && { ConfigRule: serializeAws_json1_1ConfigRule(input.ConfigRule, context) }),
        ...(input.Tags != null && { Tags: serializeAws_json1_1TagsList(input.Tags, context) }),
    };
};
const serializeAws_json1_1PutConfigurationAggregatorRequest = (input, context) => {
    return {
        ...(input.AccountAggregationSources != null && {
            AccountAggregationSources: serializeAws_json1_1AccountAggregationSourceList(input.AccountAggregationSources, context),
        }),
        ...(input.ConfigurationAggregatorName != null && {
            ConfigurationAggregatorName: input.ConfigurationAggregatorName,
        }),
        ...(input.OrganizationAggregationSource != null && {
            OrganizationAggregationSource: serializeAws_json1_1OrganizationAggregationSource(input.OrganizationAggregationSource, context),
        }),
        ...(input.Tags != null && { Tags: serializeAws_json1_1TagsList(input.Tags, context) }),
    };
};
const serializeAws_json1_1PutConfigurationRecorderRequest = (input, context) => {
    return {
        ...(input.ConfigurationRecorder != null && {
            ConfigurationRecorder: serializeAws_json1_1ConfigurationRecorder(input.ConfigurationRecorder, context),
        }),
    };
};
const serializeAws_json1_1PutConformancePackRequest = (input, context) => {
    return {
        ...(input.ConformancePackInputParameters != null && {
            ConformancePackInputParameters: serializeAws_json1_1ConformancePackInputParameters(input.ConformancePackInputParameters, context),
        }),
        ...(input.ConformancePackName != null && { ConformancePackName: input.ConformancePackName }),
        ...(input.DeliveryS3Bucket != null && { DeliveryS3Bucket: input.DeliveryS3Bucket }),
        ...(input.DeliveryS3KeyPrefix != null && { DeliveryS3KeyPrefix: input.DeliveryS3KeyPrefix }),
        ...(input.TemplateBody != null && { TemplateBody: input.TemplateBody }),
        ...(input.TemplateS3Uri != null && { TemplateS3Uri: input.TemplateS3Uri }),
        ...(input.TemplateSSMDocumentDetails != null && {
            TemplateSSMDocumentDetails: serializeAws_json1_1TemplateSSMDocumentDetails(input.TemplateSSMDocumentDetails, context),
        }),
    };
};
const serializeAws_json1_1PutDeliveryChannelRequest = (input, context) => {
    return {
        ...(input.DeliveryChannel != null && {
            DeliveryChannel: serializeAws_json1_1DeliveryChannel(input.DeliveryChannel, context),
        }),
    };
};
const serializeAws_json1_1PutEvaluationsRequest = (input, context) => {
    return {
        ...(input.Evaluations != null && { Evaluations: serializeAws_json1_1Evaluations(input.Evaluations, context) }),
        ...(input.ResultToken != null && { ResultToken: input.ResultToken }),
        ...(input.TestMode != null && { TestMode: input.TestMode }),
    };
};
const serializeAws_json1_1PutExternalEvaluationRequest = (input, context) => {
    return {
        ...(input.ConfigRuleName != null && { ConfigRuleName: input.ConfigRuleName }),
        ...(input.ExternalEvaluation != null && {
            ExternalEvaluation: serializeAws_json1_1ExternalEvaluation(input.ExternalEvaluation, context),
        }),
    };
};
const serializeAws_json1_1PutOrganizationConfigRuleRequest = (input, context) => {
    return {
        ...(input.ExcludedAccounts != null && {
            ExcludedAccounts: serializeAws_json1_1ExcludedAccounts(input.ExcludedAccounts, context),
        }),
        ...(input.OrganizationConfigRuleName != null && { OrganizationConfigRuleName: input.OrganizationConfigRuleName }),
        ...(input.OrganizationCustomPolicyRuleMetadata != null && {
            OrganizationCustomPolicyRuleMetadata: serializeAws_json1_1OrganizationCustomPolicyRuleMetadata(input.OrganizationCustomPolicyRuleMetadata, context),
        }),
        ...(input.OrganizationCustomRuleMetadata != null && {
            OrganizationCustomRuleMetadata: serializeAws_json1_1OrganizationCustomRuleMetadata(input.OrganizationCustomRuleMetadata, context),
        }),
        ...(input.OrganizationManagedRuleMetadata != null && {
            OrganizationManagedRuleMetadata: serializeAws_json1_1OrganizationManagedRuleMetadata(input.OrganizationManagedRuleMetadata, context),
        }),
    };
};
const serializeAws_json1_1PutOrganizationConformancePackRequest = (input, context) => {
    return {
        ...(input.ConformancePackInputParameters != null && {
            ConformancePackInputParameters: serializeAws_json1_1ConformancePackInputParameters(input.ConformancePackInputParameters, context),
        }),
        ...(input.DeliveryS3Bucket != null && { DeliveryS3Bucket: input.DeliveryS3Bucket }),
        ...(input.DeliveryS3KeyPrefix != null && { DeliveryS3KeyPrefix: input.DeliveryS3KeyPrefix }),
        ...(input.ExcludedAccounts != null && {
            ExcludedAccounts: serializeAws_json1_1ExcludedAccounts(input.ExcludedAccounts, context),
        }),
        ...(input.OrganizationConformancePackName != null && {
            OrganizationConformancePackName: input.OrganizationConformancePackName,
        }),
        ...(input.TemplateBody != null && { TemplateBody: input.TemplateBody }),
        ...(input.TemplateS3Uri != null && { TemplateS3Uri: input.TemplateS3Uri }),
    };
};
const serializeAws_json1_1PutRemediationConfigurationsRequest = (input, context) => {
    return {
        ...(input.RemediationConfigurations != null && {
            RemediationConfigurations: serializeAws_json1_1RemediationConfigurations(input.RemediationConfigurations, context),
        }),
    };
};
const serializeAws_json1_1PutRemediationExceptionsRequest = (input, context) => {
    return {
        ...(input.ConfigRuleName != null && { ConfigRuleName: input.ConfigRuleName }),
        ...(input.ExpirationTime != null && { ExpirationTime: Math.round(input.ExpirationTime.getTime() / 1000) }),
        ...(input.Message != null && { Message: input.Message }),
        ...(input.ResourceKeys != null && {
            ResourceKeys: serializeAws_json1_1RemediationExceptionResourceKeys(input.ResourceKeys, context),
        }),
    };
};
const serializeAws_json1_1PutResourceConfigRequest = (input, context) => {
    return {
        ...(input.Configuration != null && { Configuration: input.Configuration }),
        ...(input.ResourceId != null && { ResourceId: input.ResourceId }),
        ...(input.ResourceName != null && { ResourceName: input.ResourceName }),
        ...(input.ResourceType != null && { ResourceType: input.ResourceType }),
        ...(input.SchemaVersionId != null && { SchemaVersionId: input.SchemaVersionId }),
        ...(input.Tags != null && { Tags: serializeAws_json1_1Tags(input.Tags, context) }),
    };
};
const serializeAws_json1_1PutRetentionConfigurationRequest = (input, context) => {
    return {
        ...(input.RetentionPeriodInDays != null && { RetentionPeriodInDays: input.RetentionPeriodInDays }),
    };
};
const serializeAws_json1_1PutStoredQueryRequest = (input, context) => {
    return {
        ...(input.StoredQuery != null && { StoredQuery: serializeAws_json1_1StoredQuery(input.StoredQuery, context) }),
        ...(input.Tags != null && { Tags: serializeAws_json1_1TagsList(input.Tags, context) }),
    };
};
const serializeAws_json1_1RecordingGroup = (input, context) => {
    return {
        ...(input.allSupported != null && { allSupported: input.allSupported }),
        ...(input.includeGlobalResourceTypes != null && { includeGlobalResourceTypes: input.includeGlobalResourceTypes }),
        ...(input.resourceTypes != null && {
            resourceTypes: serializeAws_json1_1ResourceTypeList(input.resourceTypes, context),
        }),
    };
};
const serializeAws_json1_1ReevaluateConfigRuleNames = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1RemediationConfiguration = (input, context) => {
    return {
        ...(input.Arn != null && { Arn: input.Arn }),
        ...(input.Automatic != null && { Automatic: input.Automatic }),
        ...(input.ConfigRuleName != null && { ConfigRuleName: input.ConfigRuleName }),
        ...(input.CreatedByService != null && { CreatedByService: input.CreatedByService }),
        ...(input.ExecutionControls != null && {
            ExecutionControls: serializeAws_json1_1ExecutionControls(input.ExecutionControls, context),
        }),
        ...(input.MaximumAutomaticAttempts != null && { MaximumAutomaticAttempts: input.MaximumAutomaticAttempts }),
        ...(input.Parameters != null && {
            Parameters: serializeAws_json1_1RemediationParameters(input.Parameters, context),
        }),
        ...(input.ResourceType != null && { ResourceType: input.ResourceType }),
        ...(input.RetryAttemptSeconds != null && { RetryAttemptSeconds: input.RetryAttemptSeconds }),
        ...(input.TargetId != null && { TargetId: input.TargetId }),
        ...(input.TargetType != null && { TargetType: input.TargetType }),
        ...(input.TargetVersion != null && { TargetVersion: input.TargetVersion }),
    };
};
const serializeAws_json1_1RemediationConfigurations = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1RemediationConfiguration(entry, context);
    });
};
const serializeAws_json1_1RemediationExceptionResourceKey = (input, context) => {
    return {
        ...(input.ResourceId != null && { ResourceId: input.ResourceId }),
        ...(input.ResourceType != null && { ResourceType: input.ResourceType }),
    };
};
const serializeAws_json1_1RemediationExceptionResourceKeys = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1RemediationExceptionResourceKey(entry, context);
    });
};
const serializeAws_json1_1RemediationParameters = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = serializeAws_json1_1RemediationParameterValue(value, context);
        return acc;
    }, {});
};
const serializeAws_json1_1RemediationParameterValue = (input, context) => {
    return {
        ...(input.ResourceValue != null && {
            ResourceValue: serializeAws_json1_1ResourceValue(input.ResourceValue, context),
        }),
        ...(input.StaticValue != null && { StaticValue: serializeAws_json1_1StaticValue(input.StaticValue, context) }),
    };
};
const serializeAws_json1_1ResourceCountFilters = (input, context) => {
    return {
        ...(input.AccountId != null && { AccountId: input.AccountId }),
        ...(input.Region != null && { Region: input.Region }),
        ...(input.ResourceType != null && { ResourceType: input.ResourceType }),
    };
};
const serializeAws_json1_1ResourceDetails = (input, context) => {
    return {
        ...(input.ResourceConfiguration != null && { ResourceConfiguration: input.ResourceConfiguration }),
        ...(input.ResourceConfigurationSchemaType != null && {
            ResourceConfigurationSchemaType: input.ResourceConfigurationSchemaType,
        }),
        ...(input.ResourceId != null && { ResourceId: input.ResourceId }),
        ...(input.ResourceType != null && { ResourceType: input.ResourceType }),
    };
};
const serializeAws_json1_1ResourceEvaluationFilters = (input, context) => {
    return {
        ...(input.EvaluationContextIdentifier != null && {
            EvaluationContextIdentifier: input.EvaluationContextIdentifier,
        }),
        ...(input.EvaluationMode != null && { EvaluationMode: input.EvaluationMode }),
        ...(input.TimeWindow != null && { TimeWindow: serializeAws_json1_1TimeWindow(input.TimeWindow, context) }),
    };
};
const serializeAws_json1_1ResourceFilters = (input, context) => {
    return {
        ...(input.AccountId != null && { AccountId: input.AccountId }),
        ...(input.Region != null && { Region: input.Region }),
        ...(input.ResourceId != null && { ResourceId: input.ResourceId }),
        ...(input.ResourceName != null && { ResourceName: input.ResourceName }),
    };
};
const serializeAws_json1_1ResourceIdentifiersList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1AggregateResourceIdentifier(entry, context);
    });
};
const serializeAws_json1_1ResourceIdList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1ResourceKey = (input, context) => {
    return {
        ...(input.resourceId != null && { resourceId: input.resourceId }),
        ...(input.resourceType != null && { resourceType: input.resourceType }),
    };
};
const serializeAws_json1_1ResourceKeys = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1ResourceKey(entry, context);
    });
};
const serializeAws_json1_1ResourceTypeList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1ResourceTypes = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1ResourceTypesScope = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1ResourceValue = (input, context) => {
    return {
        ...(input.Value != null && { Value: input.Value }),
    };
};
const serializeAws_json1_1RetentionConfigurationNameList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1Scope = (input, context) => {
    return {
        ...(input.ComplianceResourceId != null && { ComplianceResourceId: input.ComplianceResourceId }),
        ...(input.ComplianceResourceTypes != null && {
            ComplianceResourceTypes: serializeAws_json1_1ComplianceResourceTypes(input.ComplianceResourceTypes, context),
        }),
        ...(input.TagKey != null && { TagKey: input.TagKey }),
        ...(input.TagValue != null && { TagValue: input.TagValue }),
    };
};
const serializeAws_json1_1SelectAggregateResourceConfigRequest = (input, context) => {
    return {
        ...(input.ConfigurationAggregatorName != null && {
            ConfigurationAggregatorName: input.ConfigurationAggregatorName,
        }),
        ...(input.Expression != null && { Expression: input.Expression }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1SelectResourceConfigRequest = (input, context) => {
    return {
        ...(input.Expression != null && { Expression: input.Expression }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1Source = (input, context) => {
    return {
        ...(input.CustomPolicyDetails != null && {
            CustomPolicyDetails: serializeAws_json1_1CustomPolicyDetails(input.CustomPolicyDetails, context),
        }),
        ...(input.Owner != null && { Owner: input.Owner }),
        ...(input.SourceDetails != null && {
            SourceDetails: serializeAws_json1_1SourceDetails(input.SourceDetails, context),
        }),
        ...(input.SourceIdentifier != null && { SourceIdentifier: input.SourceIdentifier }),
    };
};
const serializeAws_json1_1SourceDetail = (input, context) => {
    return {
        ...(input.EventSource != null && { EventSource: input.EventSource }),
        ...(input.MaximumExecutionFrequency != null && { MaximumExecutionFrequency: input.MaximumExecutionFrequency }),
        ...(input.MessageType != null && { MessageType: input.MessageType }),
    };
};
const serializeAws_json1_1SourceDetails = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1SourceDetail(entry, context);
    });
};
const serializeAws_json1_1SsmControls = (input, context) => {
    return {
        ...(input.ConcurrentExecutionRatePercentage != null && {
            ConcurrentExecutionRatePercentage: input.ConcurrentExecutionRatePercentage,
        }),
        ...(input.ErrorPercentage != null && { ErrorPercentage: input.ErrorPercentage }),
    };
};
const serializeAws_json1_1StartConfigRulesEvaluationRequest = (input, context) => {
    return {
        ...(input.ConfigRuleNames != null && {
            ConfigRuleNames: serializeAws_json1_1ReevaluateConfigRuleNames(input.ConfigRuleNames, context),
        }),
    };
};
const serializeAws_json1_1StartConfigurationRecorderRequest = (input, context) => {
    return {
        ...(input.ConfigurationRecorderName != null && { ConfigurationRecorderName: input.ConfigurationRecorderName }),
    };
};
const serializeAws_json1_1StartRemediationExecutionRequest = (input, context) => {
    return {
        ...(input.ConfigRuleName != null && { ConfigRuleName: input.ConfigRuleName }),
        ...(input.ResourceKeys != null && { ResourceKeys: serializeAws_json1_1ResourceKeys(input.ResourceKeys, context) }),
    };
};
const serializeAws_json1_1StartResourceEvaluationRequest = (input, context) => {
    return {
        ...(input.ClientToken != null && { ClientToken: input.ClientToken }),
        ...(input.EvaluationContext != null && {
            EvaluationContext: serializeAws_json1_1EvaluationContext(input.EvaluationContext, context),
        }),
        ...(input.EvaluationMode != null && { EvaluationMode: input.EvaluationMode }),
        ...(input.EvaluationTimeout != null && { EvaluationTimeout: input.EvaluationTimeout }),
        ...(input.ResourceDetails != null && {
            ResourceDetails: serializeAws_json1_1ResourceDetails(input.ResourceDetails, context),
        }),
    };
};
const serializeAws_json1_1StaticParameterValues = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1StaticValue = (input, context) => {
    return {
        ...(input.Values != null && { Values: serializeAws_json1_1StaticParameterValues(input.Values, context) }),
    };
};
const serializeAws_json1_1StatusDetailFilters = (input, context) => {
    return {
        ...(input.AccountId != null && { AccountId: input.AccountId }),
        ...(input.MemberAccountRuleStatus != null && { MemberAccountRuleStatus: input.MemberAccountRuleStatus }),
    };
};
const serializeAws_json1_1StopConfigurationRecorderRequest = (input, context) => {
    return {
        ...(input.ConfigurationRecorderName != null && { ConfigurationRecorderName: input.ConfigurationRecorderName }),
    };
};
const serializeAws_json1_1StoredQuery = (input, context) => {
    return {
        ...(input.Description != null && { Description: input.Description }),
        ...(input.Expression != null && { Expression: input.Expression }),
        ...(input.QueryArn != null && { QueryArn: input.QueryArn }),
        ...(input.QueryId != null && { QueryId: input.QueryId }),
        ...(input.QueryName != null && { QueryName: input.QueryName }),
    };
};
const serializeAws_json1_1Tag = (input, context) => {
    return {
        ...(input.Key != null && { Key: input.Key }),
        ...(input.Value != null && { Value: input.Value }),
    };
};
const serializeAws_json1_1TagKeyList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1TagList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1Tag(entry, context);
    });
};
const serializeAws_json1_1TagResourceRequest = (input, context) => {
    return {
        ...(input.ResourceArn != null && { ResourceArn: input.ResourceArn }),
        ...(input.Tags != null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    };
};
const serializeAws_json1_1Tags = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = value;
        return acc;
    }, {});
};
const serializeAws_json1_1TagsList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1Tag(entry, context);
    });
};
const serializeAws_json1_1TemplateSSMDocumentDetails = (input, context) => {
    return {
        ...(input.DocumentName != null && { DocumentName: input.DocumentName }),
        ...(input.DocumentVersion != null && { DocumentVersion: input.DocumentVersion }),
    };
};
const serializeAws_json1_1TimeWindow = (input, context) => {
    return {
        ...(input.EndTime != null && { EndTime: Math.round(input.EndTime.getTime() / 1000) }),
        ...(input.StartTime != null && { StartTime: Math.round(input.StartTime.getTime() / 1000) }),
    };
};
const serializeAws_json1_1UntagResourceRequest = (input, context) => {
    return {
        ...(input.ResourceArn != null && { ResourceArn: input.ResourceArn }),
        ...(input.TagKeys != null && { TagKeys: serializeAws_json1_1TagKeyList(input.TagKeys, context) }),
    };
};
const deserializeAws_json1_1AccountAggregationSource = (output, context) => {
    return {
        AccountIds: output.AccountIds != null
            ? deserializeAws_json1_1AccountAggregationSourceAccountList(output.AccountIds, context)
            : undefined,
        AllAwsRegions: __expectBoolean(output.AllAwsRegions),
        AwsRegions: output.AwsRegions != null ? deserializeAws_json1_1AggregatorRegionList(output.AwsRegions, context) : undefined,
    };
};
const deserializeAws_json1_1AccountAggregationSourceAccountList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1AccountAggregationSourceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1AccountAggregationSource(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1AggregateComplianceByConfigRule = (output, context) => {
    return {
        AccountId: __expectString(output.AccountId),
        AwsRegion: __expectString(output.AwsRegion),
        Compliance: output.Compliance != null ? deserializeAws_json1_1Compliance(output.Compliance, context) : undefined,
        ConfigRuleName: __expectString(output.ConfigRuleName),
    };
};
const deserializeAws_json1_1AggregateComplianceByConfigRuleList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1AggregateComplianceByConfigRule(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1AggregateComplianceByConformancePack = (output, context) => {
    return {
        AccountId: __expectString(output.AccountId),
        AwsRegion: __expectString(output.AwsRegion),
        Compliance: output.Compliance != null
            ? deserializeAws_json1_1AggregateConformancePackCompliance(output.Compliance, context)
            : undefined,
        ConformancePackName: __expectString(output.ConformancePackName),
    };
};
const deserializeAws_json1_1AggregateComplianceByConformancePackList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1AggregateComplianceByConformancePack(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1AggregateComplianceCount = (output, context) => {
    return {
        ComplianceSummary: output.ComplianceSummary != null
            ? deserializeAws_json1_1ComplianceSummary(output.ComplianceSummary, context)
            : undefined,
        GroupName: __expectString(output.GroupName),
    };
};
const deserializeAws_json1_1AggregateComplianceCountList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1AggregateComplianceCount(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1AggregateConformancePackCompliance = (output, context) => {
    return {
        ComplianceType: __expectString(output.ComplianceType),
        CompliantRuleCount: __expectInt32(output.CompliantRuleCount),
        NonCompliantRuleCount: __expectInt32(output.NonCompliantRuleCount),
        TotalRuleCount: __expectInt32(output.TotalRuleCount),
    };
};
const deserializeAws_json1_1AggregateConformancePackComplianceCount = (output, context) => {
    return {
        CompliantConformancePackCount: __expectInt32(output.CompliantConformancePackCount),
        NonCompliantConformancePackCount: __expectInt32(output.NonCompliantConformancePackCount),
    };
};
const deserializeAws_json1_1AggregateConformancePackComplianceSummary = (output, context) => {
    return {
        ComplianceSummary: output.ComplianceSummary != null
            ? deserializeAws_json1_1AggregateConformancePackComplianceCount(output.ComplianceSummary, context)
            : undefined,
        GroupName: __expectString(output.GroupName),
    };
};
const deserializeAws_json1_1AggregateConformancePackComplianceSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1AggregateConformancePackComplianceSummary(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1AggregatedSourceStatus = (output, context) => {
    return {
        AwsRegion: __expectString(output.AwsRegion),
        LastErrorCode: __expectString(output.LastErrorCode),
        LastErrorMessage: __expectString(output.LastErrorMessage),
        LastUpdateStatus: __expectString(output.LastUpdateStatus),
        LastUpdateTime: output.LastUpdateTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastUpdateTime)))
            : undefined,
        SourceId: __expectString(output.SourceId),
        SourceType: __expectString(output.SourceType),
    };
};
const deserializeAws_json1_1AggregatedSourceStatusList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1AggregatedSourceStatus(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1AggregateEvaluationResult = (output, context) => {
    return {
        AccountId: __expectString(output.AccountId),
        Annotation: __expectString(output.Annotation),
        AwsRegion: __expectString(output.AwsRegion),
        ComplianceType: __expectString(output.ComplianceType),
        ConfigRuleInvokedTime: output.ConfigRuleInvokedTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.ConfigRuleInvokedTime)))
            : undefined,
        EvaluationResultIdentifier: output.EvaluationResultIdentifier != null
            ? deserializeAws_json1_1EvaluationResultIdentifier(output.EvaluationResultIdentifier, context)
            : undefined,
        ResultRecordedTime: output.ResultRecordedTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.ResultRecordedTime)))
            : undefined,
    };
};
const deserializeAws_json1_1AggregateEvaluationResultList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1AggregateEvaluationResult(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1AggregateResourceIdentifier = (output, context) => {
    return {
        ResourceId: __expectString(output.ResourceId),
        ResourceName: __expectString(output.ResourceName),
        ResourceType: __expectString(output.ResourceType),
        SourceAccountId: __expectString(output.SourceAccountId),
        SourceRegion: __expectString(output.SourceRegion),
    };
};
const deserializeAws_json1_1AggregationAuthorization = (output, context) => {
    return {
        AggregationAuthorizationArn: __expectString(output.AggregationAuthorizationArn),
        AuthorizedAccountId: __expectString(output.AuthorizedAccountId),
        AuthorizedAwsRegion: __expectString(output.AuthorizedAwsRegion),
        CreationTime: output.CreationTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreationTime)))
            : undefined,
    };
};
const deserializeAws_json1_1AggregationAuthorizationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1AggregationAuthorization(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1AggregatorRegionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1BaseConfigurationItem = (output, context) => {
    return {
        accountId: __expectString(output.accountId),
        arn: __expectString(output.arn),
        availabilityZone: __expectString(output.availabilityZone),
        awsRegion: __expectString(output.awsRegion),
        configuration: __expectString(output.configuration),
        configurationItemCaptureTime: output.configurationItemCaptureTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.configurationItemCaptureTime)))
            : undefined,
        configurationItemStatus: __expectString(output.configurationItemStatus),
        configurationStateId: __expectString(output.configurationStateId),
        resourceCreationTime: output.resourceCreationTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.resourceCreationTime)))
            : undefined,
        resourceId: __expectString(output.resourceId),
        resourceName: __expectString(output.resourceName),
        resourceType: __expectString(output.resourceType),
        supplementaryConfiguration: output.supplementaryConfiguration != null
            ? deserializeAws_json1_1SupplementaryConfiguration(output.supplementaryConfiguration, context)
            : undefined,
        version: __expectString(output.version),
    };
};
const deserializeAws_json1_1BaseConfigurationItems = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1BaseConfigurationItem(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1BatchGetAggregateResourceConfigResponse = (output, context) => {
    return {
        BaseConfigurationItems: output.BaseConfigurationItems != null
            ? deserializeAws_json1_1BaseConfigurationItems(output.BaseConfigurationItems, context)
            : undefined,
        UnprocessedResourceIdentifiers: output.UnprocessedResourceIdentifiers != null
            ? deserializeAws_json1_1UnprocessedResourceIdentifierList(output.UnprocessedResourceIdentifiers, context)
            : undefined,
    };
};
const deserializeAws_json1_1BatchGetResourceConfigResponse = (output, context) => {
    return {
        baseConfigurationItems: output.baseConfigurationItems != null
            ? deserializeAws_json1_1BaseConfigurationItems(output.baseConfigurationItems, context)
            : undefined,
        unprocessedResourceKeys: output.unprocessedResourceKeys != null
            ? deserializeAws_json1_1ResourceKeys(output.unprocessedResourceKeys, context)
            : undefined,
    };
};
const deserializeAws_json1_1Compliance = (output, context) => {
    return {
        ComplianceContributorCount: output.ComplianceContributorCount != null
            ? deserializeAws_json1_1ComplianceContributorCount(output.ComplianceContributorCount, context)
            : undefined,
        ComplianceType: __expectString(output.ComplianceType),
    };
};
const deserializeAws_json1_1ComplianceByConfigRule = (output, context) => {
    return {
        Compliance: output.Compliance != null ? deserializeAws_json1_1Compliance(output.Compliance, context) : undefined,
        ConfigRuleName: __expectString(output.ConfigRuleName),
    };
};
const deserializeAws_json1_1ComplianceByConfigRules = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ComplianceByConfigRule(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ComplianceByResource = (output, context) => {
    return {
        Compliance: output.Compliance != null ? deserializeAws_json1_1Compliance(output.Compliance, context) : undefined,
        ResourceId: __expectString(output.ResourceId),
        ResourceType: __expectString(output.ResourceType),
    };
};
const deserializeAws_json1_1ComplianceByResources = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ComplianceByResource(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ComplianceContributorCount = (output, context) => {
    return {
        CapExceeded: __expectBoolean(output.CapExceeded),
        CappedCount: __expectInt32(output.CappedCount),
    };
};
const deserializeAws_json1_1ComplianceResourceTypes = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1ComplianceSummariesByResourceType = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ComplianceSummaryByResourceType(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ComplianceSummary = (output, context) => {
    return {
        ComplianceSummaryTimestamp: output.ComplianceSummaryTimestamp != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.ComplianceSummaryTimestamp)))
            : undefined,
        CompliantResourceCount: output.CompliantResourceCount != null
            ? deserializeAws_json1_1ComplianceContributorCount(output.CompliantResourceCount, context)
            : undefined,
        NonCompliantResourceCount: output.NonCompliantResourceCount != null
            ? deserializeAws_json1_1ComplianceContributorCount(output.NonCompliantResourceCount, context)
            : undefined,
    };
};
const deserializeAws_json1_1ComplianceSummaryByResourceType = (output, context) => {
    return {
        ComplianceSummary: output.ComplianceSummary != null
            ? deserializeAws_json1_1ComplianceSummary(output.ComplianceSummary, context)
            : undefined,
        ResourceType: __expectString(output.ResourceType),
    };
};
const deserializeAws_json1_1ConfigExportDeliveryInfo = (output, context) => {
    return {
        lastAttemptTime: output.lastAttemptTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.lastAttemptTime)))
            : undefined,
        lastErrorCode: __expectString(output.lastErrorCode),
        lastErrorMessage: __expectString(output.lastErrorMessage),
        lastStatus: __expectString(output.lastStatus),
        lastSuccessfulTime: output.lastSuccessfulTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.lastSuccessfulTime)))
            : undefined,
        nextDeliveryTime: output.nextDeliveryTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.nextDeliveryTime)))
            : undefined,
    };
};
const deserializeAws_json1_1ConfigRule = (output, context) => {
    return {
        ConfigRuleArn: __expectString(output.ConfigRuleArn),
        ConfigRuleId: __expectString(output.ConfigRuleId),
        ConfigRuleName: __expectString(output.ConfigRuleName),
        ConfigRuleState: __expectString(output.ConfigRuleState),
        CreatedBy: __expectString(output.CreatedBy),
        Description: __expectString(output.Description),
        EvaluationModes: output.EvaluationModes != null
            ? deserializeAws_json1_1EvaluationModes(output.EvaluationModes, context)
            : undefined,
        InputParameters: __expectString(output.InputParameters),
        MaximumExecutionFrequency: __expectString(output.MaximumExecutionFrequency),
        Scope: output.Scope != null ? deserializeAws_json1_1Scope(output.Scope, context) : undefined,
        Source: output.Source != null ? deserializeAws_json1_1Source(output.Source, context) : undefined,
    };
};
const deserializeAws_json1_1ConfigRuleEvaluationStatus = (output, context) => {
    return {
        ConfigRuleArn: __expectString(output.ConfigRuleArn),
        ConfigRuleId: __expectString(output.ConfigRuleId),
        ConfigRuleName: __expectString(output.ConfigRuleName),
        FirstActivatedTime: output.FirstActivatedTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.FirstActivatedTime)))
            : undefined,
        FirstEvaluationStarted: __expectBoolean(output.FirstEvaluationStarted),
        LastDeactivatedTime: output.LastDeactivatedTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastDeactivatedTime)))
            : undefined,
        LastDebugLogDeliveryStatus: __expectString(output.LastDebugLogDeliveryStatus),
        LastDebugLogDeliveryStatusReason: __expectString(output.LastDebugLogDeliveryStatusReason),
        LastDebugLogDeliveryTime: output.LastDebugLogDeliveryTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastDebugLogDeliveryTime)))
            : undefined,
        LastErrorCode: __expectString(output.LastErrorCode),
        LastErrorMessage: __expectString(output.LastErrorMessage),
        LastFailedEvaluationTime: output.LastFailedEvaluationTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastFailedEvaluationTime)))
            : undefined,
        LastFailedInvocationTime: output.LastFailedInvocationTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastFailedInvocationTime)))
            : undefined,
        LastSuccessfulEvaluationTime: output.LastSuccessfulEvaluationTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastSuccessfulEvaluationTime)))
            : undefined,
        LastSuccessfulInvocationTime: output.LastSuccessfulInvocationTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastSuccessfulInvocationTime)))
            : undefined,
    };
};
const deserializeAws_json1_1ConfigRuleEvaluationStatusList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ConfigRuleEvaluationStatus(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ConfigRules = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ConfigRule(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ConfigSnapshotDeliveryProperties = (output, context) => {
    return {
        deliveryFrequency: __expectString(output.deliveryFrequency),
    };
};
const deserializeAws_json1_1ConfigStreamDeliveryInfo = (output, context) => {
    return {
        lastErrorCode: __expectString(output.lastErrorCode),
        lastErrorMessage: __expectString(output.lastErrorMessage),
        lastStatus: __expectString(output.lastStatus),
        lastStatusChangeTime: output.lastStatusChangeTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.lastStatusChangeTime)))
            : undefined,
    };
};
const deserializeAws_json1_1ConfigurationAggregator = (output, context) => {
    return {
        AccountAggregationSources: output.AccountAggregationSources != null
            ? deserializeAws_json1_1AccountAggregationSourceList(output.AccountAggregationSources, context)
            : undefined,
        ConfigurationAggregatorArn: __expectString(output.ConfigurationAggregatorArn),
        ConfigurationAggregatorName: __expectString(output.ConfigurationAggregatorName),
        CreatedBy: __expectString(output.CreatedBy),
        CreationTime: output.CreationTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreationTime)))
            : undefined,
        LastUpdatedTime: output.LastUpdatedTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastUpdatedTime)))
            : undefined,
        OrganizationAggregationSource: output.OrganizationAggregationSource != null
            ? deserializeAws_json1_1OrganizationAggregationSource(output.OrganizationAggregationSource, context)
            : undefined,
    };
};
const deserializeAws_json1_1ConfigurationAggregatorList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ConfigurationAggregator(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ConfigurationItem = (output, context) => {
    return {
        accountId: __expectString(output.accountId),
        arn: __expectString(output.arn),
        availabilityZone: __expectString(output.availabilityZone),
        awsRegion: __expectString(output.awsRegion),
        configuration: __expectString(output.configuration),
        configurationItemCaptureTime: output.configurationItemCaptureTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.configurationItemCaptureTime)))
            : undefined,
        configurationItemMD5Hash: __expectString(output.configurationItemMD5Hash),
        configurationItemStatus: __expectString(output.configurationItemStatus),
        configurationStateId: __expectString(output.configurationStateId),
        relatedEvents: output.relatedEvents != null ? deserializeAws_json1_1RelatedEventList(output.relatedEvents, context) : undefined,
        relationships: output.relationships != null ? deserializeAws_json1_1RelationshipList(output.relationships, context) : undefined,
        resourceCreationTime: output.resourceCreationTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.resourceCreationTime)))
            : undefined,
        resourceId: __expectString(output.resourceId),
        resourceName: __expectString(output.resourceName),
        resourceType: __expectString(output.resourceType),
        supplementaryConfiguration: output.supplementaryConfiguration != null
            ? deserializeAws_json1_1SupplementaryConfiguration(output.supplementaryConfiguration, context)
            : undefined,
        tags: output.tags != null ? deserializeAws_json1_1Tags(output.tags, context) : undefined,
        version: __expectString(output.version),
    };
};
const deserializeAws_json1_1ConfigurationItemList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ConfigurationItem(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ConfigurationRecorder = (output, context) => {
    return {
        name: __expectString(output.name),
        recordingGroup: output.recordingGroup != null ? deserializeAws_json1_1RecordingGroup(output.recordingGroup, context) : undefined,
        roleARN: __expectString(output.roleARN),
    };
};
const deserializeAws_json1_1ConfigurationRecorderList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ConfigurationRecorder(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ConfigurationRecorderStatus = (output, context) => {
    return {
        lastErrorCode: __expectString(output.lastErrorCode),
        lastErrorMessage: __expectString(output.lastErrorMessage),
        lastStartTime: output.lastStartTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.lastStartTime)))
            : undefined,
        lastStatus: __expectString(output.lastStatus),
        lastStatusChangeTime: output.lastStatusChangeTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.lastStatusChangeTime)))
            : undefined,
        lastStopTime: output.lastStopTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.lastStopTime)))
            : undefined,
        name: __expectString(output.name),
        recording: __expectBoolean(output.recording),
    };
};
const deserializeAws_json1_1ConfigurationRecorderStatusList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ConfigurationRecorderStatus(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ConformancePackComplianceScore = (output, context) => {
    return {
        ConformancePackName: __expectString(output.ConformancePackName),
        LastUpdatedTime: output.LastUpdatedTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastUpdatedTime)))
            : undefined,
        Score: __expectString(output.Score),
    };
};
const deserializeAws_json1_1ConformancePackComplianceScores = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ConformancePackComplianceScore(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ConformancePackComplianceSummary = (output, context) => {
    return {
        ConformancePackComplianceStatus: __expectString(output.ConformancePackComplianceStatus),
        ConformancePackName: __expectString(output.ConformancePackName),
    };
};
const deserializeAws_json1_1ConformancePackComplianceSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ConformancePackComplianceSummary(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ConformancePackDetail = (output, context) => {
    return {
        ConformancePackArn: __expectString(output.ConformancePackArn),
        ConformancePackId: __expectString(output.ConformancePackId),
        ConformancePackInputParameters: output.ConformancePackInputParameters != null
            ? deserializeAws_json1_1ConformancePackInputParameters(output.ConformancePackInputParameters, context)
            : undefined,
        ConformancePackName: __expectString(output.ConformancePackName),
        CreatedBy: __expectString(output.CreatedBy),
        DeliveryS3Bucket: __expectString(output.DeliveryS3Bucket),
        DeliveryS3KeyPrefix: __expectString(output.DeliveryS3KeyPrefix),
        LastUpdateRequestedTime: output.LastUpdateRequestedTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastUpdateRequestedTime)))
            : undefined,
        TemplateSSMDocumentDetails: output.TemplateSSMDocumentDetails != null
            ? deserializeAws_json1_1TemplateSSMDocumentDetails(output.TemplateSSMDocumentDetails, context)
            : undefined,
    };
};
const deserializeAws_json1_1ConformancePackDetailList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ConformancePackDetail(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ConformancePackEvaluationResult = (output, context) => {
    return {
        Annotation: __expectString(output.Annotation),
        ComplianceType: __expectString(output.ComplianceType),
        ConfigRuleInvokedTime: output.ConfigRuleInvokedTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.ConfigRuleInvokedTime)))
            : undefined,
        EvaluationResultIdentifier: output.EvaluationResultIdentifier != null
            ? deserializeAws_json1_1EvaluationResultIdentifier(output.EvaluationResultIdentifier, context)
            : undefined,
        ResultRecordedTime: output.ResultRecordedTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.ResultRecordedTime)))
            : undefined,
    };
};
const deserializeAws_json1_1ConformancePackInputParameter = (output, context) => {
    return {
        ParameterName: __expectString(output.ParameterName),
        ParameterValue: __expectString(output.ParameterValue),
    };
};
const deserializeAws_json1_1ConformancePackInputParameters = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ConformancePackInputParameter(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ConformancePackRuleCompliance = (output, context) => {
    return {
        ComplianceType: __expectString(output.ComplianceType),
        ConfigRuleName: __expectString(output.ConfigRuleName),
        Controls: output.Controls != null ? deserializeAws_json1_1ControlsList(output.Controls, context) : undefined,
    };
};
const deserializeAws_json1_1ConformancePackRuleComplianceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ConformancePackRuleCompliance(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ConformancePackRuleEvaluationResultsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ConformancePackEvaluationResult(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ConformancePackStatusDetail = (output, context) => {
    return {
        ConformancePackArn: __expectString(output.ConformancePackArn),
        ConformancePackId: __expectString(output.ConformancePackId),
        ConformancePackName: __expectString(output.ConformancePackName),
        ConformancePackState: __expectString(output.ConformancePackState),
        ConformancePackStatusReason: __expectString(output.ConformancePackStatusReason),
        LastUpdateCompletedTime: output.LastUpdateCompletedTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastUpdateCompletedTime)))
            : undefined,
        LastUpdateRequestedTime: output.LastUpdateRequestedTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastUpdateRequestedTime)))
            : undefined,
        StackArn: __expectString(output.StackArn),
    };
};
const deserializeAws_json1_1ConformancePackStatusDetailsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ConformancePackStatusDetail(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ConformancePackTemplateValidationException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1ControlsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1CustomPolicyDetails = (output, context) => {
    return {
        EnableDebugLogDelivery: __expectBoolean(output.EnableDebugLogDelivery),
        PolicyRuntime: __expectString(output.PolicyRuntime),
        PolicyText: __expectString(output.PolicyText),
    };
};
const deserializeAws_json1_1DebugLogDeliveryAccounts = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1DeleteEvaluationResultsResponse = (output, context) => {
    return {};
};
const deserializeAws_json1_1DeleteRemediationConfigurationResponse = (output, context) => {
    return {};
};
const deserializeAws_json1_1DeleteRemediationExceptionsResponse = (output, context) => {
    return {
        FailedBatches: output.FailedBatches != null
            ? deserializeAws_json1_1FailedDeleteRemediationExceptionsBatches(output.FailedBatches, context)
            : undefined,
    };
};
const deserializeAws_json1_1DeleteStoredQueryResponse = (output, context) => {
    return {};
};
const deserializeAws_json1_1DeliverConfigSnapshotResponse = (output, context) => {
    return {
        configSnapshotId: __expectString(output.configSnapshotId),
    };
};
const deserializeAws_json1_1DeliveryChannel = (output, context) => {
    return {
        configSnapshotDeliveryProperties: output.configSnapshotDeliveryProperties != null
            ? deserializeAws_json1_1ConfigSnapshotDeliveryProperties(output.configSnapshotDeliveryProperties, context)
            : undefined,
        name: __expectString(output.name),
        s3BucketName: __expectString(output.s3BucketName),
        s3KeyPrefix: __expectString(output.s3KeyPrefix),
        s3KmsKeyArn: __expectString(output.s3KmsKeyArn),
        snsTopicARN: __expectString(output.snsTopicARN),
    };
};
const deserializeAws_json1_1DeliveryChannelList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1DeliveryChannel(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1DeliveryChannelStatus = (output, context) => {
    return {
        configHistoryDeliveryInfo: output.configHistoryDeliveryInfo != null
            ? deserializeAws_json1_1ConfigExportDeliveryInfo(output.configHistoryDeliveryInfo, context)
            : undefined,
        configSnapshotDeliveryInfo: output.configSnapshotDeliveryInfo != null
            ? deserializeAws_json1_1ConfigExportDeliveryInfo(output.configSnapshotDeliveryInfo, context)
            : undefined,
        configStreamDeliveryInfo: output.configStreamDeliveryInfo != null
            ? deserializeAws_json1_1ConfigStreamDeliveryInfo(output.configStreamDeliveryInfo, context)
            : undefined,
        name: __expectString(output.name),
    };
};
const deserializeAws_json1_1DeliveryChannelStatusList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1DeliveryChannelStatus(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1DescribeAggregateComplianceByConfigRulesResponse = (output, context) => {
    return {
        AggregateComplianceByConfigRules: output.AggregateComplianceByConfigRules != null
            ? deserializeAws_json1_1AggregateComplianceByConfigRuleList(output.AggregateComplianceByConfigRules, context)
            : undefined,
        NextToken: __expectString(output.NextToken),
    };
};
const deserializeAws_json1_1DescribeAggregateComplianceByConformancePacksResponse = (output, context) => {
    return {
        AggregateComplianceByConformancePacks: output.AggregateComplianceByConformancePacks != null
            ? deserializeAws_json1_1AggregateComplianceByConformancePackList(output.AggregateComplianceByConformancePacks, context)
            : undefined,
        NextToken: __expectString(output.NextToken),
    };
};
const deserializeAws_json1_1DescribeAggregationAuthorizationsResponse = (output, context) => {
    return {
        AggregationAuthorizations: output.AggregationAuthorizations != null
            ? deserializeAws_json1_1AggregationAuthorizationList(output.AggregationAuthorizations, context)
            : undefined,
        NextToken: __expectString(output.NextToken),
    };
};
const deserializeAws_json1_1DescribeComplianceByConfigRuleResponse = (output, context) => {
    return {
        ComplianceByConfigRules: output.ComplianceByConfigRules != null
            ? deserializeAws_json1_1ComplianceByConfigRules(output.ComplianceByConfigRules, context)
            : undefined,
        NextToken: __expectString(output.NextToken),
    };
};
const deserializeAws_json1_1DescribeComplianceByResourceResponse = (output, context) => {
    return {
        ComplianceByResources: output.ComplianceByResources != null
            ? deserializeAws_json1_1ComplianceByResources(output.ComplianceByResources, context)
            : undefined,
        NextToken: __expectString(output.NextToken),
    };
};
const deserializeAws_json1_1DescribeConfigRuleEvaluationStatusResponse = (output, context) => {
    return {
        ConfigRulesEvaluationStatus: output.ConfigRulesEvaluationStatus != null
            ? deserializeAws_json1_1ConfigRuleEvaluationStatusList(output.ConfigRulesEvaluationStatus, context)
            : undefined,
        NextToken: __expectString(output.NextToken),
    };
};
const deserializeAws_json1_1DescribeConfigRulesResponse = (output, context) => {
    return {
        ConfigRules: output.ConfigRules != null ? deserializeAws_json1_1ConfigRules(output.ConfigRules, context) : undefined,
        NextToken: __expectString(output.NextToken),
    };
};
const deserializeAws_json1_1DescribeConfigurationAggregatorSourcesStatusResponse = (output, context) => {
    return {
        AggregatedSourceStatusList: output.AggregatedSourceStatusList != null
            ? deserializeAws_json1_1AggregatedSourceStatusList(output.AggregatedSourceStatusList, context)
            : undefined,
        NextToken: __expectString(output.NextToken),
    };
};
const deserializeAws_json1_1DescribeConfigurationAggregatorsResponse = (output, context) => {
    return {
        ConfigurationAggregators: output.ConfigurationAggregators != null
            ? deserializeAws_json1_1ConfigurationAggregatorList(output.ConfigurationAggregators, context)
            : undefined,
        NextToken: __expectString(output.NextToken),
    };
};
const deserializeAws_json1_1DescribeConfigurationRecordersResponse = (output, context) => {
    return {
        ConfigurationRecorders: output.ConfigurationRecorders != null
            ? deserializeAws_json1_1ConfigurationRecorderList(output.ConfigurationRecorders, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeConfigurationRecorderStatusResponse = (output, context) => {
    return {
        ConfigurationRecordersStatus: output.ConfigurationRecordersStatus != null
            ? deserializeAws_json1_1ConfigurationRecorderStatusList(output.ConfigurationRecordersStatus, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeConformancePackComplianceResponse = (output, context) => {
    return {
        ConformancePackName: __expectString(output.ConformancePackName),
        ConformancePackRuleComplianceList: output.ConformancePackRuleComplianceList != null
            ? deserializeAws_json1_1ConformancePackRuleComplianceList(output.ConformancePackRuleComplianceList, context)
            : undefined,
        NextToken: __expectString(output.NextToken),
    };
};
const deserializeAws_json1_1DescribeConformancePacksResponse = (output, context) => {
    return {
        ConformancePackDetails: output.ConformancePackDetails != null
            ? deserializeAws_json1_1ConformancePackDetailList(output.ConformancePackDetails, context)
            : undefined,
        NextToken: __expectString(output.NextToken),
    };
};
const deserializeAws_json1_1DescribeConformancePackStatusResponse = (output, context) => {
    return {
        ConformancePackStatusDetails: output.ConformancePackStatusDetails != null
            ? deserializeAws_json1_1ConformancePackStatusDetailsList(output.ConformancePackStatusDetails, context)
            : undefined,
        NextToken: __expectString(output.NextToken),
    };
};
const deserializeAws_json1_1DescribeDeliveryChannelsResponse = (output, context) => {
    return {
        DeliveryChannels: output.DeliveryChannels != null
            ? deserializeAws_json1_1DeliveryChannelList(output.DeliveryChannels, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeDeliveryChannelStatusResponse = (output, context) => {
    return {
        DeliveryChannelsStatus: output.DeliveryChannelsStatus != null
            ? deserializeAws_json1_1DeliveryChannelStatusList(output.DeliveryChannelsStatus, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeOrganizationConfigRulesResponse = (output, context) => {
    return {
        NextToken: __expectString(output.NextToken),
        OrganizationConfigRules: output.OrganizationConfigRules != null
            ? deserializeAws_json1_1OrganizationConfigRules(output.OrganizationConfigRules, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeOrganizationConfigRuleStatusesResponse = (output, context) => {
    return {
        NextToken: __expectString(output.NextToken),
        OrganizationConfigRuleStatuses: output.OrganizationConfigRuleStatuses != null
            ? deserializeAws_json1_1OrganizationConfigRuleStatuses(output.OrganizationConfigRuleStatuses, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeOrganizationConformancePacksResponse = (output, context) => {
    return {
        NextToken: __expectString(output.NextToken),
        OrganizationConformancePacks: output.OrganizationConformancePacks != null
            ? deserializeAws_json1_1OrganizationConformancePacks(output.OrganizationConformancePacks, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeOrganizationConformancePackStatusesResponse = (output, context) => {
    return {
        NextToken: __expectString(output.NextToken),
        OrganizationConformancePackStatuses: output.OrganizationConformancePackStatuses != null
            ? deserializeAws_json1_1OrganizationConformancePackStatuses(output.OrganizationConformancePackStatuses, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribePendingAggregationRequestsResponse = (output, context) => {
    return {
        NextToken: __expectString(output.NextToken),
        PendingAggregationRequests: output.PendingAggregationRequests != null
            ? deserializeAws_json1_1PendingAggregationRequestList(output.PendingAggregationRequests, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeRemediationConfigurationsResponse = (output, context) => {
    return {
        RemediationConfigurations: output.RemediationConfigurations != null
            ? deserializeAws_json1_1RemediationConfigurations(output.RemediationConfigurations, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeRemediationExceptionsResponse = (output, context) => {
    return {
        NextToken: __expectString(output.NextToken),
        RemediationExceptions: output.RemediationExceptions != null
            ? deserializeAws_json1_1RemediationExceptions(output.RemediationExceptions, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeRemediationExecutionStatusResponse = (output, context) => {
    return {
        NextToken: __expectString(output.NextToken),
        RemediationExecutionStatuses: output.RemediationExecutionStatuses != null
            ? deserializeAws_json1_1RemediationExecutionStatuses(output.RemediationExecutionStatuses, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeRetentionConfigurationsResponse = (output, context) => {
    return {
        NextToken: __expectString(output.NextToken),
        RetentionConfigurations: output.RetentionConfigurations != null
            ? deserializeAws_json1_1RetentionConfigurationList(output.RetentionConfigurations, context)
            : undefined,
    };
};
const deserializeAws_json1_1DiscoveredResourceIdentifierList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1AggregateResourceIdentifier(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1Evaluation = (output, context) => {
    return {
        Annotation: __expectString(output.Annotation),
        ComplianceResourceId: __expectString(output.ComplianceResourceId),
        ComplianceResourceType: __expectString(output.ComplianceResourceType),
        ComplianceType: __expectString(output.ComplianceType),
        OrderingTimestamp: output.OrderingTimestamp != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.OrderingTimestamp)))
            : undefined,
    };
};
const deserializeAws_json1_1EvaluationContext = (output, context) => {
    return {
        EvaluationContextIdentifier: __expectString(output.EvaluationContextIdentifier),
    };
};
const deserializeAws_json1_1EvaluationModeConfiguration = (output, context) => {
    return {
        Mode: __expectString(output.Mode),
    };
};
const deserializeAws_json1_1EvaluationModes = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1EvaluationModeConfiguration(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1EvaluationResult = (output, context) => {
    return {
        Annotation: __expectString(output.Annotation),
        ComplianceType: __expectString(output.ComplianceType),
        ConfigRuleInvokedTime: output.ConfigRuleInvokedTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.ConfigRuleInvokedTime)))
            : undefined,
        EvaluationResultIdentifier: output.EvaluationResultIdentifier != null
            ? deserializeAws_json1_1EvaluationResultIdentifier(output.EvaluationResultIdentifier, context)
            : undefined,
        ResultRecordedTime: output.ResultRecordedTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.ResultRecordedTime)))
            : undefined,
        ResultToken: __expectString(output.ResultToken),
    };
};
const deserializeAws_json1_1EvaluationResultIdentifier = (output, context) => {
    return {
        EvaluationResultQualifier: output.EvaluationResultQualifier != null
            ? deserializeAws_json1_1EvaluationResultQualifier(output.EvaluationResultQualifier, context)
            : undefined,
        OrderingTimestamp: output.OrderingTimestamp != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.OrderingTimestamp)))
            : undefined,
        ResourceEvaluationId: __expectString(output.ResourceEvaluationId),
    };
};
const deserializeAws_json1_1EvaluationResultQualifier = (output, context) => {
    return {
        ConfigRuleName: __expectString(output.ConfigRuleName),
        EvaluationMode: __expectString(output.EvaluationMode),
        ResourceId: __expectString(output.ResourceId),
        ResourceType: __expectString(output.ResourceType),
    };
};
const deserializeAws_json1_1EvaluationResults = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1EvaluationResult(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1Evaluations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Evaluation(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1EvaluationStatus = (output, context) => {
    return {
        FailureReason: __expectString(output.FailureReason),
        Status: __expectString(output.Status),
    };
};
const deserializeAws_json1_1ExcludedAccounts = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1ExecutionControls = (output, context) => {
    return {
        SsmControls: output.SsmControls != null ? deserializeAws_json1_1SsmControls(output.SsmControls, context) : undefined,
    };
};
const deserializeAws_json1_1FailedDeleteRemediationExceptionsBatch = (output, context) => {
    return {
        FailedItems: output.FailedItems != null
            ? deserializeAws_json1_1RemediationExceptionResourceKeys(output.FailedItems, context)
            : undefined,
        FailureMessage: __expectString(output.FailureMessage),
    };
};
const deserializeAws_json1_1FailedDeleteRemediationExceptionsBatches = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1FailedDeleteRemediationExceptionsBatch(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1FailedRemediationBatch = (output, context) => {
    return {
        FailedItems: output.FailedItems != null
            ? deserializeAws_json1_1RemediationConfigurations(output.FailedItems, context)
            : undefined,
        FailureMessage: __expectString(output.FailureMessage),
    };
};
const deserializeAws_json1_1FailedRemediationBatches = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1FailedRemediationBatch(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1FailedRemediationExceptionBatch = (output, context) => {
    return {
        FailedItems: output.FailedItems != null ? deserializeAws_json1_1RemediationExceptions(output.FailedItems, context) : undefined,
        FailureMessage: __expectString(output.FailureMessage),
    };
};
const deserializeAws_json1_1FailedRemediationExceptionBatches = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1FailedRemediationExceptionBatch(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1FieldInfo = (output, context) => {
    return {
        Name: __expectString(output.Name),
    };
};
const deserializeAws_json1_1FieldInfoList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1FieldInfo(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1GetAggregateComplianceDetailsByConfigRuleResponse = (output, context) => {
    return {
        AggregateEvaluationResults: output.AggregateEvaluationResults != null
            ? deserializeAws_json1_1AggregateEvaluationResultList(output.AggregateEvaluationResults, context)
            : undefined,
        NextToken: __expectString(output.NextToken),
    };
};
const deserializeAws_json1_1GetAggregateConfigRuleComplianceSummaryResponse = (output, context) => {
    return {
        AggregateComplianceCounts: output.AggregateComplianceCounts != null
            ? deserializeAws_json1_1AggregateComplianceCountList(output.AggregateComplianceCounts, context)
            : undefined,
        GroupByKey: __expectString(output.GroupByKey),
        NextToken: __expectString(output.NextToken),
    };
};
const deserializeAws_json1_1GetAggregateConformancePackComplianceSummaryResponse = (output, context) => {
    return {
        AggregateConformancePackComplianceSummaries: output.AggregateConformancePackComplianceSummaries != null
            ? deserializeAws_json1_1AggregateConformancePackComplianceSummaryList(output.AggregateConformancePackComplianceSummaries, context)
            : undefined,
        GroupByKey: __expectString(output.GroupByKey),
        NextToken: __expectString(output.NextToken),
    };
};
const deserializeAws_json1_1GetAggregateDiscoveredResourceCountsResponse = (output, context) => {
    return {
        GroupByKey: __expectString(output.GroupByKey),
        GroupedResourceCounts: output.GroupedResourceCounts != null
            ? deserializeAws_json1_1GroupedResourceCountList(output.GroupedResourceCounts, context)
            : undefined,
        NextToken: __expectString(output.NextToken),
        TotalDiscoveredResources: __expectLong(output.TotalDiscoveredResources),
    };
};
const deserializeAws_json1_1GetAggregateResourceConfigResponse = (output, context) => {
    return {
        ConfigurationItem: output.ConfigurationItem != null
            ? deserializeAws_json1_1ConfigurationItem(output.ConfigurationItem, context)
            : undefined,
    };
};
const deserializeAws_json1_1GetComplianceDetailsByConfigRuleResponse = (output, context) => {
    return {
        EvaluationResults: output.EvaluationResults != null
            ? deserializeAws_json1_1EvaluationResults(output.EvaluationResults, context)
            : undefined,
        NextToken: __expectString(output.NextToken),
    };
};
const deserializeAws_json1_1GetComplianceDetailsByResourceResponse = (output, context) => {
    return {
        EvaluationResults: output.EvaluationResults != null
            ? deserializeAws_json1_1EvaluationResults(output.EvaluationResults, context)
            : undefined,
        NextToken: __expectString(output.NextToken),
    };
};
const deserializeAws_json1_1GetComplianceSummaryByConfigRuleResponse = (output, context) => {
    return {
        ComplianceSummary: output.ComplianceSummary != null
            ? deserializeAws_json1_1ComplianceSummary(output.ComplianceSummary, context)
            : undefined,
    };
};
const deserializeAws_json1_1GetComplianceSummaryByResourceTypeResponse = (output, context) => {
    return {
        ComplianceSummariesByResourceType: output.ComplianceSummariesByResourceType != null
            ? deserializeAws_json1_1ComplianceSummariesByResourceType(output.ComplianceSummariesByResourceType, context)
            : undefined,
    };
};
const deserializeAws_json1_1GetConformancePackComplianceDetailsResponse = (output, context) => {
    return {
        ConformancePackName: __expectString(output.ConformancePackName),
        ConformancePackRuleEvaluationResults: output.ConformancePackRuleEvaluationResults != null
            ? deserializeAws_json1_1ConformancePackRuleEvaluationResultsList(output.ConformancePackRuleEvaluationResults, context)
            : undefined,
        NextToken: __expectString(output.NextToken),
    };
};
const deserializeAws_json1_1GetConformancePackComplianceSummaryResponse = (output, context) => {
    return {
        ConformancePackComplianceSummaryList: output.ConformancePackComplianceSummaryList != null
            ? deserializeAws_json1_1ConformancePackComplianceSummaryList(output.ConformancePackComplianceSummaryList, context)
            : undefined,
        NextToken: __expectString(output.NextToken),
    };
};
const deserializeAws_json1_1GetCustomRulePolicyResponse = (output, context) => {
    return {
        PolicyText: __expectString(output.PolicyText),
    };
};
const deserializeAws_json1_1GetDiscoveredResourceCountsResponse = (output, context) => {
    return {
        nextToken: __expectString(output.nextToken),
        resourceCounts: output.resourceCounts != null ? deserializeAws_json1_1ResourceCounts(output.resourceCounts, context) : undefined,
        totalDiscoveredResources: __expectLong(output.totalDiscoveredResources),
    };
};
const deserializeAws_json1_1GetOrganizationConfigRuleDetailedStatusResponse = (output, context) => {
    return {
        NextToken: __expectString(output.NextToken),
        OrganizationConfigRuleDetailedStatus: output.OrganizationConfigRuleDetailedStatus != null
            ? deserializeAws_json1_1OrganizationConfigRuleDetailedStatus(output.OrganizationConfigRuleDetailedStatus, context)
            : undefined,
    };
};
const deserializeAws_json1_1GetOrganizationConformancePackDetailedStatusResponse = (output, context) => {
    return {
        NextToken: __expectString(output.NextToken),
        OrganizationConformancePackDetailedStatuses: output.OrganizationConformancePackDetailedStatuses != null
            ? deserializeAws_json1_1OrganizationConformancePackDetailedStatuses(output.OrganizationConformancePackDetailedStatuses, context)
            : undefined,
    };
};
const deserializeAws_json1_1GetOrganizationCustomRulePolicyResponse = (output, context) => {
    return {
        PolicyText: __expectString(output.PolicyText),
    };
};
const deserializeAws_json1_1GetResourceConfigHistoryResponse = (output, context) => {
    return {
        configurationItems: output.configurationItems != null
            ? deserializeAws_json1_1ConfigurationItemList(output.configurationItems, context)
            : undefined,
        nextToken: __expectString(output.nextToken),
    };
};
const deserializeAws_json1_1GetResourceEvaluationSummaryResponse = (output, context) => {
    return {
        Compliance: __expectString(output.Compliance),
        EvaluationContext: output.EvaluationContext != null
            ? deserializeAws_json1_1EvaluationContext(output.EvaluationContext, context)
            : undefined,
        EvaluationMode: __expectString(output.EvaluationMode),
        EvaluationStartTimestamp: output.EvaluationStartTimestamp != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.EvaluationStartTimestamp)))
            : undefined,
        EvaluationStatus: output.EvaluationStatus != null
            ? deserializeAws_json1_1EvaluationStatus(output.EvaluationStatus, context)
            : undefined,
        ResourceDetails: output.ResourceDetails != null
            ? deserializeAws_json1_1ResourceDetails(output.ResourceDetails, context)
            : undefined,
        ResourceEvaluationId: __expectString(output.ResourceEvaluationId),
    };
};
const deserializeAws_json1_1GetStoredQueryResponse = (output, context) => {
    return {
        StoredQuery: output.StoredQuery != null ? deserializeAws_json1_1StoredQuery(output.StoredQuery, context) : undefined,
    };
};
const deserializeAws_json1_1GroupedResourceCount = (output, context) => {
    return {
        GroupName: __expectString(output.GroupName),
        ResourceCount: __expectLong(output.ResourceCount),
    };
};
const deserializeAws_json1_1GroupedResourceCountList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1GroupedResourceCount(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1IdempotentParameterMismatch = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1InsufficientDeliveryPolicyException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1InsufficientPermissionsException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1InvalidConfigurationRecorderNameException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1InvalidDeliveryChannelNameException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1InvalidExpressionException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1InvalidLimitException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1InvalidNextTokenException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1InvalidParameterValueException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1InvalidRecordingGroupException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1InvalidResultTokenException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1InvalidRoleException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1InvalidS3KeyPrefixException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1InvalidS3KmsKeyArnException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1InvalidSNSTopicARNException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1InvalidTimeRangeException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1LastDeliveryChannelDeleteFailedException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1LimitExceededException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1ListAggregateDiscoveredResourcesResponse = (output, context) => {
    return {
        NextToken: __expectString(output.NextToken),
        ResourceIdentifiers: output.ResourceIdentifiers != null
            ? deserializeAws_json1_1DiscoveredResourceIdentifierList(output.ResourceIdentifiers, context)
            : undefined,
    };
};
const deserializeAws_json1_1ListConformancePackComplianceScoresResponse = (output, context) => {
    return {
        ConformancePackComplianceScores: output.ConformancePackComplianceScores != null
            ? deserializeAws_json1_1ConformancePackComplianceScores(output.ConformancePackComplianceScores, context)
            : undefined,
        NextToken: __expectString(output.NextToken),
    };
};
const deserializeAws_json1_1ListDiscoveredResourcesResponse = (output, context) => {
    return {
        nextToken: __expectString(output.nextToken),
        resourceIdentifiers: output.resourceIdentifiers != null
            ? deserializeAws_json1_1ResourceIdentifierList(output.resourceIdentifiers, context)
            : undefined,
    };
};
const deserializeAws_json1_1ListResourceEvaluationsResponse = (output, context) => {
    return {
        NextToken: __expectString(output.NextToken),
        ResourceEvaluations: output.ResourceEvaluations != null
            ? deserializeAws_json1_1ResourceEvaluations(output.ResourceEvaluations, context)
            : undefined,
    };
};
const deserializeAws_json1_1ListStoredQueriesResponse = (output, context) => {
    return {
        NextToken: __expectString(output.NextToken),
        StoredQueryMetadata: output.StoredQueryMetadata != null
            ? deserializeAws_json1_1StoredQueryMetadataList(output.StoredQueryMetadata, context)
            : undefined,
    };
};
const deserializeAws_json1_1ListTagsForResourceResponse = (output, context) => {
    return {
        NextToken: __expectString(output.NextToken),
        Tags: output.Tags != null ? deserializeAws_json1_1TagList(output.Tags, context) : undefined,
    };
};
const deserializeAws_json1_1MaxActiveResourcesExceededException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1MaxNumberOfConfigRulesExceededException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1MaxNumberOfConfigurationRecordersExceededException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1MaxNumberOfConformancePacksExceededException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1MaxNumberOfDeliveryChannelsExceededException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1MaxNumberOfOrganizationConfigRulesExceededException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1MaxNumberOfOrganizationConformancePacksExceededException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1MaxNumberOfRetentionConfigurationsExceededException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1MemberAccountStatus = (output, context) => {
    return {
        AccountId: __expectString(output.AccountId),
        ConfigRuleName: __expectString(output.ConfigRuleName),
        ErrorCode: __expectString(output.ErrorCode),
        ErrorMessage: __expectString(output.ErrorMessage),
        LastUpdateTime: output.LastUpdateTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastUpdateTime)))
            : undefined,
        MemberAccountRuleStatus: __expectString(output.MemberAccountRuleStatus),
    };
};
const deserializeAws_json1_1NoAvailableConfigurationRecorderException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1NoAvailableDeliveryChannelException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1NoAvailableOrganizationException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1NoRunningConfigurationRecorderException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1NoSuchBucketException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1NoSuchConfigRuleException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1NoSuchConfigRuleInConformancePackException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1NoSuchConfigurationAggregatorException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1NoSuchConfigurationRecorderException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1NoSuchConformancePackException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1NoSuchDeliveryChannelException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1NoSuchOrganizationConfigRuleException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1NoSuchOrganizationConformancePackException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1NoSuchRemediationConfigurationException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1NoSuchRemediationExceptionException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1NoSuchRetentionConfigurationException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1OrganizationAccessDeniedException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1OrganizationAggregationSource = (output, context) => {
    return {
        AllAwsRegions: __expectBoolean(output.AllAwsRegions),
        AwsRegions: output.AwsRegions != null ? deserializeAws_json1_1AggregatorRegionList(output.AwsRegions, context) : undefined,
        RoleArn: __expectString(output.RoleArn),
    };
};
const deserializeAws_json1_1OrganizationAllFeaturesNotEnabledException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1OrganizationConfigRule = (output, context) => {
    return {
        ExcludedAccounts: output.ExcludedAccounts != null
            ? deserializeAws_json1_1ExcludedAccounts(output.ExcludedAccounts, context)
            : undefined,
        LastUpdateTime: output.LastUpdateTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastUpdateTime)))
            : undefined,
        OrganizationConfigRuleArn: __expectString(output.OrganizationConfigRuleArn),
        OrganizationConfigRuleName: __expectString(output.OrganizationConfigRuleName),
        OrganizationCustomPolicyRuleMetadata: output.OrganizationCustomPolicyRuleMetadata != null
            ? deserializeAws_json1_1OrganizationCustomPolicyRuleMetadataNoPolicy(output.OrganizationCustomPolicyRuleMetadata, context)
            : undefined,
        OrganizationCustomRuleMetadata: output.OrganizationCustomRuleMetadata != null
            ? deserializeAws_json1_1OrganizationCustomRuleMetadata(output.OrganizationCustomRuleMetadata, context)
            : undefined,
        OrganizationManagedRuleMetadata: output.OrganizationManagedRuleMetadata != null
            ? deserializeAws_json1_1OrganizationManagedRuleMetadata(output.OrganizationManagedRuleMetadata, context)
            : undefined,
    };
};
const deserializeAws_json1_1OrganizationConfigRuleDetailedStatus = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1MemberAccountStatus(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1OrganizationConfigRules = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1OrganizationConfigRule(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1OrganizationConfigRuleStatus = (output, context) => {
    return {
        ErrorCode: __expectString(output.ErrorCode),
        ErrorMessage: __expectString(output.ErrorMessage),
        LastUpdateTime: output.LastUpdateTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastUpdateTime)))
            : undefined,
        OrganizationConfigRuleName: __expectString(output.OrganizationConfigRuleName),
        OrganizationRuleStatus: __expectString(output.OrganizationRuleStatus),
    };
};
const deserializeAws_json1_1OrganizationConfigRuleStatuses = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1OrganizationConfigRuleStatus(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1OrganizationConfigRuleTriggerTypeNoSNs = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1OrganizationConfigRuleTriggerTypes = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1OrganizationConformancePack = (output, context) => {
    return {
        ConformancePackInputParameters: output.ConformancePackInputParameters != null
            ? deserializeAws_json1_1ConformancePackInputParameters(output.ConformancePackInputParameters, context)
            : undefined,
        DeliveryS3Bucket: __expectString(output.DeliveryS3Bucket),
        DeliveryS3KeyPrefix: __expectString(output.DeliveryS3KeyPrefix),
        ExcludedAccounts: output.ExcludedAccounts != null
            ? deserializeAws_json1_1ExcludedAccounts(output.ExcludedAccounts, context)
            : undefined,
        LastUpdateTime: output.LastUpdateTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastUpdateTime)))
            : undefined,
        OrganizationConformancePackArn: __expectString(output.OrganizationConformancePackArn),
        OrganizationConformancePackName: __expectString(output.OrganizationConformancePackName),
    };
};
const deserializeAws_json1_1OrganizationConformancePackDetailedStatus = (output, context) => {
    return {
        AccountId: __expectString(output.AccountId),
        ConformancePackName: __expectString(output.ConformancePackName),
        ErrorCode: __expectString(output.ErrorCode),
        ErrorMessage: __expectString(output.ErrorMessage),
        LastUpdateTime: output.LastUpdateTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastUpdateTime)))
            : undefined,
        Status: __expectString(output.Status),
    };
};
const deserializeAws_json1_1OrganizationConformancePackDetailedStatuses = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1OrganizationConformancePackDetailedStatus(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1OrganizationConformancePacks = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1OrganizationConformancePack(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1OrganizationConformancePackStatus = (output, context) => {
    return {
        ErrorCode: __expectString(output.ErrorCode),
        ErrorMessage: __expectString(output.ErrorMessage),
        LastUpdateTime: output.LastUpdateTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastUpdateTime)))
            : undefined,
        OrganizationConformancePackName: __expectString(output.OrganizationConformancePackName),
        Status: __expectString(output.Status),
    };
};
const deserializeAws_json1_1OrganizationConformancePackStatuses = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1OrganizationConformancePackStatus(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1OrganizationConformancePackTemplateValidationException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1OrganizationCustomPolicyRuleMetadataNoPolicy = (output, context) => {
    return {
        DebugLogDeliveryAccounts: output.DebugLogDeliveryAccounts != null
            ? deserializeAws_json1_1DebugLogDeliveryAccounts(output.DebugLogDeliveryAccounts, context)
            : undefined,
        Description: __expectString(output.Description),
        InputParameters: __expectString(output.InputParameters),
        MaximumExecutionFrequency: __expectString(output.MaximumExecutionFrequency),
        OrganizationConfigRuleTriggerTypes: output.OrganizationConfigRuleTriggerTypes != null
            ? deserializeAws_json1_1OrganizationConfigRuleTriggerTypeNoSNs(output.OrganizationConfigRuleTriggerTypes, context)
            : undefined,
        PolicyRuntime: __expectString(output.PolicyRuntime),
        ResourceIdScope: __expectString(output.ResourceIdScope),
        ResourceTypesScope: output.ResourceTypesScope != null
            ? deserializeAws_json1_1ResourceTypesScope(output.ResourceTypesScope, context)
            : undefined,
        TagKeyScope: __expectString(output.TagKeyScope),
        TagValueScope: __expectString(output.TagValueScope),
    };
};
const deserializeAws_json1_1OrganizationCustomRuleMetadata = (output, context) => {
    return {
        Description: __expectString(output.Description),
        InputParameters: __expectString(output.InputParameters),
        LambdaFunctionArn: __expectString(output.LambdaFunctionArn),
        MaximumExecutionFrequency: __expectString(output.MaximumExecutionFrequency),
        OrganizationConfigRuleTriggerTypes: output.OrganizationConfigRuleTriggerTypes != null
            ? deserializeAws_json1_1OrganizationConfigRuleTriggerTypes(output.OrganizationConfigRuleTriggerTypes, context)
            : undefined,
        ResourceIdScope: __expectString(output.ResourceIdScope),
        ResourceTypesScope: output.ResourceTypesScope != null
            ? deserializeAws_json1_1ResourceTypesScope(output.ResourceTypesScope, context)
            : undefined,
        TagKeyScope: __expectString(output.TagKeyScope),
        TagValueScope: __expectString(output.TagValueScope),
    };
};
const deserializeAws_json1_1OrganizationManagedRuleMetadata = (output, context) => {
    return {
        Description: __expectString(output.Description),
        InputParameters: __expectString(output.InputParameters),
        MaximumExecutionFrequency: __expectString(output.MaximumExecutionFrequency),
        ResourceIdScope: __expectString(output.ResourceIdScope),
        ResourceTypesScope: output.ResourceTypesScope != null
            ? deserializeAws_json1_1ResourceTypesScope(output.ResourceTypesScope, context)
            : undefined,
        RuleIdentifier: __expectString(output.RuleIdentifier),
        TagKeyScope: __expectString(output.TagKeyScope),
        TagValueScope: __expectString(output.TagValueScope),
    };
};
const deserializeAws_json1_1OversizedConfigurationItemException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1PendingAggregationRequest = (output, context) => {
    return {
        RequesterAccountId: __expectString(output.RequesterAccountId),
        RequesterAwsRegion: __expectString(output.RequesterAwsRegion),
    };
};
const deserializeAws_json1_1PendingAggregationRequestList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1PendingAggregationRequest(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1PutAggregationAuthorizationResponse = (output, context) => {
    return {
        AggregationAuthorization: output.AggregationAuthorization != null
            ? deserializeAws_json1_1AggregationAuthorization(output.AggregationAuthorization, context)
            : undefined,
    };
};
const deserializeAws_json1_1PutConfigurationAggregatorResponse = (output, context) => {
    return {
        ConfigurationAggregator: output.ConfigurationAggregator != null
            ? deserializeAws_json1_1ConfigurationAggregator(output.ConfigurationAggregator, context)
            : undefined,
    };
};
const deserializeAws_json1_1PutConformancePackResponse = (output, context) => {
    return {
        ConformancePackArn: __expectString(output.ConformancePackArn),
    };
};
const deserializeAws_json1_1PutEvaluationsResponse = (output, context) => {
    return {
        FailedEvaluations: output.FailedEvaluations != null
            ? deserializeAws_json1_1Evaluations(output.FailedEvaluations, context)
            : undefined,
    };
};
const deserializeAws_json1_1PutExternalEvaluationResponse = (output, context) => {
    return {};
};
const deserializeAws_json1_1PutOrganizationConfigRuleResponse = (output, context) => {
    return {
        OrganizationConfigRuleArn: __expectString(output.OrganizationConfigRuleArn),
    };
};
const deserializeAws_json1_1PutOrganizationConformancePackResponse = (output, context) => {
    return {
        OrganizationConformancePackArn: __expectString(output.OrganizationConformancePackArn),
    };
};
const deserializeAws_json1_1PutRemediationConfigurationsResponse = (output, context) => {
    return {
        FailedBatches: output.FailedBatches != null
            ? deserializeAws_json1_1FailedRemediationBatches(output.FailedBatches, context)
            : undefined,
    };
};
const deserializeAws_json1_1PutRemediationExceptionsResponse = (output, context) => {
    return {
        FailedBatches: output.FailedBatches != null
            ? deserializeAws_json1_1FailedRemediationExceptionBatches(output.FailedBatches, context)
            : undefined,
    };
};
const deserializeAws_json1_1PutRetentionConfigurationResponse = (output, context) => {
    return {
        RetentionConfiguration: output.RetentionConfiguration != null
            ? deserializeAws_json1_1RetentionConfiguration(output.RetentionConfiguration, context)
            : undefined,
    };
};
const deserializeAws_json1_1PutStoredQueryResponse = (output, context) => {
    return {
        QueryArn: __expectString(output.QueryArn),
    };
};
const deserializeAws_json1_1QueryInfo = (output, context) => {
    return {
        SelectFields: output.SelectFields != null ? deserializeAws_json1_1FieldInfoList(output.SelectFields, context) : undefined,
    };
};
const deserializeAws_json1_1RecordingGroup = (output, context) => {
    return {
        allSupported: __expectBoolean(output.allSupported),
        includeGlobalResourceTypes: __expectBoolean(output.includeGlobalResourceTypes),
        resourceTypes: output.resourceTypes != null ? deserializeAws_json1_1ResourceTypeList(output.resourceTypes, context) : undefined,
    };
};
const deserializeAws_json1_1RelatedEventList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1Relationship = (output, context) => {
    return {
        relationshipName: __expectString(output.relationshipName),
        resourceId: __expectString(output.resourceId),
        resourceName: __expectString(output.resourceName),
        resourceType: __expectString(output.resourceType),
    };
};
const deserializeAws_json1_1RelationshipList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Relationship(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1RemediationConfiguration = (output, context) => {
    return {
        Arn: __expectString(output.Arn),
        Automatic: __expectBoolean(output.Automatic),
        ConfigRuleName: __expectString(output.ConfigRuleName),
        CreatedByService: __expectString(output.CreatedByService),
        ExecutionControls: output.ExecutionControls != null
            ? deserializeAws_json1_1ExecutionControls(output.ExecutionControls, context)
            : undefined,
        MaximumAutomaticAttempts: __expectInt32(output.MaximumAutomaticAttempts),
        Parameters: output.Parameters != null ? deserializeAws_json1_1RemediationParameters(output.Parameters, context) : undefined,
        ResourceType: __expectString(output.ResourceType),
        RetryAttemptSeconds: __expectLong(output.RetryAttemptSeconds),
        TargetId: __expectString(output.TargetId),
        TargetType: __expectString(output.TargetType),
        TargetVersion: __expectString(output.TargetVersion),
    };
};
const deserializeAws_json1_1RemediationConfigurations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1RemediationConfiguration(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1RemediationException = (output, context) => {
    return {
        ConfigRuleName: __expectString(output.ConfigRuleName),
        ExpirationTime: output.ExpirationTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.ExpirationTime)))
            : undefined,
        Message: __expectString(output.Message),
        ResourceId: __expectString(output.ResourceId),
        ResourceType: __expectString(output.ResourceType),
    };
};
const deserializeAws_json1_1RemediationExceptionResourceKey = (output, context) => {
    return {
        ResourceId: __expectString(output.ResourceId),
        ResourceType: __expectString(output.ResourceType),
    };
};
const deserializeAws_json1_1RemediationExceptionResourceKeys = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1RemediationExceptionResourceKey(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1RemediationExceptions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1RemediationException(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1RemediationExecutionStatus = (output, context) => {
    return {
        InvocationTime: output.InvocationTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.InvocationTime)))
            : undefined,
        LastUpdatedTime: output.LastUpdatedTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastUpdatedTime)))
            : undefined,
        ResourceKey: output.ResourceKey != null ? deserializeAws_json1_1ResourceKey(output.ResourceKey, context) : undefined,
        State: __expectString(output.State),
        StepDetails: output.StepDetails != null
            ? deserializeAws_json1_1RemediationExecutionSteps(output.StepDetails, context)
            : undefined,
    };
};
const deserializeAws_json1_1RemediationExecutionStatuses = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1RemediationExecutionStatus(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1RemediationExecutionStep = (output, context) => {
    return {
        ErrorMessage: __expectString(output.ErrorMessage),
        Name: __expectString(output.Name),
        StartTime: output.StartTime != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.StartTime))) : undefined,
        State: __expectString(output.State),
        StopTime: output.StopTime != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.StopTime))) : undefined,
    };
};
const deserializeAws_json1_1RemediationExecutionSteps = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1RemediationExecutionStep(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1RemediationInProgressException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1RemediationParameters = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = deserializeAws_json1_1RemediationParameterValue(value, context);
        return acc;
    }, {});
};
const deserializeAws_json1_1RemediationParameterValue = (output, context) => {
    return {
        ResourceValue: output.ResourceValue != null ? deserializeAws_json1_1ResourceValue(output.ResourceValue, context) : undefined,
        StaticValue: output.StaticValue != null ? deserializeAws_json1_1StaticValue(output.StaticValue, context) : undefined,
    };
};
const deserializeAws_json1_1ResourceConcurrentModificationException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1ResourceCount = (output, context) => {
    return {
        count: __expectLong(output.count),
        resourceType: __expectString(output.resourceType),
    };
};
const deserializeAws_json1_1ResourceCounts = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ResourceCount(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ResourceDetails = (output, context) => {
    return {
        ResourceConfiguration: __expectString(output.ResourceConfiguration),
        ResourceConfigurationSchemaType: __expectString(output.ResourceConfigurationSchemaType),
        ResourceId: __expectString(output.ResourceId),
        ResourceType: __expectString(output.ResourceType),
    };
};
const deserializeAws_json1_1ResourceEvaluation = (output, context) => {
    return {
        EvaluationMode: __expectString(output.EvaluationMode),
        EvaluationStartTimestamp: output.EvaluationStartTimestamp != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.EvaluationStartTimestamp)))
            : undefined,
        ResourceEvaluationId: __expectString(output.ResourceEvaluationId),
    };
};
const deserializeAws_json1_1ResourceEvaluations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ResourceEvaluation(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ResourceIdentifier = (output, context) => {
    return {
        resourceDeletionTime: output.resourceDeletionTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.resourceDeletionTime)))
            : undefined,
        resourceId: __expectString(output.resourceId),
        resourceName: __expectString(output.resourceName),
        resourceType: __expectString(output.resourceType),
    };
};
const deserializeAws_json1_1ResourceIdentifierList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ResourceIdentifier(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ResourceInUseException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1ResourceKey = (output, context) => {
    return {
        resourceId: __expectString(output.resourceId),
        resourceType: __expectString(output.resourceType),
    };
};
const deserializeAws_json1_1ResourceKeys = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ResourceKey(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ResourceNotDiscoveredException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1ResourceNotFoundException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1ResourceTypeList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1ResourceTypesScope = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1ResourceValue = (output, context) => {
    return {
        Value: __expectString(output.Value),
    };
};
const deserializeAws_json1_1Results = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1RetentionConfiguration = (output, context) => {
    return {
        Name: __expectString(output.Name),
        RetentionPeriodInDays: __expectInt32(output.RetentionPeriodInDays),
    };
};
const deserializeAws_json1_1RetentionConfigurationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1RetentionConfiguration(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1Scope = (output, context) => {
    return {
        ComplianceResourceId: __expectString(output.ComplianceResourceId),
        ComplianceResourceTypes: output.ComplianceResourceTypes != null
            ? deserializeAws_json1_1ComplianceResourceTypes(output.ComplianceResourceTypes, context)
            : undefined,
        TagKey: __expectString(output.TagKey),
        TagValue: __expectString(output.TagValue),
    };
};
const deserializeAws_json1_1SelectAggregateResourceConfigResponse = (output, context) => {
    return {
        NextToken: __expectString(output.NextToken),
        QueryInfo: output.QueryInfo != null ? deserializeAws_json1_1QueryInfo(output.QueryInfo, context) : undefined,
        Results: output.Results != null ? deserializeAws_json1_1Results(output.Results, context) : undefined,
    };
};
const deserializeAws_json1_1SelectResourceConfigResponse = (output, context) => {
    return {
        NextToken: __expectString(output.NextToken),
        QueryInfo: output.QueryInfo != null ? deserializeAws_json1_1QueryInfo(output.QueryInfo, context) : undefined,
        Results: output.Results != null ? deserializeAws_json1_1Results(output.Results, context) : undefined,
    };
};
const deserializeAws_json1_1Source = (output, context) => {
    return {
        CustomPolicyDetails: output.CustomPolicyDetails != null
            ? deserializeAws_json1_1CustomPolicyDetails(output.CustomPolicyDetails, context)
            : undefined,
        Owner: __expectString(output.Owner),
        SourceDetails: output.SourceDetails != null ? deserializeAws_json1_1SourceDetails(output.SourceDetails, context) : undefined,
        SourceIdentifier: __expectString(output.SourceIdentifier),
    };
};
const deserializeAws_json1_1SourceDetail = (output, context) => {
    return {
        EventSource: __expectString(output.EventSource),
        MaximumExecutionFrequency: __expectString(output.MaximumExecutionFrequency),
        MessageType: __expectString(output.MessageType),
    };
};
const deserializeAws_json1_1SourceDetails = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1SourceDetail(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1SsmControls = (output, context) => {
    return {
        ConcurrentExecutionRatePercentage: __expectInt32(output.ConcurrentExecutionRatePercentage),
        ErrorPercentage: __expectInt32(output.ErrorPercentage),
    };
};
const deserializeAws_json1_1StartConfigRulesEvaluationResponse = (output, context) => {
    return {};
};
const deserializeAws_json1_1StartRemediationExecutionResponse = (output, context) => {
    return {
        FailedItems: output.FailedItems != null ? deserializeAws_json1_1ResourceKeys(output.FailedItems, context) : undefined,
        FailureMessage: __expectString(output.FailureMessage),
    };
};
const deserializeAws_json1_1StartResourceEvaluationResponse = (output, context) => {
    return {
        ResourceEvaluationId: __expectString(output.ResourceEvaluationId),
    };
};
const deserializeAws_json1_1StaticParameterValues = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1StaticValue = (output, context) => {
    return {
        Values: output.Values != null ? deserializeAws_json1_1StaticParameterValues(output.Values, context) : undefined,
    };
};
const deserializeAws_json1_1StoredQuery = (output, context) => {
    return {
        Description: __expectString(output.Description),
        Expression: __expectString(output.Expression),
        QueryArn: __expectString(output.QueryArn),
        QueryId: __expectString(output.QueryId),
        QueryName: __expectString(output.QueryName),
    };
};
const deserializeAws_json1_1StoredQueryMetadata = (output, context) => {
    return {
        Description: __expectString(output.Description),
        QueryArn: __expectString(output.QueryArn),
        QueryId: __expectString(output.QueryId),
        QueryName: __expectString(output.QueryName),
    };
};
const deserializeAws_json1_1StoredQueryMetadataList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1StoredQueryMetadata(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1SupplementaryConfiguration = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = __expectString(value);
        return acc;
    }, {});
};
const deserializeAws_json1_1Tag = (output, context) => {
    return {
        Key: __expectString(output.Key),
        Value: __expectString(output.Value),
    };
};
const deserializeAws_json1_1TagList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Tag(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1Tags = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = __expectString(value);
        return acc;
    }, {});
};
const deserializeAws_json1_1TemplateSSMDocumentDetails = (output, context) => {
    return {
        DocumentName: __expectString(output.DocumentName),
        DocumentVersion: __expectString(output.DocumentVersion),
    };
};
const deserializeAws_json1_1TooManyTagsException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1UnprocessedResourceIdentifierList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1AggregateResourceIdentifier(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ValidationException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
