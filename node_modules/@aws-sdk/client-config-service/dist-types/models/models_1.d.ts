import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
import { ConfigServiceServiceException as __BaseException } from "./ConfigServiceServiceException";
import { ConformancePackInputParameter, FailedRemediationBatch, FailedRemediationExceptionBatch, FieldInfo, OrganizationCustomPolicyRuleMetadata, OrganizationCustomRuleMetadata, OrganizationManagedRuleMetadata, RemediationConfiguration, RemediationExceptionResourceKey, ResourceKey, RetentionConfiguration, StoredQuery, Tag } from "./models_0";
export interface PutOrganizationConfigRuleRequest {
    /**
     * <p>The name that you assign to an organization Config rule.</p>
     */
    OrganizationConfigRuleName: string | undefined;
    /**
     * <p>An <code>OrganizationManagedRuleMetadata</code> object. </p>
     */
    OrganizationManagedRuleMetadata?: OrganizationManagedRuleMetadata;
    /**
     * <p>An <code>OrganizationCustomRuleMetadata</code> object.</p>
     */
    OrganizationCustomRuleMetadata?: OrganizationCustomRuleMetadata;
    /**
     * <p>A comma-separated list of accounts that you want to exclude from an organization Config rule.</p>
     */
    ExcludedAccounts?: string[];
    /**
     * <p>An object that specifies metadata for your organization's Config Custom Policy rule. The metadata includes the runtime system in use, which accounts have debug
     * 			logging enabled, and other custom rule metadata, such as resource type, resource ID of
     * 				Amazon Web Services resource, and organization trigger types that initiate Config to evaluate Amazon Web Services resources against a rule.</p>
     */
    OrganizationCustomPolicyRuleMetadata?: OrganizationCustomPolicyRuleMetadata;
}
export declare namespace PutOrganizationConfigRuleRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: PutOrganizationConfigRuleRequest) => any;
}
export interface PutOrganizationConfigRuleResponse {
    /**
     * <p>The Amazon Resource Name (ARN) of an organization Config rule.</p>
     */
    OrganizationConfigRuleArn?: string;
}
export declare namespace PutOrganizationConfigRuleResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: PutOrganizationConfigRuleResponse) => any;
}
export interface PutOrganizationConformancePackRequest {
    /**
     * <p>Name of the organization conformance pack you want to create.</p>
     */
    OrganizationConformancePackName: string | undefined;
    /**
     * <p>Location of file containing the template body. The uri must point to the conformance pack template
     * 			(max size: 300 KB).</p>
     * 		       <note>
     *             <p>You must have access to read Amazon S3 bucket.</p>
     *          </note>
     */
    TemplateS3Uri?: string;
    /**
     * <p>A string containing full conformance pack template body. Structure containing the template body
     * 			with a minimum length of 1 byte and a maximum length of 51,200 bytes.</p>
     */
    TemplateBody?: string;
    /**
     * <p>The name of the Amazon S3 bucket where Config stores conformance pack templates.</p>
     * 		       <note>
     *             <p>This field is optional. If used, it must be prefixed with <code>awsconfigconforms</code>.</p>
     *          </note>
     */
    DeliveryS3Bucket?: string;
    /**
     * <p>The prefix for the Amazon S3 bucket.</p>
     * 		       <note>
     *             <p>This field is optional.</p>
     *          </note>
     */
    DeliveryS3KeyPrefix?: string;
    /**
     * <p>A list of <code>ConformancePackInputParameter</code> objects.</p>
     */
    ConformancePackInputParameters?: ConformancePackInputParameter[];
    /**
     * <p>A list of Amazon Web Services accounts to be excluded from an organization conformance pack while deploying a conformance pack.</p>
     */
    ExcludedAccounts?: string[];
}
export declare namespace PutOrganizationConformancePackRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: PutOrganizationConformancePackRequest) => any;
}
export interface PutOrganizationConformancePackResponse {
    /**
     * <p>ARN of the organization conformance pack.</p>
     */
    OrganizationConformancePackArn?: string;
}
export declare namespace PutOrganizationConformancePackResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: PutOrganizationConformancePackResponse) => any;
}
export interface PutRemediationConfigurationsRequest {
    /**
     * <p>A list of remediation configuration objects.</p>
     */
    RemediationConfigurations: RemediationConfiguration[] | undefined;
}
export declare namespace PutRemediationConfigurationsRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: PutRemediationConfigurationsRequest) => any;
}
export interface PutRemediationConfigurationsResponse {
    /**
     * <p>Returns a list of failed remediation batch objects.</p>
     */
    FailedBatches?: FailedRemediationBatch[];
}
export declare namespace PutRemediationConfigurationsResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: PutRemediationConfigurationsResponse) => any;
}
export interface PutRemediationExceptionsRequest {
    /**
     * <p>The name of the Config rule for which you want to create remediation exception.</p>
     */
    ConfigRuleName: string | undefined;
    /**
     * <p>An exception list of resource exception keys to be processed with the current request. Config adds exception for each resource key. For example, Config adds 3 exceptions for 3 resource keys. </p>
     */
    ResourceKeys: RemediationExceptionResourceKey[] | undefined;
    /**
     * <p>The message contains an explanation of the exception.</p>
     */
    Message?: string;
    /**
     * <p>The exception is automatically deleted after the expiration date.</p>
     */
    ExpirationTime?: Date;
}
export declare namespace PutRemediationExceptionsRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: PutRemediationExceptionsRequest) => any;
}
export interface PutRemediationExceptionsResponse {
    /**
     * <p>Returns a list of failed remediation exceptions batch objects. Each object in the batch consists of a list of failed items and failure messages.</p>
     */
    FailedBatches?: FailedRemediationExceptionBatch[];
}
export declare namespace PutRemediationExceptionsResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: PutRemediationExceptionsResponse) => any;
}
export interface PutResourceConfigRequest {
    /**
     * <p>The type of the resource. The custom resource type must be registered with CloudFormation. </p>
     * 		       <note>
     *             <p>You cannot use the organization names “amzn”, “amazon”, “alexa”, “custom” with custom resource types. It is the first part of the ResourceType up to the first ::.</p>
     *          </note>
     */
    ResourceType: string | undefined;
    /**
     * <p>Version of the schema registered for the ResourceType in CloudFormation.</p>
     */
    SchemaVersionId: string | undefined;
    /**
     * <p>Unique identifier of the resource.</p>
     */
    ResourceId: string | undefined;
    /**
     * <p>Name of the resource.</p>
     */
    ResourceName?: string;
    /**
     * <p>The configuration object of the resource in valid JSON format. It must match the schema registered with CloudFormation.</p>
     * 		       <note>
     *             <p>The configuration JSON must not exceed 64 KB.</p>
     *          </note>
     */
    Configuration: string | undefined;
    /**
     * <p>Tags associated with the resource.</p>
     */
    Tags?: Record<string, string>;
}
export declare namespace PutResourceConfigRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: PutResourceConfigRequest) => any;
}
export interface PutRetentionConfigurationRequest {
    /**
     * <p>Number of days Config stores your historical
     * 			information.</p>
     * 		       <note>
     * 			         <p>Currently, only applicable to the configuration item
     * 				history.</p>
     * 		       </note>
     */
    RetentionPeriodInDays: number | undefined;
}
export declare namespace PutRetentionConfigurationRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: PutRetentionConfigurationRequest) => any;
}
export interface PutRetentionConfigurationResponse {
    /**
     * <p>Returns a retention configuration object.</p>
     */
    RetentionConfiguration?: RetentionConfiguration;
}
export declare namespace PutRetentionConfigurationResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: PutRetentionConfigurationResponse) => any;
}
export interface PutStoredQueryRequest {
    /**
     * <p>A list of <code>StoredQuery</code> objects.
     * 			The mandatory fields are <code>QueryName</code> and <code>Expression</code>.</p>
     * 		       <note>
     *             <p>When you are creating a query, you must provide a query name and an expression.
     * 			When you are updating a query, you must provide a query name but updating the description is optional.</p>
     *          </note>
     */
    StoredQuery: StoredQuery | undefined;
    /**
     * <p>A list of <code>Tags</code> object.</p>
     */
    Tags?: Tag[];
}
export declare namespace PutStoredQueryRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: PutStoredQueryRequest) => any;
}
export interface PutStoredQueryResponse {
    /**
     * <p>Amazon Resource Name (ARN) of the query.
     * 			For example, arn:partition:service:region:account-id:resource-type/resource-name/resource-id.</p>
     */
    QueryArn?: string;
}
export declare namespace PutStoredQueryResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: PutStoredQueryResponse) => any;
}
/**
 * <p>Two users are trying to modify the same query at the same time. Wait for a moment and try again.</p>
 */
export declare class ResourceConcurrentModificationException extends __BaseException {
    readonly name: "ResourceConcurrentModificationException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<ResourceConcurrentModificationException, __BaseException>);
}
/**
 * <p>You have reached the limit of the number of tags you can use. You have more than 50 tags.</p>
 */
export declare class TooManyTagsException extends __BaseException {
    readonly name: "TooManyTagsException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<TooManyTagsException, __BaseException>);
}
/**
 * <p>Details about the query.</p>
 */
export interface QueryInfo {
    /**
     * <p>Returns a <code>FieldInfo</code> object.</p>
     */
    SelectFields?: FieldInfo[];
}
export declare namespace QueryInfo {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: QueryInfo) => any;
}
export interface SelectAggregateResourceConfigRequest {
    /**
     * <p>The SQL query SELECT command. </p>
     */
    Expression: string | undefined;
    /**
     * <p>The name of the configuration aggregator.</p>
     */
    ConfigurationAggregatorName: string | undefined;
    /**
     * <p>The maximum number of query results returned on each page. </p>
     */
    Limit?: number;
    /**
     * <p>The maximum number of query results returned on each page. Config also allows the Limit request parameter.</p>
     */
    MaxResults?: number;
    /**
     * <p>The nextToken string returned in a previous request that you use to request the next page of results in a paginated response. </p>
     */
    NextToken?: string;
}
export declare namespace SelectAggregateResourceConfigRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: SelectAggregateResourceConfigRequest) => any;
}
export interface SelectAggregateResourceConfigResponse {
    /**
     * <p>Returns the results for the SQL query.</p>
     */
    Results?: string[];
    /**
     * <p>Details about the query.</p>
     */
    QueryInfo?: QueryInfo;
    /**
     * <p>The nextToken string returned in a previous request that you use to request the next page of results in a paginated response. </p>
     */
    NextToken?: string;
}
export declare namespace SelectAggregateResourceConfigResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: SelectAggregateResourceConfigResponse) => any;
}
export interface SelectResourceConfigRequest {
    /**
     * <p>The SQL query <code>SELECT</code> command.</p>
     */
    Expression: string | undefined;
    /**
     * <p>The maximum number of query results returned on each page. </p>
     */
    Limit?: number;
    /**
     * <p>The <code>nextToken</code> string returned in a previous request that you use to request the next page of results in a paginated response. </p>
     */
    NextToken?: string;
}
export declare namespace SelectResourceConfigRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: SelectResourceConfigRequest) => any;
}
export interface SelectResourceConfigResponse {
    /**
     * <p>Returns the results for the SQL query.</p>
     */
    Results?: string[];
    /**
     * <p>Returns the <code>QueryInfo</code> object.</p>
     */
    QueryInfo?: QueryInfo;
    /**
     * <p>The <code>nextToken</code> string returned in a previous request that you use to request the next page of results in a paginated response. </p>
     */
    NextToken?: string;
}
export declare namespace SelectResourceConfigResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: SelectResourceConfigResponse) => any;
}
/**
 * <p></p>
 */
export interface StartConfigRulesEvaluationRequest {
    /**
     * <p>The list of names of Config rules that you want to run
     * 			evaluations for.</p>
     */
    ConfigRuleNames?: string[];
}
export declare namespace StartConfigRulesEvaluationRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: StartConfigRulesEvaluationRequest) => any;
}
/**
 * <p>The output when you start the evaluation for the specified Config rule.</p>
 */
export interface StartConfigRulesEvaluationResponse {
}
export declare namespace StartConfigRulesEvaluationResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: StartConfigRulesEvaluationResponse) => any;
}
/**
 * <p>The input for the <a>StartConfigurationRecorder</a>
 * 			action.</p>
 */
export interface StartConfigurationRecorderRequest {
    /**
     * <p>The name of the recorder object that records each configuration
     * 			change made to the resources.</p>
     */
    ConfigurationRecorderName: string | undefined;
}
export declare namespace StartConfigurationRecorderRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: StartConfigurationRecorderRequest) => any;
}
export interface StartRemediationExecutionRequest {
    /**
     * <p>The list of names of Config rules that you want to run remediation execution for.</p>
     */
    ConfigRuleName: string | undefined;
    /**
     * <p>A list of resource keys to be processed with the current request. Each element in the list consists of the resource type and resource ID. </p>
     */
    ResourceKeys: ResourceKey[] | undefined;
}
export declare namespace StartRemediationExecutionRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: StartRemediationExecutionRequest) => any;
}
export interface StartRemediationExecutionResponse {
    /**
     * <p>Returns a failure message. For example, the resource is already compliant.</p>
     */
    FailureMessage?: string;
    /**
     * <p>For resources that have failed to start execution, the API returns a resource key object.</p>
     */
    FailedItems?: ResourceKey[];
}
export declare namespace StartRemediationExecutionResponse {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: StartRemediationExecutionResponse) => any;
}
/**
 * <p>The input for the <a>StopConfigurationRecorder</a> action.</p>
 */
export interface StopConfigurationRecorderRequest {
    /**
     * <p>The name of the recorder object that records each configuration change made to the resources.</p>
     */
    ConfigurationRecorderName: string | undefined;
}
export declare namespace StopConfigurationRecorderRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: StopConfigurationRecorderRequest) => any;
}
export interface TagResourceRequest {
    /**
     * <p>The Amazon Resource Name (ARN) that identifies the resource for which to list the tags. Currently, the supported resources are <code>ConfigRule</code>, <code>ConfigurationAggregator</code> and <code>AggregatorAuthorization</code>.</p>
     */
    ResourceArn: string | undefined;
    /**
     * <p>An array of tag object.</p>
     */
    Tags: Tag[] | undefined;
}
export declare namespace TagResourceRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: TagResourceRequest) => any;
}
export interface UntagResourceRequest {
    /**
     * <p>The Amazon Resource Name (ARN) that identifies the resource for which to list the tags. Currently, the supported resources are <code>ConfigRule</code>, <code>ConfigurationAggregator</code> and <code>AggregatorAuthorization</code>.</p>
     */
    ResourceArn: string | undefined;
    /**
     * <p>The keys of the tags to be removed.</p>
     */
    TagKeys: string[] | undefined;
}
export declare namespace UntagResourceRequest {
    /**
     * @internal
     */
    const filterSensitiveLog: (obj: UntagResourceRequest) => any;
}
