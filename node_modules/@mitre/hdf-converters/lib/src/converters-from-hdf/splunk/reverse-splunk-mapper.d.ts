import { AxiosResponse } from 'axios';
import { ContextualizedControl, ContextualizedEvaluation, ContextualizedProfile, ExecJSON } from 'inspecjs';
import { MappedTransform } from '../../base-converter';
import { FromAnyBaseConverter } from '../reverse-any-base-converter';
import { ILookupPathFH } from '../reverse-base-converter';
import { SplunkControl } from './splunk-control-types';
import { SplunkProfile } from './splunk-profile-types';
import { SplunkReport } from './splunk-report-types';
export declare const HDF_SPLUNK_SCHEMA = "1.0";
export declare type SplunkConfig = {
    host: string;
    port: number;
    token: string;
    protocol: string;
    index?: string;
};
export declare type SplunkData = {
    profiles: SplunkProfile[];
    controls: SplunkControl[];
    reports: SplunkReport[];
};
export declare function createGUID(length: number): string;
export declare function contextualizeIfNeeded(data: ExecJSON.Execution | ContextualizedEvaluation): ContextualizedEvaluation;
export declare function postDataToSplunkHEC(data: Record<string, unknown> | Record<string, unknown>[], config: SplunkConfig): Promise<AxiosResponse<any, any>>[];
export declare function createReportMapping(execution: ContextualizedEvaluation, filename: string, guid: string): MappedTransform<SplunkReport, ILookupPathFH>;
export declare function getDependencies(profile?: ContextualizedProfile, execution?: ContextualizedEvaluation): string[];
export declare function getProfileRunLevel(profile: ContextualizedProfile, execution: ContextualizedEvaluation): number;
export declare function createProfileMapping(filename: string, guid: string): MappedTransform<SplunkProfile, ILookupPathFH>;
export declare function createControlMapping(control: ContextualizedControl, profile: ContextualizedProfile, execution: ContextualizedEvaluation, filename: string, guid: string): MappedTransform<SplunkControl, ILookupPathFH>;
export declare class FromHDFExecutionToSplunkExecutionMapper extends FromAnyBaseConverter {
    constructor(evaluation: ContextualizedEvaluation, filename: string, guid: string);
    toSplunkExecution(): import("../../base-converter").MappedReform<any, ILookupPathFH>;
}
export declare class FromHDFProfileToSplunkProfileMapper extends FromAnyBaseConverter {
    constructor(profile: ContextualizedProfile, filename: string, guid: string);
    toSplunkProfile(): import("../../base-converter").MappedReform<any, ILookupPathFH>;
}
export declare class FromHDFControlToSplunkControlMapper extends FromAnyBaseConverter {
    constructor(control: ContextualizedControl, profile: ContextualizedProfile, execution: ContextualizedEvaluation, filename: string, guid: string);
    toSplunkControl(): import("../../base-converter").MappedReform<any, ILookupPathFH>;
}
export declare class FromHDFToSplunkMapper extends FromAnyBaseConverter {
    mappings?: MappedTransform<SplunkData, ILookupPathFH>;
    contextualizedEvaluation?: ContextualizedEvaluation;
    constructor(data: ExecJSON.Execution | ContextualizedEvaluation);
    toSplunk(config: SplunkConfig, filename: string): Promise<string>;
}
