"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FromHdfToAsffMapper = exports.TO_ASFF_TYPES_SLASH_REPLACEMENT = void 0;
const inspecjs_1 = require("inspecjs");
const reverse_base_converter_1 = require("../reverse-base-converter");
const transformers_1 = require("./transformers");
exports.TO_ASFF_TYPES_SLASH_REPLACEMENT = '{{{SLASH}}}';
class FromHdfToAsffMapper extends reverse_base_converter_1.FromHdfBaseConverter {
    constructor(hdfObj, options) {
        super(hdfObj);
        this.mappings = {
            Findings: [
                {
                    SchemaVersion: '2018-10-08',
                    Id: { path: '', transformer: transformers_1.setupId, passParent: true },
                    ProductArn: { path: '', transformer: transformers_1.setupProductARN, passParent: true },
                    AwsAccountId: { path: '', transformer: transformers_1.setupAwsAcct, passParent: true },
                    Types: {
                        transformer: () => ['Software and Configuration Checks']
                    },
                    CreatedAt: { path: '', transformer: transformers_1.setupCreated },
                    UpdatedAt: { path: '', transformer: transformers_1.setupUpdated, passParent: true },
                    GeneratorId: {
                        path: '',
                        transformer: transformers_1.setupGeneratorId,
                        passParent: true
                    },
                    Title: { path: '', transformer: transformers_1.setupTitle },
                    Description: { path: '', transformer: transformers_1.setupDescr },
                    FindingProviderFields: {
                        Severity: {
                            Label: { path: '', transformer: transformers_1.setupSevLabel, passParent: true },
                            Original: { path: '', transformer: transformers_1.setupSevLabel, passParent: true }
                        },
                        Types: { path: '', transformer: transformers_1.setupFindingType, passParent: true }
                    },
                    Remediation: {
                        Recommendation: {
                            Text: { path: '', transformer: transformers_1.setupRemRec }
                        }
                    },
                    ProductFields: {
                        Check: { path: '', transformer: transformers_1.setupProdFieldCheck }
                    },
                    Severity: {
                        Label: { path: '', transformer: transformers_1.setupSevLabel, passParent: true },
                        Original: { path: '', transformer: transformers_1.setupSevOriginal }
                    },
                    Resources: [
                        {
                            Type: 'AwsAccount',
                            Id: { path: '', transformer: transformers_1.setupResourcesID, passParent: true },
                            Partition: 'aws',
                            Region: { path: '', transformer: transformers_1.setupRegion, passParent: true }
                        },
                        {
                            Id: { path: '', transformer: transformers_1.setupResourcesID2 },
                            Type: 'AwsIamRole',
                            Details: {
                                AwsIamRole: {
                                    AssumeRolePolicyDocument: {
                                        path: '',
                                        transformer: transformers_1.setupDetailsAssume
                                    }
                                }
                            }
                        }
                    ],
                    Compliance: {
                        RelatedRequirements: {
                            transformer: () => [
                                'SEE REMEDIATION FIELD FOR RESULTS AND RECOMMENDED ACTION(S)'
                            ]
                        },
                        Status: { path: '', transformer: transformers_1.setupControlStatus }
                    }
                }
            ]
        };
        this.impactMapping = new Map([
            [0.9, 'CRITICAL'],
            [0.7, 'HIGH'],
            [0.5, 'MEDIUM'],
            [0.3, 'LOW'],
            [0.0, 'INFORMATIONAL']
        ]);
        this.ioptions = options === undefined ? this.defaultOptions() : options;
        this.counts = (0, transformers_1.statusCount)((0, inspecjs_1.contextualizeEvaluation)(hdfObj));
    }
    defaultOptions() {
        return {
            input: '',
            awsAccountId: '',
            target: 'default',
            region: ''
        };
    }
    setMappings(customMappings) {
        super.setMappings(customMappings);
    }
    controlsToSegments() {
        const segments = [];
        this.data.profiles.forEach((profile) => {
            profile.controls.reverse().forEach((control) => {
                control.results.forEach((segment) => {
                    segments.push({
                        ...control,
                        result: segment,
                        layersOfControl: (0, transformers_1.getAllLayers)(this.data, control)
                    });
                });
            });
        });
        return segments;
    }
    toAsff() {
        if (this.mappings === undefined) {
            throw new Error('Mappings must be provided');
        }
        else {
            const resList = this.controlsToSegments().map((segment, index) => {
                this.index = index;
                return this.convertInternal(segment, this.mappings)['Findings'][0];
            });
            resList.push((0, transformers_1.createProfileInfoFinding)(this.data, this.ioptions));
            return resList;
        }
    }
}
exports.FromHdfToAsffMapper = FromHdfToAsffMapper;
//# sourceMappingURL=reverse-asff-mapper.js.map