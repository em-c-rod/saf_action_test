"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupControlStatus = exports.setupDetailsAssume = exports.setupResourcesID2 = exports.setupResourcesID = exports.setupProdFieldCheck = exports.setupRemRec = exports.getFixForControl = exports.setupFindingType = exports.setupSevOriginal = exports.setupSevLabel = exports.setupDescr = exports.setupTitle = exports.setupGeneratorId = exports.setupUpdated = exports.setupRegion = exports.setupCreated = exports.setupAwsAcct = exports.setupProductARN = exports.setupId = exports.createCode = exports.createNote = exports.getAllLayers = exports.cleanText = exports.sliceIntoChunks = exports.createAssumeRolePolicyDocument = exports.createDescription = exports.statusCount = exports.createProfileInfoFinding = exports.getRunTime = void 0;
const crypto_1 = require("crypto");
const inspecjs_1 = require("inspecjs");
const lodash_1 = __importDefault(require("lodash"));
const moment_1 = __importDefault(require("moment"));
const reverse_asff_mapper_1 = require("./reverse-asff-mapper");
function getRunTime(hdf) {
    let time = new Date();
    hdf.profiles.forEach((profile) => {
        if (profile.controls[0].results.length &&
            profile.controls[0].results[0].start_time) {
            time = new Date(profile.controls[0].results[0].start_time);
        }
    });
    return time;
}
exports.getRunTime = getRunTime;
function filter_overlays(controls) {
    const idHash = {};
    controls.forEach((c) => {
        const id = c.hdf.wraps.id;
        const old = idHash[id];
        if (old) {
            const newSignificant = c.hdf.status_list && c.hdf.status_list.length > 0;
            if (newSignificant) {
                idHash[id] = c;
            }
        }
        else {
            idHash[id] = c;
        }
    });
    return Array.from(Object.values(idHash));
}
function createProfileInfoFinding(hdf, options) {
    const runTime = getRunTime(hdf);
    const inspecJSJson = (0, inspecjs_1.convertFile)(JSON.stringify(hdf));
    const contextualizedEvaluation = (0, inspecjs_1.contextualizeEvaluation)(inspecJSJson['1_0_ExecJson']);
    const counts = statusCount(contextualizedEvaluation);
    const updatedAt = new Date();
    updatedAt.setMilliseconds(updatedAt.getMilliseconds() +
        (contextualizedEvaluation.contains[0].contains.length || 0));
    const profileInfo = {
        SchemaVersion: '2018-10-08',
        Id: `${options.target}/${hdf.profiles[0].name}`,
        ProductArn: `arn:aws:securityhub:${options.region}:${options.awsAccountId}:product/${options.awsAccountId}/default`,
        GeneratorId: `arn:aws:securityhub:us-east-2:${options.awsAccountId}:ruleset/set/${hdf.profiles[0].name}`,
        AwsAccountId: options.awsAccountId,
        CreatedAt: runTime.toISOString(),
        UpdatedAt: updatedAt,
        Title: `${options.target} | ${hdf.profiles[0].name} | ${(0, moment_1.default)().format('YYYY-MM-DD hh:mm:ss [GMT]ZZ')}`,
        Description: createDescription(counts),
        Severity: {
            Label: 'INFORMATIONAL'
        },
        FindingProviderFields: {
            Severity: {
                Label: 'INFORMATIONAL'
            },
            Types: createProfileInfoFindingFields(hdf)
        },
        Resources: [
            {
                Type: 'AwsAccount',
                Id: `AWS::::Account:${options.awsAccountId}`,
                Partition: 'aws',
                Region: options.region
            }
        ]
    };
    return profileInfo;
}
exports.createProfileInfoFinding = createProfileInfoFinding;
function statusCount(evaluation) {
    let controls = [];
    evaluation.contains.forEach((p) => controls.push(...p.contains));
    controls = filter_overlays(controls);
    const statusCounts = {
        Passed: 0,
        PassedTests: 0,
        PassingTestsFailedControl: 0,
        Failed: 0,
        FailedTests: 0,
        NotApplicable: 0,
        NotReviewed: 0
    };
    controls.forEach((control) => {
        if (control.hdf.status === 'Passed') {
            statusCounts.Passed += 1;
            statusCounts.PassedTests += (control.hdf.segments || []).length;
        }
        else if (control.hdf.status === 'Failed') {
            statusCounts.PassingTestsFailedControl += (control.hdf.segments || []).filter((s) => s.status === 'passed').length;
            statusCounts.FailedTests += (control.hdf.segments || []).filter((s) => s.status === 'failed').length;
            statusCounts.Failed += 1;
        }
        else if (control.hdf.status === 'Not Applicable') {
            statusCounts.NotApplicable += 1;
        }
        else if (control.hdf.status === 'Not Reviewed') {
            statusCounts.NotReviewed += 1;
        }
    });
    return statusCounts;
}
exports.statusCount = statusCount;
function createDescription(counts) {
    return `Passed: ${counts.Passed} (${counts.PassedTests} individual checks passed) --- Failed: ${counts.Failed} (${counts.PassingTestsFailedControl} individual checks failed out of ${counts.PassingTestsFailedControl + counts.FailedTests} total checks) --- Not Applicable: ${counts.NotApplicable} (System exception or absent component) --- Not Reviewed: ${counts.NotReviewed} (Can only be tested manually at this time)`;
}
exports.createDescription = createDescription;
function createAssumeRolePolicyDocument(layersOfControl, segment) {
    const segmentOverview = createNote(segment);
    const code = layersOfControl.map((layer) => createCode(layer)).join('\n\n');
    return `${code}\n\n${segmentOverview}`;
}
exports.createAssumeRolePolicyDocument = createAssumeRolePolicyDocument;
function sliceIntoChunks(arr, chunkSize) {
    const res = [];
    for (let i = 0; i < arr.length; i += chunkSize) {
        const chunk = arr.slice(i, i + chunkSize);
        res.push(chunk);
    }
    return res;
}
exports.sliceIntoChunks = sliceIntoChunks;
function cleanText(text) {
    if (text) {
        return text.replace(/  +/g, ' ').replace(/\r?\n|\r/g, ' ');
    }
    else {
        return undefined;
    }
}
exports.cleanText = cleanText;
function getAllLayers(hdf, knownControl) {
    if (hdf.profiles.length === 1) {
        return [
            {
                ...knownControl,
                profileInfo: {
                    ...lodash_1.default.omit(hdf.profiles[0], 'controls')
                }
            }
        ];
    }
    else {
        const foundControls = [];
        hdf.profiles.forEach((profile) => {
            profile.controls.forEach((control) => {
                if (control.id === knownControl.id) {
                    foundControls.push({
                        ...control,
                        profileInfo: { ...lodash_1.default.omit(profile, 'controls') }
                    });
                }
            });
        });
        return foundControls;
    }
}
exports.getAllLayers = getAllLayers;
function createNote(segment) {
    if (segment.message) {
        return `Test Description: ${segment.code_desc} --- Test Result: ${segment.message}`;
    }
    else if (segment.skip_message) {
        return `Test Description: ${segment.code_desc} --- Skip Message: ${segment.skip_message}`;
    }
    else {
        return `Test Description: ${segment.code_desc}`;
    }
}
exports.createNote = createNote;
function createCode(control) {
    var _a, _b;
    return `=========================================================\n# Profile name: ${(_a = control.profileInfo) === null || _a === void 0 ? void 0 : _a.name}\n=========================================================\n\n${(_b = control.code) === null || _b === void 0 ? void 0 : _b.replace(/\\\"/g, '"')}`;
}
exports.createCode = createCode;
function setupId(control, context) {
    const target = context === null || context === void 0 ? void 0 : context.ioptions.target.toLowerCase().trim();
    const name = context === null || context === void 0 ? void 0 : context.data.profiles[0].name;
    return `${target}/${name}/${control.id}/finding/${(0, crypto_1.createHash)('sha256')
        .update(control.id + control.result.code_desc)
        .digest('hex')}`;
}
exports.setupId = setupId;
function setupProductARN(_val, context) {
    return `arn:aws:securityhub:${context === null || context === void 0 ? void 0 : context.ioptions.region}:${context === null || context === void 0 ? void 0 : context.ioptions.awsAccountId}:product/${context === null || context === void 0 ? void 0 : context.ioptions.awsAccountId}/default`;
}
exports.setupProductARN = setupProductARN;
function setupAwsAcct(_val, context) {
    return context === null || context === void 0 ? void 0 : context.ioptions.awsAccountId;
}
exports.setupAwsAcct = setupAwsAcct;
function setupCreated(control) {
    return control.result.start_time || new Date().toISOString();
}
exports.setupCreated = setupCreated;
function setupRegion(_val, context) {
    return context === null || context === void 0 ? void 0 : context.ioptions.region;
}
exports.setupRegion = setupRegion;
function setupUpdated(_control, context) {
    const time = new Date();
    time.setMilliseconds(time.getMilliseconds() + ((context === null || context === void 0 ? void 0 : context.index) || 0));
    return time.toISOString();
}
exports.setupUpdated = setupUpdated;
function setupGeneratorId(control, context) {
    return `arn:aws:securityhub:us-east-2:${context === null || context === void 0 ? void 0 : context.ioptions.awsAccountId}:ruleset/set/${context === null || context === void 0 ? void 0 : context.data.profiles[0].name}/rule/${control.id}`;
}
exports.setupGeneratorId = setupGeneratorId;
function setupTitle(control) {
    const nistTags = control.tags.nist ? `[${control.tags.nist.join(', ')}]` : '';
    return lodash_1.default.truncate(`${control.id} | ${nistTags} | ${cleanText(control.title)}`, { length: 256 });
}
exports.setupTitle = setupTitle;
function setupDescr(control) {
    var _a, _b, _c, _d;
    const checktext = ((_b = (_a = control.descriptions) === null || _a === void 0 ? void 0 : _a.find((description) => description.label === 'check')) === null || _b === void 0 ? void 0 : _b.data) ||
        control.tags['check'] ||
        'Check not available';
    const currentVal = lodash_1.default.truncate(cleanText(`${control.desc} -- Check Text: ${checktext}`), { length: 1024, omission: '[SEE FULL TEXT IN AssumeRolePolicyDocument]' });
    const caveat = (_d = (_c = control.descriptions) === null || _c === void 0 ? void 0 : _c.find((description) => description.label === 'caveat')) === null || _d === void 0 ? void 0 : _d.data;
    if (caveat) {
        return lodash_1.default.truncate(`Caveat: ${cleanText(caveat)} --- Description: ${currentVal}`, { length: 1024, omission: '' });
    }
    return currentVal;
}
exports.setupDescr = setupDescr;
function setupSevLabel(control, context) {
    return (context === null || context === void 0 ? void 0 : context.impactMapping.get(control.impact)) || 'INFORMATIONAL';
}
exports.setupSevLabel = setupSevLabel;
function setupSevOriginal(control) {
    return `${control.impact}`;
}
exports.setupSevOriginal = setupSevOriginal;
function createProfileInfo(hdf) {
    const typesArr = [];
    const targets = [
        'name',
        'version',
        'sha256',
        'title',
        'maintainer',
        'summary',
        'license',
        'copyright',
        'copyright_email'
    ];
    hdf === null || hdf === void 0 ? void 0 : hdf.profiles.forEach((layer) => {
        const profileInfos = [];
        targets.forEach((target) => {
            const value = lodash_1.default.get(layer, target);
            if (typeof value === 'string') {
                profileInfos.push({ [target]: value });
            }
        });
        typesArr.push(`Profile/Info/${JSON.stringify(profileInfos).replace(/\//g, reverse_asff_mapper_1.TO_ASFF_TYPES_SLASH_REPLACEMENT)}`);
    });
    return typesArr;
}
function createProfileInfoFindingFields(hdf) {
    let typesArr = [];
    hdf.profiles.forEach((profile) => {
        const targets = [
            'version',
            'sha256',
            'maintainer',
            'summary',
            'license',
            'copyright',
            'copyright_email'
        ];
        targets.forEach((target) => {
            const value = lodash_1.default.get(profile, target);
            if (typeof value === 'string') {
                typesArr.push(`${profile.name}/${target}/${value}`);
            }
        });
        const inputs = [];
        profile.attributes.forEach((input) => {
            if (input.options.value) {
                inputs.push({ [input.name]: input.options.value });
            }
        });
        typesArr.push(`${profile.name}/inputs/${JSON.stringify(inputs).replace(/\//g, reverse_asff_mapper_1.TO_ASFF_TYPES_SLASH_REPLACEMENT)}`);
    });
    typesArr = typesArr.slice(0, 50);
    return typesArr;
}
function createSegmentInfo(segment) {
    const typesArr = [];
    const targets = [
        'code_desc',
        'exception',
        'message',
        'resource',
        'run_time',
        'start_time',
        'skip_message',
        'status'
    ];
    targets.forEach((target) => {
        const value = lodash_1.default.get(segment, target);
        if (typeof value === 'string' && value) {
            typesArr.push(`Segment/${target}/${value.replace(/\//g, reverse_asff_mapper_1.TO_ASFF_TYPES_SLASH_REPLACEMENT)}`);
        }
    });
    return typesArr;
}
function createTagInfo(control) {
    const typesArr = [];
    for (const tag in control.tags) {
        if (control) {
            if (tag === 'nist' && Array.isArray(control.tags.nist)) {
                typesArr.push(`Tags/nist/${control.tags.nist.join(', ')}`);
            }
            else if (tag === 'cci' && Array.isArray(control.tags.cci)) {
                typesArr.push(`Tags/cci/${control.tags.cci.join(', ')}`);
            }
            else if (typeof control.tags[tag] === 'string') {
                typesArr.push(`Tags/${tag.replace(/\//g, reverse_asff_mapper_1.TO_ASFF_TYPES_SLASH_REPLACEMENT)}/${control.tags[tag].replace(/\//g, reverse_asff_mapper_1.TO_ASFF_TYPES_SLASH_REPLACEMENT)}`);
            }
            else if (typeof control.tags[tag] === 'object' &&
                Array.isArray(control.tags[tag])) {
                typesArr.push(`Tags/${tag.replace(/\//g, reverse_asff_mapper_1.TO_ASFF_TYPES_SLASH_REPLACEMENT)}/${control.tags[tag]
                    .join(', ')
                    .replace(/\//g, reverse_asff_mapper_1.TO_ASFF_TYPES_SLASH_REPLACEMENT)}`);
            }
        }
    }
    return typesArr;
}
function createDescriptionInfo(control) {
    var _a;
    const typesArr = [];
    (_a = control.descriptions) === null || _a === void 0 ? void 0 : _a.forEach((description) => {
        var _a;
        typesArr.push(`Descriptions/${description.label.replace(/\//g, reverse_asff_mapper_1.TO_ASFF_TYPES_SLASH_REPLACEMENT)}/${(_a = cleanText(description.data)) === null || _a === void 0 ? void 0 : _a.replace(/\//g, reverse_asff_mapper_1.TO_ASFF_TYPES_SLASH_REPLACEMENT)}`);
    });
    return typesArr;
}
function setupFindingType(control, context) {
    const slashSplit = context === null || context === void 0 ? void 0 : context.ioptions.input.split('\\')[(context === null || context === void 0 ? void 0 : context.ioptions.input.split('\\').length) - 1];
    const filename = slashSplit === null || slashSplit === void 0 ? void 0 : slashSplit.split('/')[slashSplit.split('/').length - 1];
    const typesArr = [
        `File/Input/${filename}`,
        `Control/Code/${control.layersOfControl
            .map((layer) => createCode(layer))
            .join('\n\n')
            .replace(/\//g, reverse_asff_mapper_1.TO_ASFF_TYPES_SLASH_REPLACEMENT)}`
    ];
    typesArr.push(...createProfileInfo(context === null || context === void 0 ? void 0 : context.data));
    typesArr.push(...createSegmentInfo(control.result));
    typesArr.push(...createTagInfo(control));
    typesArr.push(...createDescriptionInfo(control));
    return typesArr;
}
exports.setupFindingType = setupFindingType;
function getFixForControl(control) {
    var _a, _b;
    return (((_b = (_a = control.descriptions) === null || _a === void 0 ? void 0 : _a.find((description) => description.label === 'fix')) === null || _b === void 0 ? void 0 : _b.data) ||
        control.tags.fix ||
        'Fix not available');
}
exports.getFixForControl = getFixForControl;
function setupRemRec(control) {
    return lodash_1.default.truncate(cleanText(`${createNote(control.result)} --- Fix: ${getFixForControl(control)}`), { length: 512, omission: '... [SEE FULL TEXT IN AssumeRolePolicyDocument]' });
}
exports.setupRemRec = setupRemRec;
function setupProdFieldCheck(control) {
    var _a, _b;
    const checktext = ((_b = (_a = control.descriptions) === null || _a === void 0 ? void 0 : _a.find((description) => description.label === 'check')) === null || _b === void 0 ? void 0 : _b.data) ||
        control.tags['check'] ||
        'Check not available';
    return lodash_1.default.truncate(checktext, { length: 2048, omission: '' });
}
exports.setupProdFieldCheck = setupProdFieldCheck;
function setupResourcesID(_val, context) {
    return `AWS::::Account:${context === null || context === void 0 ? void 0 : context.ioptions.awsAccountId}`;
}
exports.setupResourcesID = setupResourcesID;
function setupResourcesID2(control) {
    return `${control.id} Validation Code`;
}
exports.setupResourcesID2 = setupResourcesID2;
function setupDetailsAssume(control) {
    return createAssumeRolePolicyDocument(control.layersOfControl, control.result);
}
exports.setupDetailsAssume = setupDetailsAssume;
function setupControlStatus(control) {
    const status = control.result.status === 'skipped'
        ? 'WARNING'
        : control.result.status === 'passed';
    if (typeof status === 'boolean') {
        return status ? 'PASSED' : 'FAILED';
    }
    return status;
}
exports.setupControlStatus = setupControlStatus;
//# sourceMappingURL=transformers.js.map