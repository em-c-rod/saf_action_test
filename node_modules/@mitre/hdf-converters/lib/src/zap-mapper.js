"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZapMapper = void 0;
const inspecjs_1 = require("inspecjs");
const lodash_1 = __importDefault(require("lodash"));
const package_json_1 = require("../package.json");
const base_converter_1 = require("./base-converter");
const CweNistMapping_1 = require("./mappings/CweNistMapping");
const global_1 = require("./utils/global");
const CWE_NIST_MAPPING = new CweNistMapping_1.CweNistMapping();
function filterSite(input, name) {
    if (name) {
        return input.find((element) => lodash_1.default.get(element, '@name') === name);
    }
    else {
        return input.reduce((a, b) => lodash_1.default.get(a, 'alerts').length > lodash_1.default.get(b, 'alerts').length ? a : b);
    }
}
function impactMapping(input) {
    if (typeof input === 'string') {
        const impact = parseInt(input);
        if (0 <= impact && impact <= 1) {
            return 0.3;
        }
        else if (impact === 2) {
            return 0.5;
        }
        else if (impact >= 3) {
            return 0.7;
        }
        else {
            return 0;
        }
    }
    else {
        return 0;
    }
}
function nistTag(cweid) {
    return CWE_NIST_MAPPING.nistFilter([cweid], global_1.DEFAULT_STATIC_CODE_ANALYSIS_NIST_TAGS);
}
function checkText(input) {
    const text = [];
    text.push(lodash_1.default.get(input, 'solution'));
    text.push(lodash_1.default.get(input, 'otherinfo'));
    text.push(lodash_1.default.get(input, 'otherinfo'));
    return text.join('\n');
}
function formatCodeDesc(input) {
    const text = [];
    if (input instanceof Object) {
        Object.keys(input).forEach((key) => {
            text.push(`${key.charAt(0).toUpperCase() + key.slice(1)}: ${lodash_1.default.get(input, key)}`);
        });
    }
    return text.join('\n') + '\n';
}
function deduplicateId(input) {
    const controlId = input.map((element) => {
        return lodash_1.default.get(element, 'id');
    });
    const dupId = (0, lodash_1.default)(controlId)
        .groupBy()
        .pickBy((value) => value.length > 1)
        .keys()
        .value();
    dupId.forEach((id) => {
        let index = 1;
        input
            .filter((element) => lodash_1.default.get(element, 'id') === id)
            .forEach((element) => {
            if (element instanceof Object) {
                lodash_1.default.set(element, 'id', `${id}.${index.toString()}`);
            }
            index++;
        });
    });
    return input;
}
class ZapMapper extends base_converter_1.BaseConverter {
    constructor(zapJson, name) {
        super(lodash_1.default.set(JSON.parse(zapJson), 'site', filterSite(lodash_1.default.get(JSON.parse(zapJson), 'site'), name)), false);
        this.mappings = {
            platform: {
                name: 'Heimdall Tools',
                release: package_json_1.version,
                target_id: ''
            },
            version: package_json_1.version,
            statistics: {
                duration: null
            },
            profiles: [
                {
                    name: 'OWASP ZAP Scan',
                    version: { path: '@version' },
                    title: {
                        path: 'site.@host',
                        transformer: (input) => {
                            return `OWASP ZAP Scan of Host: ${input}`;
                        }
                    },
                    maintainer: null,
                    summary: {
                        path: 'site.@host',
                        transformer: (input) => {
                            return `OWASP ZAP Scan of Host: ${input}`;
                        }
                    },
                    license: null,
                    copyright: null,
                    copyright_email: null,
                    supports: [],
                    attributes: [],
                    depends: [],
                    groups: [],
                    status: 'loaded',
                    controls: [
                        {
                            path: 'site.alerts',
                            arrayTransformer: deduplicateId,
                            id: { path: 'pluginid' },
                            title: { path: 'name' },
                            desc: { path: 'desc', transformer: base_converter_1.parseHtml },
                            impact: { path: 'riskcode', transformer: impactMapping },
                            tags: {
                                nist: { path: 'cweid', transformer: nistTag },
                                cweid: { path: 'cweid' },
                                wascid: { path: 'wascid' },
                                sourceid: { path: 'sourceid' },
                                confidence: { path: 'confidence' },
                                riskdesc: { path: 'riskdesc' },
                                check: { transformer: checkText }
                            },
                            descriptions: [],
                            refs: [],
                            source_location: {},
                            code: '',
                            results: [
                                {
                                    path: 'instances',
                                    status: inspecjs_1.ExecJSON.ControlResultStatus.Failed,
                                    code_desc: { transformer: formatCodeDesc },
                                    run_time: 0,
                                    start_time: { path: '$.@generated' }
                                }
                            ]
                        }
                    ],
                    sha256: ''
                }
            ]
        };
    }
    setMappings(customMappings) {
        super.setMappings(customMappings);
    }
    toHdf() {
        const original = super.toHdf();
        lodash_1.default.get(original, 'profiles').forEach((profile) => {
            lodash_1.default.get(profile, 'controls').forEach((control) => {
                lodash_1.default.set(control, 'results', lodash_1.default.get(control, 'results').filter(function (element, index, self) {
                    return index === self.indexOf(element);
                }));
            });
        });
        return original;
    }
}
exports.ZapMapper = ZapMapper;
//# sourceMappingURL=zap-mapper.js.map