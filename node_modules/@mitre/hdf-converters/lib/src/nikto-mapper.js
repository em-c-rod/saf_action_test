"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NiktoMapper = void 0;
const inspecjs_1 = require("inspecjs");
const lodash_1 = __importDefault(require("lodash"));
const package_json_1 = require("../package.json");
const base_converter_1 = require("./base-converter");
const NiktoNistMapping_1 = require("./mappings/NiktoNistMapping");
const NIKTO_NIST_MAPPING = new NiktoNistMapping_1.NiktoNistMapping();
function formatTitle(file) {
    return `Nikto Target: ${projectName(file)}`;
}
function projectName(file) {
    return `Host: ${lodash_1.default.get(file, 'host')} Port: ${lodash_1.default.get(file, 'port')}`;
}
function formatCodeDesc(vulnerability) {
    return `URL : ${lodash_1.default.get(vulnerability, 'url')} Method: ${lodash_1.default.get(vulnerability, 'method')}`;
}
function nistTag(id) {
    return NIKTO_NIST_MAPPING.nistTag(id);
}
class NiktoMapper extends base_converter_1.BaseConverter {
    constructor(niktoJson) {
        super(JSON.parse(niktoJson));
        this.mappings = {
            platform: {
                name: 'Heimdall Tools',
                release: package_json_1.version,
                target_id: { transformer: projectName }
            },
            version: package_json_1.version,
            statistics: {
                duration: null
            },
            profiles: [
                {
                    name: 'Nikto Website Scanner',
                    version: '',
                    title: { transformer: formatTitle },
                    maintainer: null,
                    summary: {
                        path: 'banner',
                        transformer: (input) => {
                            return `Banner: ${input}`;
                        }
                    },
                    license: null,
                    copyright: null,
                    copyright_email: null,
                    supports: [],
                    attributes: [],
                    depends: [],
                    groups: [],
                    status: 'loaded',
                    controls: [
                        {
                            path: 'vulnerabilities',
                            key: 'id',
                            tags: {
                                nist: { path: 'id', transformer: nistTag },
                                Ã¶svdb: { path: 'OSVDB' }
                            },
                            descriptions: [],
                            refs: [],
                            source_location: {},
                            title: { path: 'msg' },
                            id: { path: 'id' },
                            desc: { path: 'msg' },
                            impact: 0.5,
                            code: '',
                            results: [
                                {
                                    status: inspecjs_1.ExecJSON.ControlResultStatus.Failed,
                                    code_desc: { transformer: formatCodeDesc },
                                    run_time: 0,
                                    start_time: ''
                                }
                            ]
                        }
                    ],
                    sha256: ''
                }
            ]
        };
    }
}
exports.NiktoMapper = NiktoMapper;
//# sourceMappingURL=nikto-mapper.js.map