import { ExecJSON } from 'inspecjs';
import { BaseConverter } from '../base-converter';
export declare enum SpecialCasing {
    FirewallManager = "AWS Firewall Manager",
    Prowler = "Prowler",
    SecurityHub = "AWS Security Hub",
    Trivy = "Aqua Trivy",
    HDF2ASFF = "MITRE SAF HDF2ASFF",
    Default = "Default"
}
export declare function consolidate(context: ASFFMapper, input: unknown[], file: Record<string, unknown>): ExecJSON.Control[];
export declare class ASFFMapper extends BaseConverter {
    meta: Record<string, string | undefined> | undefined;
    supportingDocs: Map<SpecialCasing, Record<string, Record<string, unknown>>>;
    defaultMappings: {
        platform: {
            name: string;
            release: string;
            target_id: {
                transformer: (record: Record<string, unknown>) => string;
            };
        };
        version: string;
        statistics: {
            duration: null;
        };
        profiles: {
            name: {
                transformer: () => string;
            };
            version: string;
            title: {
                transformer: () => string;
            };
            maintainer: null;
            summary: string;
            license: null;
            copyright: null;
            copyright_email: null;
            supports: never[];
            attributes: never[];
            depends: never[];
            groups: never[];
            status: string;
            controls: {
                path: string;
                key: string;
                arrayTransformer: (input: unknown[], file: Record<string, unknown>) => ExecJSON.Control[];
                id: {
                    transformer: (finding: Record<string, unknown>) => string;
                };
                title: {
                    transformer: (finding: Record<string, unknown>) => string;
                };
                desc: {
                    path: string;
                    transformer: (input: string) => string;
                };
                impact: {
                    transformer: (finding: Record<string, unknown>) => number;
                };
                tags: {
                    transformer: (finding: Record<string, unknown>) => Record<string, unknown> | undefined;
                    nist: {
                        transformer: (finding: Record<string, unknown>) => string[];
                    };
                };
                descriptions: {
                    data: {
                        path: string;
                        transformer: (input: Record<string, string>) => string;
                    };
                    label: string;
                }[];
                refs: {
                    transformer: (finding: Record<string, unknown>) => Record<string, unknown>;
                }[];
                source_location: {};
                code: string;
                results: {
                    status: {
                        transformer: (finding: Record<string, unknown>) => ExecJSON.ControlResultStatus;
                    };
                    code_desc: {
                        transformer: (finding: Record<string, unknown>) => string;
                    };
                    transformer: (finding: Record<string, unknown>) => Record<string, unknown>;
                    start_time: {
                        transformer: (finding: Record<string, unknown>) => string;
                    };
                }[];
            }[];
            sha256: string;
        }[];
    };
    statusReason(finding: unknown): string | undefined;
    setMappings(): void;
    constructor(asff: Record<string, unknown>, supportingDocs: Map<SpecialCasing, Record<string, Record<string, unknown>>>, meta?: Record<string, string | undefined> | undefined);
}
export declare class ASFFResults {
    data: Record<string, Record<string, unknown>[]>;
    meta: Record<string, string | undefined> | undefined;
    supportingDocs: Map<SpecialCasing, Record<string, Record<string, unknown>>>;
    constructor(asffJson: string, securityhubStandardsJsonArray?: undefined | string[], meta?: Record<string, string | undefined> | undefined);
    toHdf(): Record<string, ExecJSON.Execution>;
}
