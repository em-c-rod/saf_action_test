"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JfrogXrayMapper = void 0;
const inspecjs_1 = require("inspecjs");
const lodash_1 = __importDefault(require("lodash"));
const package_json_1 = require("../package.json");
const base_converter_1 = require("./base-converter");
const CweNistMapping_1 = require("./mappings/CweNistMapping");
const global_1 = require("./utils/global");
const IMPACT_MAPPING = new Map([
    ['high', 0.7],
    ['medium', 0.5],
    ['low', 0.3]
]);
const CWE_NIST_MAPPING = new CweNistMapping_1.CweNistMapping();
function hashId(vulnerability) {
    if (lodash_1.default.get(vulnerability, 'id') === '') {
        return (0, base_converter_1.generateHash)(lodash_1.default.get(vulnerability, 'summary').toString(), 'md5');
    }
    else {
        return lodash_1.default.get(vulnerability, 'id');
    }
}
function formatDesc(vulnerability) {
    const text = [];
    if (lodash_1.default.has(vulnerability, 'description')) {
        text.push(lodash_1.default.get(vulnerability, 'description').toString());
    }
    if (lodash_1.default.has(vulnerability, 'cves')) {
        const re1 = /":/gi;
        const re2 = /,/gi;
        text.push(`cves: ${JSON.stringify(lodash_1.default.get(vulnerability, 'cves'))
            .replace(re1, '"=>')
            .replace(re2, ', ')}`);
    }
    return text.join('<br>');
}
function formatCodeDesc(vulnerability) {
    const codeDescArray = [];
    const re = /,/gi;
    if (lodash_1.default.has(vulnerability, 'source_comp_id')) {
        codeDescArray.push(`source_comp_id : ${lodash_1.default.get(vulnerability, 'source_comp_id')}`);
    }
    else {
        codeDescArray.push('source_comp_id : ');
    }
    if (lodash_1.default.has(vulnerability, 'component_versions.vulnerable_versions')) {
        codeDescArray.push(`vulnerable_versions : ${JSON.stringify(lodash_1.default.get(vulnerability, 'component_versions.vulnerable_versions'))}`);
    }
    else {
        codeDescArray.push('vulnerable_versions : ');
    }
    if (lodash_1.default.has(vulnerability, 'component_versions.fixed_versions')) {
        codeDescArray.push(`fixed_versions : ${JSON.stringify(lodash_1.default.get(vulnerability, 'component_versions.fixed_versions'))}`);
    }
    else {
        codeDescArray.push('fixed_versions : ');
    }
    if (lodash_1.default.has(vulnerability, 'issue_type')) {
        codeDescArray.push(`issue_type : ${lodash_1.default.get(vulnerability, 'issue_type')}`);
    }
    else {
        codeDescArray.push('issue_type : ');
    }
    if (lodash_1.default.has(vulnerability, 'provider')) {
        codeDescArray.push(`provider : ${lodash_1.default.get(vulnerability, 'provider')}`);
    }
    else {
        codeDescArray.push('provider : ');
    }
    return codeDescArray.join('\n').replace(re, ', ');
}
function parseIdentifier(identifier) {
    const output = [];
    if (Array.isArray(identifier)) {
        identifier.forEach((element) => {
            if (element.split('CWE-')[1]) {
                output.push(element.split('CWE-')[1]);
            }
        });
    }
    return output;
}
function nistTag(identifier) {
    const identifiers = parseIdentifier(identifier);
    return CWE_NIST_MAPPING.nistFilter(identifiers, global_1.DEFAULT_STATIC_CODE_ANALYSIS_NIST_TAGS);
}
class JfrogXrayMapper extends base_converter_1.BaseConverter {
    constructor(xrayJson) {
        super(JSON.parse(xrayJson), true);
        this.mappings = {
            platform: {
                name: 'Heimdall Tools',
                release: package_json_1.version,
                target_id: ''
            },
            version: package_json_1.version,
            statistics: {
                duration: null
            },
            profiles: [
                {
                    name: 'JFrog Xray Scan',
                    version: '',
                    title: 'JFrog Xray Scan',
                    maintainer: null,
                    summary: 'Continuous Security and Universal Artifact Analysis',
                    license: null,
                    copyright: null,
                    copyright_email: null,
                    supports: [],
                    attributes: [],
                    depends: [],
                    groups: [],
                    status: 'loaded',
                    controls: [
                        {
                            path: 'data',
                            key: 'id',
                            tags: {
                                nist: {
                                    path: 'component_versions.more_details.cves[0].cwe',
                                    transformer: nistTag
                                },
                                cweid: {
                                    path: 'component_versions.more_details.cves[0].cwe',
                                    transformer: parseIdentifier
                                }
                            },
                            descriptions: [],
                            refs: [],
                            source_location: {},
                            id: { transformer: hashId },
                            title: { path: 'summary' },
                            desc: {
                                path: 'component_versions.more_details',
                                transformer: formatDesc
                            },
                            impact: {
                                path: 'severity',
                                transformer: (0, base_converter_1.impactMapping)(IMPACT_MAPPING)
                            },
                            code: '',
                            results: [
                                {
                                    status: inspecjs_1.ExecJSON.ControlResultStatus.Failed,
                                    code_desc: { transformer: formatCodeDesc },
                                    run_time: 0,
                                    start_time: ''
                                }
                            ]
                        }
                    ],
                    sha256: ''
                }
            ]
        };
    }
    setMappings(customMappings) {
        super.setMappings(customMappings);
    }
}
exports.JfrogXrayMapper = JfrogXrayMapper;
//# sourceMappingURL=jfrog-xray-mapper.js.map