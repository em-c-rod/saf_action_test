"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const json_colorizer_1 = tslib_1.__importDefault(require("json-colorizer"));
const core_1 = require("@oclif/core");
const apiConnection_1 = require("../../../utils/emasser/apiConnection");
const emass_client_1 = require("@mitre/emass_client");
const outputFormatter_1 = require("../../../utils/emasser/outputFormatter");
const outputError_1 = require("../../../utils/emasser/outputError");
const utilities_1 = require("../../../utils/emasser/utilities");
const endpoint = 'roles';
class EmasserGetRoles extends core_1.Command {
    async run() {
        const { args, flags } = await this.parse(EmasserGetRoles);
        const apiCxn = new apiConnection_1.ApiConnection();
        const getSystemRoles = new emass_client_1.SystemRolesApi(apiCxn.configuration, apiCxn.basePath, apiCxn.axiosInstances);
        if (args.all === 'all') {
            // Order is important here
            getSystemRoles.getSystemRoles().then((response) => {
                console.log((0, json_colorizer_1.default)((0, outputFormatter_1.outputFormat)(response)));
            }).catch((error) => console.error((0, json_colorizer_1.default)((0, outputError_1.outputError)(error))));
        }
        else if (args.all === 'byCategory') {
            // Order is important here
            getSystemRoles.getSystemRolesByCategoryId(flags.roleCategory, flags.role, flags.policy, flags.includeDecommissioned).then((response) => {
                console.log((0, json_colorizer_1.default)((0, outputFormatter_1.outputFormat)(response)));
            }).catch((error) => console.error((0, json_colorizer_1.default)((0, outputError_1.outputError)(error))));
        }
        else {
            throw this.error;
        }
    }
    async catch(error) {
        if (error.message) {
            this.error(error);
        }
        else {
            const suggestions = 'get roles [-h or --help]\n\tget roles all\n\tget roles byCategory';
            this.warn('Invalid arguments\nTry this:\n\t' + suggestions);
        }
    }
}
exports.default = EmasserGetRoles;
EmasserGetRoles.usage = '<%= command.id %> [ARGUMENTS]';
EmasserGetRoles.description = (0, utilities_1.getDescriptionForEndpoint)(process.argv, endpoint);
EmasserGetRoles.examples = (0, utilities_1.getExamplesForEndpoint)(process.argv, endpoint);
EmasserGetRoles.flags = {
    help: core_1.Flags.help({ char: 'h', description: 'Show emasser CLI help for the GET Roles endpoint' }),
    ...(0, utilities_1.getFlagsForEndpoint)(process.argv), // skipcq: JS-0349
};
EmasserGetRoles.args = [
    { name: 'all', description: 'Retrieves all available system roles', required: false },
    { name: 'byCategory', description: 'Retrieves role(s) - filtered by [options] params', required: false },
];
