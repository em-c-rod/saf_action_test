"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const command_1 = require("@oclif/command");
const fs_1 = tslib_1.__importDefault(require("fs"));
const hdf_converters_1 = require("@mitre/hdf-converters");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const global_1 = require("../../utils/global");
class Snyk2HDF extends command_1.Command {
    async run() {
        const { flags } = this.parse(Snyk2HDF);
        const converter = new hdf_converters_1.SnykResults(fs_1.default.readFileSync(flags.input, 'utf-8'));
        const result = converter.toHdf();
        if (Array.isArray(result)) {
            for (const element of result) {
                fs_1.default.writeFileSync(`${flags.output.replace(/.json/gi, '')}-${lodash_1.default.get(element, 'platform.target_id')}.json`, JSON.stringify(element));
            }
        }
        else {
            fs_1.default.writeFileSync((0, global_1.checkSuffix)(flags.output), JSON.stringify(result));
        }
    }
}
exports.default = Snyk2HDF;
Snyk2HDF.usage = 'convert:snyk2hdf -i, --input=JSON -o, --output=OUTPUT';
Snyk2HDF.description = 'Translate a Snyk results JSON file into a Heimdall Data Format JSON file\nA separate HDF JSON is generated for each project reported in the Snyk Report.';
Snyk2HDF.examples = ['saf convert:snyk2hdf -i snyk_results.json -o output-file-prefix'];
Snyk2HDF.flags = {
    help: command_1.flags.help({ char: 'h' }),
    input: command_1.flags.string({ char: 'i', required: true }),
    output: command_1.flags.string({ char: 'o', required: true }),
};
