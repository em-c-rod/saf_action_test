"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const fs_1 = tslib_1.__importDefault(require("fs"));
const hdf_converters_1 = require("@mitre/hdf-converters");
const global_1 = require("../../utils/global");
class ASFF2HDF extends core_1.Command {
    async run() {
        const { flags } = await this.parse(ASFF2HDF);
        let securityhub;
        if (flags.securityhub) {
            securityhub = flags.securityhub.map(file => fs_1.default.readFileSync(file, 'utf-8'));
        }
        const converter = new hdf_converters_1.ASFFMapper(fs_1.default.readFileSync(flags.input, 'utf-8'), securityhub);
        fs_1.default.writeFileSync((0, global_1.checkSuffix)(flags.output), JSON.stringify(converter.toHdf()));
    }
}
exports.default = ASFF2HDF;
ASFF2HDF.usage = 'convert asff2hdf -i <asff-finding-json> [--securityhub <standard-1-json> ... <standard-n-json>] -o <hdf-scan-results-json>';
ASFF2HDF.description = 'Translate a AWS Security Finding Format JSON into a Heimdall Data Format JSON file';
ASFF2HDF.examples = ['saf convert asff2hdf -i asff-findings.json -o output-file-name.json',
    'saf convert asff2hdf -i asff-findings.json --sh <standard-1-json> ... <standard-n-json> -o output-hdf-name.json'];
ASFF2HDF.flags = {
    help: core_1.Flags.help({ char: 'h' }),
    input: core_1.Flags.string({ char: 'i', required: true }),
    securityhub: core_1.Flags.string({ required: false, multiple: true }),
    output: core_1.Flags.string({ char: 'o', required: true }),
};
