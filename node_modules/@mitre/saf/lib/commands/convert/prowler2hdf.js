"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const fs_1 = tslib_1.__importDefault(require("fs"));
const hdf_converters_1 = require("@mitre/hdf-converters");
const global_1 = require("../../utils/global");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const path_1 = tslib_1.__importDefault(require("path"));
class Prowler2HDF extends core_1.Command {
    async run() {
        const { flags } = await this.parse(Prowler2HDF);
        const data = fs_1.default.readFileSync(flags.input, 'utf8');
        (0, global_1.checkInput)({ data: data, filename: flags.input }, 'asff', 'Prowler-derived AWS Security Finding Format results');
        const converter = new hdf_converters_1.ASFFResults(data);
        const results = converter.toHdf();
        // Create output folder if not exists
        if (!fs_1.default.existsSync(flags.output)) {
            fs_1.default.mkdirSync(flags.output);
        }
        lodash_1.default.forOwn(results, (result, filename) => {
            fs_1.default.writeFileSync(path_1.default.join(flags.output, (0, global_1.checkSuffix)(filename)), JSON.stringify(result));
        });
    }
}
exports.default = Prowler2HDF;
Prowler2HDF.usage = 'convert prowler2hdf -i <prowler-finding-json> -o <hdf-output-folder>';
Prowler2HDF.description = 'Translate a Prowler-derived AWS Security Finding Format results from concatenated JSON blobs into a Heimdall Data Format JSON file';
Prowler2HDF.examples = ['saf convert prowler2hdf -i prowler-asff.json -o output-folder'];
Prowler2HDF.flags = {
    help: core_1.Flags.help({ char: 'h' }),
    input: core_1.Flags.string({ char: 'i', required: true, description: 'Input Prowler ASFF JSON file' }),
    output: core_1.Flags.string({ char: 'o', required: true, description: 'Output folder' }),
};
