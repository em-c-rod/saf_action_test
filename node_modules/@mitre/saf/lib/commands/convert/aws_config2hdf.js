"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const command_1 = require("@oclif/command");
const fs_1 = (0, tslib_1.__importDefault)(require("fs"));
const hdf_converters_1 = require("@mitre/hdf-converters");
const global_1 = require("../../utils/global");
class AWSConfig2HDF extends command_1.Command {
    // Refs may not be defined if no resources were found
    ensureRefs(output) {
        return {
            ...output,
            profiles: output.profiles.map(profile => {
                return { ...profile,
                    controls: profile.controls.map(control => {
                        if (!control.refs || !control.results) {
                            return {
                                ...control,
                                refs: [],
                                results: [],
                            };
                        }
                        return control;
                    }),
                };
            }),
        };
    }
    async run() {
        const { flags } = this.parse(AWSConfig2HDF);
        const converter = flags.accessKeyId && flags.secretAccessKey ? new hdf_converters_1.AwsConfigMapper({
            credentials: {
                accessKeyId: flags.accessKeyId || '',
                secretAccessKey: flags.secretAccessKey || '',
                sessionToken: flags.sessionToken,
            },
            region: flags.region,
        }, !flags.insecure) : new hdf_converters_1.AwsConfigMapper({ region: flags.region }, !flags.insecure);
        fs_1.default.writeFileSync((0, global_1.checkSuffix)(flags.output), JSON.stringify(this.ensureRefs(await converter.toHdf())));
    }
}
exports.default = AWSConfig2HDF;
AWSConfig2HDF.usage = 'convert:aws_config2hdf -a, --accessKeyId=accessKeyId -r, --region=region -s, --secretAccessKey=secretAccessKey -t, --sessionToken=sessionToken -o, --output=OUTPUT';
AWSConfig2HDF.description = 'Pull Configuration findings from AWS Config and convert into a Heimdall Data Format JSON file';
AWSConfig2HDF.examples = ['saf convert:aws_config2hdf -a ABCDEFGHIJKLMNOPQRSTUV -s +4NOT39A48REAL93SECRET934 -r us-east-1 -o output-hdf-name.json'];
AWSConfig2HDF.flags = {
    help: command_1.flags.help({ char: 'h' }),
    accessKeyId: command_1.flags.string({ char: 'a', required: false }),
    secretAccessKey: command_1.flags.string({ char: 's', required: false }),
    sessionToken: command_1.flags.string({ char: 't', required: false }),
    region: command_1.flags.string({ char: 'r', required: true }),
    insecure: command_1.flags.boolean({ char: 'i', required: false, default: false, description: 'Disable SSL verification, this is insecure.' }),
    output: command_1.flags.string({ char: 'o', required: true }),
};
