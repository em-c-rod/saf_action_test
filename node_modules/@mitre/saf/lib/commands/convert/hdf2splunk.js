"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const command_1 = require("@oclif/command");
const hdf_converters_1 = require("@mitre/hdf-converters");
const global_1 = require("../../utils/global");
const fs_1 = (0, tslib_1.__importDefault)(require("fs"));
class HDF2Splunk extends command_1.Command {
    async run() {
        const { flags } = this.parse(HDF2Splunk);
        const inputFile = JSON.parse(fs_1.default.readFileSync(flags.input, 'utf-8'));
        const guid = await new hdf_converters_1.FromHDFToSplunkMapper(inputFile).toSplunk({
            host: flags.host,
            port: flags.port,
            protocol: flags.protocol,
            token: flags.token,
            index: flags.index,
        }, (0, global_1.convertFullPathToFilename)(flags.input));
        console.log(`Uploaded into splunk successfully, to find this data search for:\n\n\t meta.guid="${guid}"`);
    }
}
exports.default = HDF2Splunk;
HDF2Splunk.usage = 'hdf2splunk -i, --input=FILE -H, --host -P, --port -p, --protocol -t, --token -i, --index';
HDF2Splunk.description = 'Translate and upload a Heimdall Data Format JSON file into a Splunk server via its HTTP Event Collector';
HDF2Splunk.flags = {
    help: command_1.flags.help({ char: 'h' }),
    input: command_1.flags.string({ char: 'i', required: true, description: 'Input HDF file' }),
    host: command_1.flags.string({ char: 'H', required: true, description: 'Splunk Host' }),
    port: command_1.flags.integer({ char: 'P', required: false, default: 8088 }),
    protocol: command_1.flags.string({ char: 'p', required: false, default: 'https' }),
    token: command_1.flags.string({ char: 't', required: true, description: 'Your HTTP event collector token' }),
    index: command_1.flags.string({ char: 'I', required: false, description: 'Splunk index to import data into (if none provided then Splunk-default will be used)' }),
};
HDF2Splunk.examples = ['saf convert:hdf2splunk -i rhel7-results.json -H 127.0.0.1 -P 8088 -t YOUR-HEC-TOKEN'];
