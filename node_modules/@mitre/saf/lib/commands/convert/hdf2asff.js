"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const command_1 = require("@oclif/command");
const fs = (0, tslib_1.__importStar)(require("fs"));
const hdf_converters_1 = require("@mitre/hdf-converters");
const global_1 = require("../../utils/global");
const path_1 = (0, tslib_1.__importDefault)(require("path"));
class HDF2ASFF extends command_1.Command {
    async run() {
        const { flags } = this.parse(HDF2ASFF);
        const converter = new hdf_converters_1.FromHdfToAsffMapper(JSON.parse(fs.readFileSync(flags.input, { encoding: 'utf-8' })), {
            awsAccountId: flags.accountId,
            region: flags.region,
            target: flags.target,
            input: flags.input,
        });
        const convertedSlices = (0, global_1.sliceIntoChunks)(converter.toAsff(), 100);
        const outputFolder = flags.output.replace('.json', '');
        fs.mkdirSync(outputFolder);
        if (convertedSlices.length === 1) {
            const outfilePath = path_1.default.join(outputFolder, (0, global_1.checkSuffix)(flags.output));
            fs.writeFileSync(outfilePath, JSON.stringify(convertedSlices[0]));
        }
        else {
            convertedSlices.forEach((slice, index) => {
                const outfilePath = path_1.default.join(outputFolder, `${(0, global_1.checkSuffix)(flags.output).replace('.json', '')}.p${index}.json`);
                fs.writeFileSync(outfilePath, JSON.stringify(slice));
            });
        }
    }
}
exports.default = HDF2ASFF;
HDF2ASFF.usage = 'convert:hdf2asff -i, --input=HDF-JSON -o, --output=ASFF-JSON';
HDF2ASFF.description = 'Translate a Heimdall Data Format JSON file into AWS Security Findings Format JSON file(s)';
HDF2ASFF.examples = ['saf convert:hdf2asff -i rhel7.scan.json -a 123456789 -r us-east-1 -t rhel7_example_host -o rhel7.asff.json'];
HDF2ASFF.flags = {
    help: command_1.flags.help({ char: 'h' }),
    accountId: command_1.flags.string({ char: 'a', required: true, description: 'AWS Account ID' }),
    region: command_1.flags.string({ char: 'r', required: true, description: 'SecurityHub Region' }),
    input: command_1.flags.string({ char: 'i', required: true, description: 'Input HDF JSON File' }),
    target: command_1.flags.string({ char: 't', required: true, description: 'Unique name for target to track findings across time' }),
    output: command_1.flags.string({ char: 'o', required: true, description: 'Output ASFF JSON Folder' }),
};
