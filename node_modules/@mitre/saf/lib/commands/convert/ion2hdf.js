"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const hdf_converters_1 = require("@mitre/hdf-converters");
const core_1 = require("@oclif/core");
const logging_1 = require("../../utils/logging");
const fs_1 = tslib_1.__importDefault(require("fs"));
const path_1 = tslib_1.__importDefault(require("path"));
class ION2HDF extends core_1.Command {
    async run() {
        const { flags } = await this.parse(ION2HDF);
        const logger = (0, logging_1.createWinstonLogger)('Ion2HDF', flags.logLevel);
        logger.debug('Creating Ion Channel API Client');
        const apiClient = new hdf_converters_1.IonChannelAPIMapper(flags.apiKey);
        logger.debug(`Setting team to ${flags.teamName}`);
        await apiClient.setTeam(flags.teamName);
        logger.debug(`Set team to ID ${apiClient.teamId}`);
        if (flags.allProjects) {
            fs_1.default.mkdirSync(flags.output);
            const availableProjects = await apiClient.getProjects();
            for (const project of availableProjects) {
                logger.info(`Pulling findings from ${project.name}`);
                apiClient.projectId = project.id;
                apiClient.analysisId = project.analysis_summary.analysis_id;
                fs_1.default.writeFileSync(path_1.default.join(flags.output, project.name + '.json'), JSON.stringify(await apiClient.toHdf()));
            }
        }
        else if (Array.isArray(flags.project)) {
            fs_1.default.mkdirSync(flags.output);
            for (const projectName of flags.project) {
                logger.info(`Pulling findings from ${projectName}`);
                await apiClient.setProject(projectName);
                logger.debug(`Set project ID ${apiClient.projectId}`);
                fs_1.default.writeFileSync(path_1.default.join(flags.output, projectName + '.json'), JSON.stringify(await apiClient.toHdf()));
            }
        }
        else {
            throw new TypeError('Please provide either list of projects or use --allProjects');
        }
    }
}
exports.default = ION2HDF;
ION2HDF.usage = 'convert ion2hdf -a, --apiKey -t, --team <team-name> -o, --output <output-folder> -p, --project <project-name> -A, --allProjects (true/false)';
ION2HDF.description = 'Pull and translate SBOM data from Ion Channel into Heimdall Data Format';
ION2HDF.flags = {
    help: core_1.Flags.help({ char: 'h' }),
    apiKey: core_1.Flags.string({
        char: 'a',
        description: 'API Key from Ion Channel user settings',
        required: true,
    }),
    teamName: core_1.Flags.string({
        char: 't',
        description: 'Your team name that contains the project(s) you would like to pull data from',
        required: true,
    }),
    output: core_1.Flags.string({
        char: 'o',
        required: true,
        description: 'Output HDF JSON folder',
    }),
    project: core_1.Flags.string({
        char: 'p',
        description: 'The name of the project(s) you would like to pull',
        multiple: true,
    }),
    allProjects: core_1.Flags.boolean({
        char: 'A',
        description: 'Pull all projects available within your team',
    }),
    logLevel: core_1.Flags.string({
        char: 'L',
        required: false,
        default: 'info',
        options: ['info', 'warn', 'debug', 'verbose'],
    }),
};
