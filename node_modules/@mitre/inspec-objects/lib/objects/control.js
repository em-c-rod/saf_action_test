"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.objectifyDescriptions = void 0;
const tslib_1 = require("tslib");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const flat_1 = require("flat");
const global_1 = require("../utilities/global");
function objectifyDescriptions(descs) {
    if (Array.isArray(descs)) {
        const descriptions = {};
        descs.forEach((description) => {
            descriptions[description.label] = description.data;
        });
        return descriptions;
    }
    return descs || {};
}
exports.objectifyDescriptions = objectifyDescriptions;
class Control {
    constructor(data) {
        this.tags = {};
        this.refs = [];
        this.tags = {};
        if (data) {
            Object.entries(data).forEach(([key, value]) => {
                lodash_1.default.set(this, key, value);
            });
        }
    }
    toUnformattedObject() {
        const flattened = (0, flat_1.flatten)(this);
        Object.entries(flattened).forEach(([key, value]) => {
            if (typeof value === 'string') {
                lodash_1.default.set(flattened, key, value);
            }
        });
        return new Control((0, flat_1.unflatten)(flattened));
    }
    toRuby(lineLength = 80) {
        let result = "# encoding: UTF-8\n\n";
        result += `control "${this.id}" do\n`;
        if (this.title) {
            result += `  title "${(0, global_1.escapeDoubleQuotes)((0, global_1.removeNewlinePlaceholders)(this.title))}"\n`;
        }
        else {
            console.error(`${this.id} does not have a title`);
        }
        if (this.desc) {
            result += `  desc "${(0, global_1.escapeDoubleQuotes)((0, global_1.removeNewlinePlaceholders)(this.desc))}"\n`;
        }
        else {
            console.error(`${this.id} does not have a desc`);
        }
        if (this.descs) {
            Object.entries(this.descs).forEach(([key, desc]) => {
                if (desc) {
                    result += `  desc "${key}", "${(0, global_1.escapeDoubleQuotes)((0, global_1.removeNewlinePlaceholders)(desc))}"\n`;
                }
                else {
                    console.error(`${this.id} does not have a desc for the value ${key}`);
                }
            });
        }
        if (this.impact) {
            result += `  impact ${this.impact}\n`;
        }
        else {
            console.error(`${this.id} does not have an impact`);
        }
        if (this.refs) {
            this.refs.forEach((ref) => {
                if (typeof ref === 'string') {
                    result += `  ref '${(0, global_1.escapeQuotes)((0, global_1.removeNewlinePlaceholders)(ref))}'\n`;
                }
                else {
                    result += `  ref '${(0, global_1.escapeQuotes)((0, global_1.removeNewlinePlaceholders)(ref.ref || ''))}', url: '${(0, global_1.escapeQuotes)((0, global_1.removeNewlinePlaceholders)(ref.url || ''))}'`;
                }
            });
        }
        Object.entries(this.tags).forEach(([tag, value]) => {
            if (value) {
                if (typeof value === "object") {
                    if (Array.isArray(value) && typeof value[0] === "string") {
                        result += `  tag ${tag}: ${JSON.stringify(value).split('","').join('", "')}\n`;
                    }
                    else {
                        // Convert JSON Object to Ruby Hash
                        const stringifiedObject = JSON.stringify(value, null, 2)
                            .replace(/\n/g, "\n  ")
                            .replace(/\{\n {6}/g, "{")
                            .replace(/\[\n {8}/g, "[")
                            .replace(/\n {6}\]/g, "]")
                            .replace(/\n {4}\}/g, "}")
                            .replace(/": \[/g, '" => [');
                        result += `  tag ${tag}: ${stringifiedObject}\n`;
                    }
                }
                else if (typeof value === "string") {
                    result += `  tag ${tag}: "${(0, global_1.escapeDoubleQuotes)((0, global_1.removeNewlinePlaceholders)(value))}"\n`;
                }
            }
        });
        if (this.describe) {
            result += '\n';
            result += this.describe;
        }
        result += "end";
        return result;
    }
}
exports.default = Control;
